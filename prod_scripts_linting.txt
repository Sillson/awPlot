************* Module BasinPOR_PREC
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 61, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                           ^ (bad-whitespace)
C: 64, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 66, 0: Wrong continued indentation (add 7 spaces).
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 66, 0: Exactly one space required after comma
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 70, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 76, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 81, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Wrong hanging indentation (remove 4 spaces).
                np.nanmean(np.array([i for i in basinNormData]), axis=0))
            |   ^ (bad-continuation)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 89, 0: Wrong continued indentation (add 7 spaces).
                 normData[index]['values']]  
                 ^      | (bad-continuation)
C: 89, 0: Trailing whitespace (trailing-whitespace)
C: 90, 0: Trailing whitespace (trailing-whitespace)
C: 94, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 94, 0: Trailing whitespace (trailing-whitespace)
C: 95, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C: 96, 0: Trailing whitespace (trailing-whitespace)
C:109, 0: Trailing whitespace (trailing-whitespace)
C:110, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C:116, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:120, 0: Trailing whitespace (trailing-whitespace)
C:123, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C:123, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C:124, 0: Trailing whitespace (trailing-whitespace)
C:126, 0: Trailing whitespace (trailing-whitespace)
C:130, 0: Wrong hanging indentation (remove 4 spaces).
                np.array([i for i in plotData]), axis=0))
            |   ^ (bad-continuation)
C:132, 0: Trailing whitespace (trailing-whitespace)
C:133, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(basinPlotData),366)])
                    ^   | (bad-continuation)
C:133, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                    ^ (bad-whitespace)
C:133, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                                       ^ (bad-whitespace)
C:137, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:138, 0: Trailing whitespace (trailing-whitespace)
C:146, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:147, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:148, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:150, 0: Trailing whitespace (trailing-whitespace)
C:151, 0: Wrong continued indentation (remove 5 spaces).
                                      [date_series[-1]]))
                                 |    ^ (bad-continuation)
C:155, 0: Trailing whitespace (trailing-whitespace)
C:160, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:161, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:161, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:162, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:163, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:163, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:164, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:167, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=i,
                    |   ^ (bad-continuation)
C:167, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:174, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:174, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:176, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:177, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:180, 0: Trailing whitespace (trailing-whitespace)
C:182, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:182, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:183, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:183, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:184, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:187, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:191, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:191, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:192, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:193, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:194, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:196, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:200, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:200, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:203, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:204, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:206, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:210, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:210, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:211, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:212, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:213, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:213, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:215, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:218, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:218, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:219, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:219, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:220, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:221, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:223, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:228, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=minData,
            |   ^ (bad-continuation)
C:228, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=minData,
                                         ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
                            name=r'Min',visible=True,
                                       ^ (bad-whitespace)
C:230, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:232, 0: Trailing whitespace (trailing-whitespace)
C:235, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:237, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:238, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:240, 0: Trailing whitespace (trailing-whitespace)
C:244, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:245, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:253, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:253, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:254, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:255, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:259, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=maxData,
            |   ^ (bad-continuation)
C:259, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=maxData,
                                         ^ (bad-whitespace)
C:260, 0: Exactly one space required after comma
                            name=r'Max',visible=True,
                                       ^ (bad-whitespace)
C:261, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:263, 0: Trailing whitespace (trailing-whitespace)
C:264, 0: Line too long (389/100) (line-too-long)
C:266, 0: Trailing whitespace (trailing-whitespace)
C:268, 0: Line too long (131/100) (line-too-long)
C:275, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:275, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
                                                             ^ (bad-whitespace)
C:277, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
        |   ^ (bad-continuation)
C:277, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
                                                        ^ (bad-whitespace)
C:280, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:281, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:281, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:281, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:284, 0: Trailing whitespace (trailing-whitespace)
C:291, 0: Trailing whitespace (trailing-whitespace)
C:294, 0: Trailing whitespace (trailing-whitespace)
C:295, 0: Trailing whitespace (trailing-whitespace)
C:297, 0: Trailing whitespace (trailing-whitespace)
C:299, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:299, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:300, 0: Line too long (191/100) (line-too-long)
C:300, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:303, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:304, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:306, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:307, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:308, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:309, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:311, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:314, 0: Trailing whitespace (trailing-whitespace)
C:314, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:315, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:318, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:319, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:320, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:320, 0: Trailing whitespace (trailing-whitespace)
C:320, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:321, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:321, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:322, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:323, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:324, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:324, 0: Trailing whitespace (trailing-whitespace)
C:325, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:327, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:356, 0: Trailing whitespace (trailing-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:361, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:363, 0: Trailing whitespace (trailing-whitespace)
C:368, 0: Exactly one space required after comma
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                ^ (bad-whitespace)
C:381, 0: Trailing whitespace (trailing-whitespace)
C:383, 0: Trailing whitespace (trailing-whitespace)
C:385, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'basinCharts','POR', sensor, state)
                                                         ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
                basinSites = getBasinSites(basinName,basinTable)
                                                    ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(basinName,basinSites))
                                                   ^ (bad-whitespace)
C:393, 0: Line too long (270/100) (line-too-long)
C:401, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "BasinPOR_PREC" doesn't conform to snake_case naming style (invalid-name)
C: 26, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 27, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 33, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 35, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 37,14: Redefining name 'basinName' from outer scope (line 382) (redefined-outer-name)
W: 37,25: Redefining name 'basinSites' from outer scope (line 389) (redefined-outer-name)
W: 59, 4: Redefining name 'sensor' from outer scope (line 362) (redefined-outer-name)
W: 62,33: Redefining name 'data' from outer scope (line 370) (redefined-outer-name)
W:157,19: Redefining name 'i' from outer scope (line 378) (redefined-outer-name)
C: 37, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Missing function docstring (missing-docstring)
R: 37, 0: Too many local variables (50/15) (too-many-locals)
C: 40, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 53, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 54, 4: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 55, 4: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 56, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 73, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 77,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 78,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 81, 8: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 85, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 91, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 92, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 98, 4: Variable name "basinBeginDate" doesn't conform to snake_case naming style (invalid-name)
C:100, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:103,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:106,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:108,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:110, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C:111, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C:117,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:118,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:121, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:125, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:129, 8: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C:132, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:135, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:137, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:143,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:144,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:145,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:146,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:147,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:148,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:149,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:150, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:153, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:156, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:264, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:267, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:268, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:270, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:272, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:274, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:276, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:285, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:290, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:291, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 37, 0: Too many branches (35/12) (too-many-branches)
R: 37, 0: Too many statements (131/50) (too-many-statements)
C:361, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:362, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:378,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:398,12: No exception type(s) specified (bare-except)
C: 18, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import csv" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 21, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 22, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module BasinPOR_SMS
C: 21, 0: Line too long (139/100) (line-too-long)
C: 55, 0: Trailing whitespace (trailing-whitespace)
C: 56, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C: 56, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C: 58, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                           ^ (bad-whitespace)
C: 62, 0: Trailing whitespace (trailing-whitespace)
C: 63, 0: Trailing whitespace (trailing-whitespace)
C: 63, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 64, 0: Wrong continued indentation (add 7 spaces).
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 64, 0: Exactly one space required after comma
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 67, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 67, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 68, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 69, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Wrong hanging indentation (remove 4 spaces).
                    {str(siteMeta['stationTriplet']) : 
                |   ^ (bad-continuation)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Wrong hanging indentation in dict value.
                        dt.strptime(str(siteMeta['beginDate']),
                     |  ^| (bad-continuation)
C: 78, 0: Trailing whitespace (trailing-whitespace)
C: 88, 0: Trailing whitespace (trailing-whitespace)
C: 89, 0: Trailing whitespace (trailing-whitespace)
C: 91, 0: Trailing whitespace (trailing-whitespace)
C: 93, 0: Trailing whitespace (trailing-whitespace)
C: 93, 0: Exactly one space required after comma
        sensorDepths = [-8,-20]# [-2,-4,-8,-20,-40]#    
                          ^ (bad-whitespace)
C: 97, 0: Trailing whitespace (trailing-whitespace)
C: 97, 0: Exactly one space required after comma
                url = '/'.join([dataUrl,'DAILY', sensor, 
                                       ^ (bad-whitespace)
C: 98, 0: Exactly one space required after comma
                                triplet.replace(':','_') + '.json'])
                                                   ^ (bad-whitespace)
C:105, 0: Exactly one space required after comma
                if hasattr(dataSite,r'values'):
                                   ^ (bad-whitespace)
C:108, 0: Wrong hanging indentation (remove 4 spaces).
                                sensorDepth,
                            |   ^ (bad-continuation)
C:109, 0: Wrong hanging indentation (remove 4 spaces).
                                str(dataSite['stationTriplet']))
                            |   ^ (bad-continuation)
C:111, 0: Exactly one space required after comma
                        padMissingData(dataSite,sDate,eDate)
                                               ^ (bad-whitespace)
C:111, 0: Exactly one space required after comma
                        padMissingData(dataSite,sDate,eDate)
                                                     ^ (bad-whitespace)
C:113, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Wrong continued indentation (add 7 spaces).
                                100*(c/float(sat)) for c in siteData]
                                ^      | (bad-continuation)
C:116, 0: Wrong hanging indentation (remove 4 spaces).
                            {str(dataSite['stationTriplet']) : 
                        |   ^ (bad-continuation)
C:116, 0: Trailing whitespace (trailing-whitespace)
C:117, 0: Wrong hanging indentation in dict value.
                                list(siteData)})               
                             |  ^| (bad-continuation)
C:117, 0: Trailing whitespace (trailing-whitespace)
C:121, 0: Trailing whitespace (trailing-whitespace)
C:127, 0: Trailing whitespace (trailing-whitespace)
C:129, 0: Wrong hanging indentation (remove 4 spaces).
                    {siteID : fillMissingData(plotData[siteID],30)})
                |   ^ (bad-continuation)
C:129, 0: Exactly one space required after comma
                    {siteID : fillMissingData(plotData[siteID],30)})
                                                              ^ (bad-whitespace)
C:135, 0: Wrong hanging indentation (remove 4 spaces).
                    np.array([i for i in smsPlotData if i]), axis=0))
                |   ^ (bad-continuation)
C:137, 0: Trailing whitespace (trailing-whitespace)
C:138, 0: Wrong continued indentation (add 4 spaces).
                        for i in range(0,len(basinPlotData),366)])
                        ^   | (bad-continuation)
C:138, 0: Exactly one space required after comma
                        for i in range(0,len(basinPlotData),366)])
                                        ^ (bad-whitespace)
C:138, 0: Exactly one space required after comma
                        for i in range(0,len(basinPlotData),366)])
                                                           ^ (bad-whitespace)
C:139, 0: Trailing whitespace (trailing-whitespace)
C:142, 0: Exactly one space required after comma
        statsData = list(map(list,zip(*allButCurrWY)))
                                 ^ (bad-whitespace)
C:143, 0: Trailing whitespace (trailing-whitespace)
C:151, 0: Exactly one space required after comma
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                                                ^ (bad-whitespace)
C:152, 0: Exactly one space required after comma
                highestData = [np.nanpercentile(a,90) for a in statsData]
                                                 ^ (bad-whitespace)
C:153, 0: Exactly one space required after comma
                lowData = [np.nanpercentile(a,30) for a in statsData]
                                             ^ (bad-whitespace)
C:154, 0: Exactly one space required after comma
                highData = [np.nanpercentile(a,70) for a in statsData]
                                              ^ (bad-whitespace)
C:156, 0: Trailing whitespace (trailing-whitespace)
C:158, 0: Trailing whitespace (trailing-whitespace)
C:159, 0: Wrong continued indentation (remove 1 space).
                                      [date_series[len(PORplotData[-1])+
                                     |^ (bad-continuation)
C:162, 0: Trailing whitespace (trailing-whitespace)
C:163, 0: Wrong continued indentation (remove 1 space).
                                      [date_series[-1]]))
                                     |^ (bad-continuation)
C:164, 0: Trailing whitespace (trailing-whitespace)
C:169, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(
                        |   ^ (bad-continuation)
C:170, 0: Wrong hanging indentation (remove 4 spaces).
                                    x=date_series,y=i,
                                |   ^ (bad-continuation)
C:170, 0: Exactly one space required after comma
                                    x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:171, 0: Wrong hanging indentation (remove 4 spaces).
                                    name=str(sYear + index + 1),
                                |   ^ (bad-continuation)
C:172, 0: Wrong hanging indentation (remove 4 spaces).
                                    visible=True,connectgaps=True,
                                |   ^ (bad-continuation)
C:172, 0: Exactly one space required after comma
                                    visible=True,connectgaps=True,
                                                ^ (bad-whitespace)
C:173, 0: Wrong hanging indentation (remove 4 spaces).
                                    line=dict(color='rgb(0,0,0)'))])
                                |   ^ (bad-continuation)
C:176, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(x=date_series,y=i,
                        |   ^ (bad-continuation)
C:176, 0: Exactly one space required after comma
                            [go.Scatter(x=date_series,y=i,
                                                     ^ (bad-whitespace)
C:183, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=minData
                    |   ^ (bad-continuation)
C:183, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=minData
                                                 ^ (bad-whitespace)
C:184, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                    ^ (bad-whitespace)
C:184, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                                           ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:188, 0: Exactly one space required after comma
                                    fill='none',showlegend=False,
                                               ^ (bad-whitespace)
C:189, 0: Trailing whitespace (trailing-whitespace)
C:189, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])       
                                                    ^ (bad-whitespace)
C:191, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowestData
                    |   ^ (bad-continuation)
C:191, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowestData
                                                 ^ (bad-whitespace)
C:192, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                    ^ (bad-whitespace)
C:192, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                                           ^ (bad-whitespace)
C:193, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:196, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:197, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:200, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowData,
                    |   ^ (bad-continuation)
C:200, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowData,
                                                 ^ (bad-whitespace)
C:201, 0: Exactly one space required after comma
                                    legendgroup='centiles',name=r'30%',
                                                          ^ (bad-whitespace)
C:202, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:205, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:206, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:209, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highData,
                    |   ^ (bad-continuation)
C:209, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highData,
                                                 ^ (bad-whitespace)
C:212, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:215, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=True,
                                                  ^ (bad-whitespace)
C:216, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:219, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highestData,
                    |   ^ (bad-continuation)
C:219, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highestData,
                                                 ^ (bad-whitespace)
C:221, 0: Exactly one space required after comma
                                    name=r'90%',visible=True
                                               ^ (bad-whitespace)
C:222, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                    ^ (bad-whitespace)
C:222, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                                ^ (bad-whitespace)
C:224, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:225, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:227, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=maxData
                    |   ^ (bad-continuation)
C:227, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=maxData
                                                 ^ (bad-whitespace)
C:228, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                    ^ (bad-whitespace)
C:228, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                                           ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:232, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:233, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:237, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData,
                |   ^ (bad-continuation)
C:237, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData,
                                             ^ (bad-whitespace)
C:238, 0: Exactly one space required after comma
                                name=r'Min',visible=True,
                                           ^ (bad-whitespace)
C:239, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:241, 0: Trailing whitespace (trailing-whitespace)
C:244, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:244, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:245, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:246, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:250, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData,
                |   ^ (bad-continuation)
C:250, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData,
                                             ^ (bad-whitespace)
C:251, 0: Exactly one space required after comma
                                name=r'Max',visible=True,
                                           ^ (bad-whitespace)
C:252, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:254, 0: Trailing whitespace (trailing-whitespace)
C:255, 0: Line too long (320/100) (line-too-long)
C:256, 0: Trailing whitespace (trailing-whitespace)
C:258, 0: Wrong hanging indentation (remove 4 spaces).
                images= [dict(
            |   ^ (bad-continuation)
C:258, 0: No space allowed after keyword argument assignment
                images= [dict(
                      ^ (bad-whitespace)
C:259, 0: Line too long (195/100) (line-too-long)
C:259, 0: No space allowed after keyword argument assignment
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                          ^ (bad-whitespace)
C:262, 0: No space allowed after keyword argument assignment
                    x= 0,
                     ^ (bad-whitespace)
C:263, 0: No space allowed after keyword argument assignment
                    y= 0.9,
                     ^ (bad-whitespace)
C:265, 0: No space allowed after keyword argument assignment
                    sizex= 0.4,
                         ^ (bad-whitespace)
C:266, 0: No space allowed after keyword argument assignment
                    sizey= 0.1,
                         ^ (bad-whitespace)
C:267, 0: No space allowed after keyword argument assignment
                    opacity= 0.5,
                           ^ (bad-whitespace)
C:268, 0: No space allowed after keyword argument assignment
                    layer= "above"
                         ^ (bad-whitespace)
C:270, 0: Wrong hanging indentation (remove 4 spaces).
                annotations=[dict(
            |   ^ (bad-continuation)
C:273, 0: Trailing whitespace (trailing-whitespace)
C:273, 0: Exactly one space required after comma
                    x=0,y=-0.41, 
                       ^ (bad-whitespace)
C:274, 0: Exactly one space required after comma
                    yref='paper',xref='paper',
                                ^ (bad-whitespace)
C:276, 0: Trailing whitespace (trailing-whitespace)
C:277, 0: Exactly one space required after comma
            legend=dict(traceorder='reversed',tracegroupgap=1,
                                             ^ (bad-whitespace)
C:278, 0: Exactly one space required after comma
                        bordercolor='#E2E2E2',borderwidth=2),
                                             ^ (bad-whitespace)
C:279, 0: No space allowed around keyword argument assignment
            showlegend = True,
                       ^ (bad-whitespace)
C:288, 0: Wrong hanging indentation (remove 12 spaces).
                                buttons=list([
                    |           ^ (bad-continuation)
C:289, 0: Wrong hanging indentation (add 4 spaces).
                                dict(count=9,
                                ^   | (bad-continuation)
C:293, 0: Wrong hanging indentation (add 4 spaces).
                                dict(count=6,
                                ^   | (bad-continuation)
C:297, 0: Wrong hanging indentation (add 4 spaces).
                                dict(count=3,
                                ^   | (bad-continuation)
C:301, 0: Wrong hanging indentation (add 4 spaces).
                                dict(label='WY', step='all')
                                ^   | (bad-continuation)
C:302, 0: Wrong hanging indentation.
                            ])
                            ^   |   | (bad-continuation)
C:307, 0: Trailing whitespace (trailing-whitespace)
C:309, 0: Wrong continued indentation (add 4 spaces).
            'layout': layout}
            ^   | (bad-continuation)
C:310, 0: Trailing whitespace (trailing-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:312, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:314, 0: Trailing whitespace (trailing-whitespace)
C:319, 0: Exactly one space required after comma
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                ^ (bad-whitespace)
C:332, 0: Trailing whitespace (trailing-whitespace)
C:335, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'basinCharts','POR', sensor, state)
                                                         ^ (bad-whitespace)
C:339, 0: Exactly one space required after comma
                basinSites = getBasinSites(basinName,basinTable)
                                                    ^ (bad-whitespace)
C:340, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(basinName,basinSites))
                                                   ^ (bad-whitespace)
C:343, 0: Line too long (270/100) (line-too-long)
C:351, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "BasinPOR_SMS" doesn't conform to snake_case naming style (invalid-name)
C: 24, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 25, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 33, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 35, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 37,14: Redefining name 'basinName' from outer scope (line 333) (redefined-outer-name)
W: 37,25: Redefining name 'basinSites' from outer scope (line 339) (redefined-outer-name)
W: 57, 4: Redefining name 'sensor' from outer scope (line 313) (redefined-outer-name)
W: 60,33: Redefining name 'data' from outer scope (line 321) (redefined-outer-name)
W:166,23: Redefining name 'i' from outer scope (line 329) (redefined-outer-name)
C: 37, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Missing function docstring (missing-docstring)
R: 37, 0: Too many local variables (48/15) (too-many-locals)
C: 40, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 53, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 54, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 66, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 71, 8: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 72,12: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 77, 8: Variable name "basinBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 79, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 82,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 85,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 87,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 89, 8: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 90, 8: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 92, 8: Variable name "dataDict" doesn't conform to snake_case naming style (invalid-name)
C: 93, 8: Variable name "sensorDepths" doesn't conform to snake_case naming style (invalid-name)
C: 94,12: Variable name "sensorDepth" doesn't conform to snake_case naming style (invalid-name)
C: 99,45: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:100,20: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:102,12: Variable name "depthData" doesn't conform to snake_case naming style (invalid-name)
C:103,16: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:104,16: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:112,24: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:122, 8: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:124, 8: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:127,12: Variable name "siteID" doesn't conform to snake_case naming style (invalid-name)
C:127,20: Variable name "smsValues" doesn't conform to snake_case naming style (invalid-name)
C:130, 8: Variable name "smsPlotData" doesn't conform to snake_case naming style (invalid-name)
C:134,12: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C:137, 8: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:140, 8: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:142, 8: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:148,16: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:149,16: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:150,16: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:151,16: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:152,16: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:153,16: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:154,16: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:158,12: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:162,12: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:165,11: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:255, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
R: 37, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
W:127,20: Unused variable 'smsValues' (unused-variable)
R: 37, 0: Too many branches (27/12) (too-many-branches)
R: 37, 0: Too many statements (110/50) (too-many-statements)
C:312, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:313, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:329,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:348,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import csv" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module BasinPOR_STO
C: 21, 0: Line too long (109/100) (line-too-long)
C: 53, 0: Trailing whitespace (trailing-whitespace)
C: 54, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C: 54, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C: 56, 0: Trailing whitespace (trailing-whitespace)
C: 58, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                           ^ (bad-whitespace)
C: 62, 0: Trailing whitespace (trailing-whitespace)
C: 63, 0: Trailing whitespace (trailing-whitespace)
C: 63, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 64, 0: Wrong continued indentation (add 7 spaces).
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 64, 0: Exactly one space required after comma
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 67, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 67, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 68, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 69, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Wrong hanging indentation (remove 4 spaces).
                    {str(siteMeta['stationTriplet']) : 
                |   ^ (bad-continuation)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Wrong hanging indentation in dict value.
                        dt.strptime(str(siteMeta['beginDate']),
                     |  ^| (bad-continuation)
C: 78, 0: Trailing whitespace (trailing-whitespace)
C: 88, 0: Trailing whitespace (trailing-whitespace)
C: 89, 0: Trailing whitespace (trailing-whitespace)
C: 91, 0: Trailing whitespace (trailing-whitespace)
C: 93, 0: Trailing whitespace (trailing-whitespace)
C: 93, 0: Exactly one space required after comma
        sensorDepths = [-2,-4,-8,-20,-40]          
                          ^ (bad-whitespace)
C: 93, 0: Exactly one space required after comma
        sensorDepths = [-2,-4,-8,-20,-40]          
                             ^ (bad-whitespace)
C: 93, 0: Exactly one space required after comma
        sensorDepths = [-2,-4,-8,-20,-40]          
                                ^ (bad-whitespace)
C: 93, 0: Exactly one space required after comma
        sensorDepths = [-2,-4,-8,-20,-40]          
                                    ^ (bad-whitespace)
C: 96, 0: Trailing whitespace (trailing-whitespace)
C: 99, 0: Trailing whitespace (trailing-whitespace)
C: 99, 0: Exactly one space required after comma
                        url = '/'.join([dataUrl,'DAILY', sensor, 
                                               ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
                                        triplet.replace(':','_') + '.json'])
                                                           ^ (bad-whitespace)
C:107, 0: Exactly one space required after comma
                        if hasattr(dataSite,r'values'):
                                           ^ (bad-whitespace)
C:113, 0: Exactly one space required after comma
                                padMissingData(dataSite,sDate,eDate)
                                                       ^ (bad-whitespace)
C:113, 0: Exactly one space required after comma
                                padMissingData(dataSite,sDate,eDate)
                                                             ^ (bad-whitespace)
C:115, 0: Trailing whitespace (trailing-whitespace)
C:118, 0: Wrong hanging indentation (remove 4 spaces).
                                    {str(dataSite['stationTriplet']) : 
                                |   ^ (bad-continuation)
C:118, 0: Trailing whitespace (trailing-whitespace)
C:119, 0: Wrong hanging indentation in dict value.
                                        list(siteData)})               
                                     |  ^| (bad-continuation)
C:119, 0: Trailing whitespace (trailing-whitespace)
C:123, 0: Trailing whitespace (trailing-whitespace)
C:127, 0: Trailing whitespace (trailing-whitespace)
C:128, 0: Trailing whitespace (trailing-whitespace)
C:130, 0: Wrong hanging indentation (remove 4 spaces).
                    {siteID : fillMissingData(plotData[siteID],30)})
                |   ^ (bad-continuation)
C:130, 0: Exactly one space required after comma
                    {siteID : fillMissingData(plotData[siteID],30)})
                                                              ^ (bad-whitespace)
C:132, 0: Trailing whitespace (trailing-whitespace)
C:136, 0: Wrong hanging indentation (remove 4 spaces).
                    np.array([i for i in smsPlotData if i]), axis=0))
                |   ^ (bad-continuation)
C:138, 0: Trailing whitespace (trailing-whitespace)
C:139, 0: Wrong continued indentation (add 4 spaces).
                        for i in range(0,len(basinPlotData),366)])
                        ^   | (bad-continuation)
C:139, 0: Exactly one space required after comma
                        for i in range(0,len(basinPlotData),366)])
                                        ^ (bad-whitespace)
C:139, 0: Exactly one space required after comma
                        for i in range(0,len(basinPlotData),366)])
                                                           ^ (bad-whitespace)
C:140, 0: Trailing whitespace (trailing-whitespace)
C:143, 0: Exactly one space required after comma
        statsData = list(map(list,zip(*allButCurrWY)))
                                 ^ (bad-whitespace)
C:144, 0: Trailing whitespace (trailing-whitespace)
C:152, 0: Exactly one space required after comma
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                                                ^ (bad-whitespace)
C:153, 0: Exactly one space required after comma
                highestData = [np.nanpercentile(a,90) for a in statsData]
                                                 ^ (bad-whitespace)
C:154, 0: Exactly one space required after comma
                lowData = [np.nanpercentile(a,30) for a in statsData]
                                             ^ (bad-whitespace)
C:155, 0: Exactly one space required after comma
                highData = [np.nanpercentile(a,70) for a in statsData]
                                              ^ (bad-whitespace)
C:157, 0: Trailing whitespace (trailing-whitespace)
C:159, 0: Trailing whitespace (trailing-whitespace)
C:160, 0: Wrong continued indentation (remove 1 space).
                                      [date_series[len(PORplotData[-1])+
                                     |^ (bad-continuation)
C:163, 0: Trailing whitespace (trailing-whitespace)
C:164, 0: Wrong continued indentation (remove 1 space).
                                      [date_series[-1]]))
                                     |^ (bad-continuation)
C:165, 0: Trailing whitespace (trailing-whitespace)
C:170, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(
                        |   ^ (bad-continuation)
C:171, 0: Wrong hanging indentation (remove 4 spaces).
                                    x=date_series,y=i,
                                |   ^ (bad-continuation)
C:171, 0: Exactly one space required after comma
                                    x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:172, 0: Wrong hanging indentation (remove 4 spaces).
                                    name=str(sYear + index + 1),
                                |   ^ (bad-continuation)
C:173, 0: Wrong hanging indentation (remove 4 spaces).
                                    visible=True,connectgaps=True,
                                |   ^ (bad-continuation)
C:173, 0: Exactly one space required after comma
                                    visible=True,connectgaps=True,
                                                ^ (bad-whitespace)
C:174, 0: Wrong hanging indentation (remove 4 spaces).
                                    line=dict(color='rgb(0,0,0)'))])
                                |   ^ (bad-continuation)
C:177, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(x=date_series,y=i,
                        |   ^ (bad-continuation)
C:177, 0: Exactly one space required after comma
                            [go.Scatter(x=date_series,y=i,
                                                     ^ (bad-whitespace)
C:184, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=minData
                    |   ^ (bad-continuation)
C:184, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=minData
                                                 ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                    ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                                           ^ (bad-whitespace)
C:186, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
                                    fill='none',showlegend=False,
                                               ^ (bad-whitespace)
C:190, 0: Trailing whitespace (trailing-whitespace)
C:190, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])       
                                                    ^ (bad-whitespace)
C:192, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowestData
                    |   ^ (bad-continuation)
C:192, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowestData
                                                 ^ (bad-whitespace)
C:193, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                    ^ (bad-whitespace)
C:193, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                                           ^ (bad-whitespace)
C:194, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:197, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:198, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:201, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowData,
                    |   ^ (bad-continuation)
C:201, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowData,
                                                 ^ (bad-whitespace)
C:202, 0: Exactly one space required after comma
                                    legendgroup='centiles',name=r'30%',
                                                          ^ (bad-whitespace)
C:203, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:206, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:207, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:210, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highData,
                    |   ^ (bad-continuation)
C:210, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highData,
                                                 ^ (bad-whitespace)
C:213, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:216, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=True,
                                                  ^ (bad-whitespace)
C:217, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:220, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highestData,
                    |   ^ (bad-continuation)
C:220, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highestData,
                                                 ^ (bad-whitespace)
C:222, 0: Exactly one space required after comma
                                    name=r'90%',visible=True
                                               ^ (bad-whitespace)
C:223, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                    ^ (bad-whitespace)
C:223, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                                ^ (bad-whitespace)
C:225, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:226, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:228, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=maxData
                    |   ^ (bad-continuation)
C:228, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=maxData
                                                 ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                    ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                                           ^ (bad-whitespace)
C:230, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:233, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:234, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:238, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData,
                |   ^ (bad-continuation)
C:238, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData,
                                             ^ (bad-whitespace)
C:239, 0: Exactly one space required after comma
                                name=r'Min',visible=True,
                                           ^ (bad-whitespace)
C:240, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:242, 0: Trailing whitespace (trailing-whitespace)
C:245, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:245, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:246, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:247, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:251, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData,
                |   ^ (bad-continuation)
C:251, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData,
                                             ^ (bad-whitespace)
C:252, 0: Exactly one space required after comma
                                name=r'Max',visible=True,
                                           ^ (bad-whitespace)
C:253, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:255, 0: Trailing whitespace (trailing-whitespace)
C:256, 0: Line too long (320/100) (line-too-long)
C:257, 0: Trailing whitespace (trailing-whitespace)
C:259, 0: Wrong hanging indentation (remove 4 spaces).
                images= [dict(
            |   ^ (bad-continuation)
C:259, 0: No space allowed after keyword argument assignment
                images= [dict(
                      ^ (bad-whitespace)
C:260, 0: Line too long (195/100) (line-too-long)
C:260, 0: No space allowed after keyword argument assignment
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                          ^ (bad-whitespace)
C:263, 0: No space allowed after keyword argument assignment
                    x= 0,
                     ^ (bad-whitespace)
C:264, 0: No space allowed after keyword argument assignment
                    y= 0.9,
                     ^ (bad-whitespace)
C:266, 0: No space allowed after keyword argument assignment
                    sizex= 0.4,
                         ^ (bad-whitespace)
C:267, 0: No space allowed after keyword argument assignment
                    sizey= 0.1,
                         ^ (bad-whitespace)
C:268, 0: No space allowed after keyword argument assignment
                    opacity= 0.5,
                           ^ (bad-whitespace)
C:269, 0: No space allowed after keyword argument assignment
                    layer= "above"
                         ^ (bad-whitespace)
C:271, 0: Wrong hanging indentation (remove 4 spaces).
                annotations=[dict(
            |   ^ (bad-continuation)
C:274, 0: Trailing whitespace (trailing-whitespace)
C:274, 0: Exactly one space required after comma
                    x=0,y=-0.41, 
                       ^ (bad-whitespace)
C:275, 0: Exactly one space required after comma
                    yref='paper',xref='paper',
                                ^ (bad-whitespace)
C:277, 0: Trailing whitespace (trailing-whitespace)
C:278, 0: Exactly one space required after comma
            legend=dict(traceorder='reversed',tracegroupgap=1,
                                             ^ (bad-whitespace)
C:279, 0: Exactly one space required after comma
                        bordercolor='#E2E2E2',borderwidth=2),
                                             ^ (bad-whitespace)
C:280, 0: No space allowed around keyword argument assignment
            showlegend = True,
                       ^ (bad-whitespace)
C:290, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(count=9,
                        |   ^ (bad-continuation)
C:294, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(count=6,
                        |   ^ (bad-continuation)
C:298, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(count=3,
                        |   ^ (bad-continuation)
C:302, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(label='WY', step='all')
                        |   ^ (bad-continuation)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:313, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:315, 0: Trailing whitespace (trailing-whitespace)
C:320, 0: Exactly one space required after comma
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                ^ (bad-whitespace)
C:333, 0: Trailing whitespace (trailing-whitespace)
C:335, 0: Trailing whitespace (trailing-whitespace)
C:337, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'basinCharts','POR', sensor, state)
                                                         ^ (bad-whitespace)
C:341, 0: Exactly one space required after comma
                basinSites = getBasinSites(basinName,basinTable)
                                                    ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(basinName,basinSites))
                                                   ^ (bad-whitespace)
C:345, 0: Line too long (270/100) (line-too-long)
C:353, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "BasinPOR_STO" doesn't conform to snake_case naming style (invalid-name)
C: 24, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 25, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 31, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 32, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 33, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 35,14: Redefining name 'basinName' from outer scope (line 334) (redefined-outer-name)
W: 35,25: Redefining name 'basinSites' from outer scope (line 341) (redefined-outer-name)
W: 55, 4: Redefining name 'sensor' from outer scope (line 314) (redefined-outer-name)
W: 60,33: Redefining name 'data' from outer scope (line 322) (redefined-outer-name)
W:167,23: Redefining name 'i' from outer scope (line 330) (redefined-outer-name)
C: 35, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 35, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 35, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 35, 0: Missing function docstring (missing-docstring)
R: 35, 0: Too many local variables (49/15) (too-many-locals)
C: 38, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 40, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
E: 57,13: Undefined variable 'awdb' (undefined-variable)
C: 66, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 71, 8: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 72,12: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 77, 8: Variable name "basinBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 79, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 82,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 85,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 87,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 89, 8: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 90, 8: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 92, 8: Variable name "dataDict" doesn't conform to snake_case naming style (invalid-name)
C: 93, 8: Variable name "sensorDepths" doesn't conform to snake_case naming style (invalid-name)
C: 94,12: Variable name "sensorDepth" doesn't conform to snake_case naming style (invalid-name)
C:101,53: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:102,28: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:104,20: Variable name "depthData" doesn't conform to snake_case naming style (invalid-name)
C:105,24: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:106,24: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:114,32: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:124, 8: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:125, 8: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
R: 70, 4: Too many nested blocks (7/5) (too-many-nested-blocks)
C:128,12: Variable name "siteID" doesn't conform to snake_case naming style (invalid-name)
C:128,20: Variable name "smsValues" doesn't conform to snake_case naming style (invalid-name)
C:131, 8: Variable name "smsPlotData" doesn't conform to snake_case naming style (invalid-name)
C:135,12: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C:138, 8: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:141, 8: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:143, 8: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:149,16: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:150,16: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:151,16: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:152,16: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:153,16: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:154,16: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:155,16: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:159,12: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:163,12: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:166,11: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:256, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
W:128,20: Unused variable 'smsValues' (unused-variable)
R: 35, 0: Too many branches (29/12) (too-many-branches)
R: 35, 0: Too many statements (110/50) (too-many-statements)
C:313, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:314, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:330,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:350,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import csv" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module BasinPOR_SWE
C: 23, 0: Line too long (114/100) (line-too-long)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 61, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                           ^ (bad-whitespace)
C: 64, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 66, 0: Wrong continued indentation (add 7 spaces).
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 66, 0: Exactly one space required after comma
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 70, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 76, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 81, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Wrong hanging indentation (remove 4 spaces).
                np.nanmean(np.array([i for i in basinNormData]), axis=0))
            |   ^ (bad-continuation)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 89, 0: Wrong continued indentation (add 7 spaces).
                 normData[index]['values']]  
                 ^      | (bad-continuation)
C: 89, 0: Trailing whitespace (trailing-whitespace)
C: 90, 0: Trailing whitespace (trailing-whitespace)
C: 94, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 94, 0: Trailing whitespace (trailing-whitespace)
C: 95, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C: 96, 0: Trailing whitespace (trailing-whitespace)
C: 97, 0: Trailing whitespace (trailing-whitespace)
C:109, 0: Trailing whitespace (trailing-whitespace)
C:110, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C:116, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:123, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C:123, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C:124, 0: Trailing whitespace (trailing-whitespace)
C:126, 0: Trailing whitespace (trailing-whitespace)
C:130, 0: Wrong hanging indentation (remove 4 spaces).
                np.array([i for i in plotData]), axis=0))
            |   ^ (bad-continuation)
C:132, 0: Trailing whitespace (trailing-whitespace)
C:133, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(basinPlotData),366)])
                    ^   | (bad-continuation)
C:133, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                    ^ (bad-whitespace)
C:133, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                                       ^ (bad-whitespace)
C:137, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:138, 0: Trailing whitespace (trailing-whitespace)
C:145, 0: Exactly one space required after comma
            meanData = [np.nanpercentile(a,50) for a in statsData]
                                          ^ (bad-whitespace)
C:146, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:147, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:148, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:151, 0: Trailing whitespace (trailing-whitespace)
C:153, 0: Trailing whitespace (trailing-whitespace)
C:154, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[get_last_non_zero_index(
                                 |^ (bad-continuation)
C:155, 0: Wrong hanging indentation (remove 4 spaces).
                                          maxData[0:305]) + future_date_pad]]))
                                      |   ^ (bad-continuation)
C:157, 0: Trailing whitespace (trailing-whitespace)
C:158, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:159, 0: Trailing whitespace (trailing-whitespace)
C:164, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:165, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:165, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:166, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:167, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:167, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:168, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:171, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=i,
                    |   ^ (bad-continuation)
C:171, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:178, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:178, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:180, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:181, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:183, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:184, 0: Trailing whitespace (trailing-whitespace)
C:186, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:186, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:187, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:187, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:188, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:191, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:195, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:195, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:196, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:197, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:198, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:200, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:204, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:204, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:207, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:208, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:210, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:214, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:214, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:215, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:216, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:217, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:217, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:219, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:222, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:222, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:223, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:223, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:224, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:225, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:227, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:232, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=minData,
            |   ^ (bad-continuation)
C:232, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=minData,
                                         ^ (bad-whitespace)
C:233, 0: Exactly one space required after comma
                            name=r'Min',visible=True,
                                       ^ (bad-whitespace)
C:234, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:236, 0: Trailing whitespace (trailing-whitespace)
C:239, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:241, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:242, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:244, 0: Trailing whitespace (trailing-whitespace)
C:248, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:249, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:251, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:256, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:256, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:257, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:258, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:262, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=maxData,
            |   ^ (bad-continuation)
C:262, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=maxData,
                                         ^ (bad-whitespace)
C:263, 0: Exactly one space required after comma
                            name=r'Max',visible=True,
                                       ^ (bad-whitespace)
C:264, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:266, 0: Trailing whitespace (trailing-whitespace)
C:267, 0: Line too long (391/100) (line-too-long)
C:269, 0: Trailing whitespace (trailing-whitespace)
C:271, 0: Line too long (131/100) (line-too-long)
C:274, 0: Trailing whitespace (trailing-whitespace)
C:277, 0: Trailing whitespace (trailing-whitespace)
C:282, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:282, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
                                                             ^ (bad-whitespace)
C:284, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
        |   ^ (bad-continuation)
C:284, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
                                                        ^ (bad-whitespace)
C:287, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:288, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:288, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:288, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:291, 0: Trailing whitespace (trailing-whitespace)
C:298, 0: Trailing whitespace (trailing-whitespace)
C:301, 0: Trailing whitespace (trailing-whitespace)
C:302, 0: Trailing whitespace (trailing-whitespace)
C:304, 0: Trailing whitespace (trailing-whitespace)
C:306, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:306, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:307, 0: Line too long (191/100) (line-too-long)
C:307, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:310, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:311, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:313, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:314, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:315, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:316, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:318, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:321, 0: Trailing whitespace (trailing-whitespace)
C:321, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:322, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:325, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:326, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:327, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:327, 0: Trailing whitespace (trailing-whitespace)
C:327, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:328, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:328, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:329, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:330, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:331, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:331, 0: Trailing whitespace (trailing-whitespace)
C:332, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:333, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:334, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:362, 0: Trailing whitespace (trailing-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:367, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:369, 0: Trailing whitespace (trailing-whitespace)
C:374, 0: Exactly one space required after comma
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                ^ (bad-whitespace)
C:387, 0: Trailing whitespace (trailing-whitespace)
C:389, 0: Trailing whitespace (trailing-whitespace)
C:391, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'basinCharts','POR', sensor, state)
                                                         ^ (bad-whitespace)
C:395, 0: Exactly one space required after comma
                basinSites = getBasinSites(basinName,basinTable)
                                                    ^ (bad-whitespace)
C:396, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(basinName,basinSites))
                                                   ^ (bad-whitespace)
C:399, 0: Line too long (270/100) (line-too-long)
C:407, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "BasinPOR_SWE" doesn't conform to snake_case naming style (invalid-name)
C: 26, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 27, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 33, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 35, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 37,14: Redefining name 'basinName' from outer scope (line 388) (redefined-outer-name)
W: 37,25: Redefining name 'basinSites' from outer scope (line 395) (redefined-outer-name)
W: 59, 4: Redefining name 'sensor' from outer scope (line 368) (redefined-outer-name)
W: 62,33: Redefining name 'data' from outer scope (line 376) (redefined-outer-name)
W:161,19: Redefining name 'i' from outer scope (line 384) (redefined-outer-name)
C: 37, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Missing function docstring (missing-docstring)
R: 37, 0: Too many local variables (51/15) (too-many-locals)
C: 40, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 53, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 54, 4: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 55, 4: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 56, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 73, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 77,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 78,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 81, 8: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 85, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 91, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 92, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 98, 4: Variable name "basinBeginDate" doesn't conform to snake_case naming style (invalid-name)
C:100, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:103,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:106,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:108,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:110, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C:111, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C:117,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:118,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:121, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:125, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:129, 8: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C:132, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:135, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:137, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:143,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:144,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:145,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:146,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:147,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:148,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:149,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:153, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:157, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:160, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:267, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:270, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:271, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:273, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:279, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:281, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:283, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:292, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:297, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:298, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 37, 0: Too many branches (36/12) (too-many-branches)
R: 37, 0: Too many statements (134/50) (too-many-statements)
C:367, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:368, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:384,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:404,12: No exception type(s) specified (bare-except)
C: 18, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import csv" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 21, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 22, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module BasinPOR_TAVG
C: 61, 0: Trailing whitespace (trailing-whitespace)
C: 62, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C: 62, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C: 64, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                           ^ (bad-whitespace)
C: 68, 0: Trailing whitespace (trailing-whitespace)
C: 69, 0: Trailing whitespace (trailing-whitespace)
C: 69, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 70, 0: Wrong continued indentation (add 7 spaces).
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 70, 0: Exactly one space required after comma
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 73, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 73, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 74, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 75, 0: Trailing whitespace (trailing-whitespace)
C: 80, 0: Wrong hanging indentation (remove 4 spaces).
                    {str(siteMeta['stationTriplet']) : 
                |   ^ (bad-continuation)
C: 80, 0: Trailing whitespace (trailing-whitespace)
C: 81, 0: Wrong hanging indentation in dict value.
                        dt.strptime(str(siteMeta['beginDate']),
                     |  ^| (bad-continuation)
C: 84, 0: Trailing whitespace (trailing-whitespace)
C: 94, 0: Trailing whitespace (trailing-whitespace)
C: 95, 0: Trailing whitespace (trailing-whitespace)
C: 97, 0: Trailing whitespace (trailing-whitespace)
C: 99, 0: Trailing whitespace (trailing-whitespace)
C:100, 0: Trailing whitespace (trailing-whitespace)
C:100, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'DAILY', sensor, 
                                   ^ (bad-whitespace)
C:101, 0: Wrong continued indentation (add 4 spaces).
                        triplet.replace(':','_') + '.json'])
                        ^   | (bad-continuation)
C:101, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:105, 0: Trailing whitespace (trailing-whitespace)
C:108, 0: Exactly one space required after comma
                padMissingData(dataSite,sDate,eDate)
                                       ^ (bad-whitespace)
C:108, 0: Exactly one space required after comma
                padMissingData(dataSite,sDate,eDate)
                                             ^ (bad-whitespace)
C:109, 0: Trailing whitespace (trailing-whitespace)
C:111, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Wrong hanging indentation (remove 4 spaces).
                    np.array([i for i in plotData]), axis=0))
                |   ^ (bad-continuation)
C:116, 0: Trailing whitespace (trailing-whitespace)
C:117, 0: Trailing whitespace (trailing-whitespace)
C:118, 0: Wrong continued indentation (add 4 spaces).
                        for i in range(0,len(basinPlotData),366)])
                        ^   | (bad-continuation)
C:118, 0: Exactly one space required after comma
                        for i in range(0,len(basinPlotData),366)])
                                        ^ (bad-whitespace)
C:118, 0: Exactly one space required after comma
                        for i in range(0,len(basinPlotData),366)])
                                                           ^ (bad-whitespace)
C:119, 0: Trailing whitespace (trailing-whitespace)
C:122, 0: Exactly one space required after comma
        statsData = list(map(list,zip(*allButCurrWY)))
                                 ^ (bad-whitespace)
C:123, 0: Trailing whitespace (trailing-whitespace)
W:125, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
W:126, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
W:127, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
W:128, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
W:129, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
W:130, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
W:131, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
C:131, 0: Exactly one space required after comma
                    lowestData = [np.nanpercentile(a,10) for a in statsData]
                                                    ^ (bad-whitespace)
W:132, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
C:132, 0: Exactly one space required after comma
                    highestData = [np.nanpercentile(a,90) for a in statsData]
                                                     ^ (bad-whitespace)
W:133, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
C:133, 0: Exactly one space required after comma
                    lowData = [np.nanpercentile(a,30) for a in statsData]
                                                 ^ (bad-whitespace)
W:134, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
C:134, 0: Exactly one space required after comma
                    highData = [np.nanpercentile(a,70) for a in statsData]
                                                  ^ (bad-whitespace)
W:135, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
C:136, 0: Trailing whitespace (trailing-whitespace)
W:136, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
W:137, 0: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
C:138, 0: Trailing whitespace (trailing-whitespace)
W:138, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
C:139, 0: Wrong continued indentation (remove 1 space).
                                          [date_series[len(PORplotData[-1])+
                                         |^ (bad-continuation)
C:142, 0: Trailing whitespace (trailing-whitespace)
W:142, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
C:143, 0: Wrong continued indentation (remove 1 space).
                                          [date_series[-1]]))
                                         |^ (bad-continuation)
C:144, 0: Trailing whitespace (trailing-whitespace)
C:149, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(
                        |   ^ (bad-continuation)
C:150, 0: Wrong hanging indentation (remove 4 spaces).
                                    x=date_series,y=i,
                                |   ^ (bad-continuation)
C:150, 0: Exactly one space required after comma
                                    x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:151, 0: Wrong hanging indentation (remove 4 spaces).
                                    name=str(sYear + index + 1),
                                |   ^ (bad-continuation)
C:152, 0: Wrong hanging indentation (remove 4 spaces).
                                    visible=True,connectgaps=True,
                                |   ^ (bad-continuation)
C:152, 0: Exactly one space required after comma
                                    visible=True,connectgaps=True,
                                                ^ (bad-whitespace)
C:153, 0: Wrong hanging indentation (remove 4 spaces).
                                    line=dict(color='rgb(0,0,0)'))])
                                |   ^ (bad-continuation)
C:156, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(x=date_series,y=i,
                        |   ^ (bad-continuation)
C:156, 0: Exactly one space required after comma
                            [go.Scatter(x=date_series,y=i,
                                                     ^ (bad-whitespace)
C:163, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=minData
                    |   ^ (bad-continuation)
C:163, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=minData
                                                 ^ (bad-whitespace)
C:164, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                    ^ (bad-whitespace)
C:164, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                                           ^ (bad-whitespace)
C:165, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:168, 0: Exactly one space required after comma
                                    fill='none',showlegend=False,
                                               ^ (bad-whitespace)
C:169, 0: Trailing whitespace (trailing-whitespace)
C:169, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])       
                                                    ^ (bad-whitespace)
C:171, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowestData
                    |   ^ (bad-continuation)
C:171, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowestData
                                                 ^ (bad-whitespace)
C:172, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                    ^ (bad-whitespace)
C:172, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                                           ^ (bad-whitespace)
C:173, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:176, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:177, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:180, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowData,
                    |   ^ (bad-continuation)
C:180, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowData,
                                                 ^ (bad-whitespace)
C:181, 0: Exactly one space required after comma
                                    legendgroup='centiles',name=r'30%',
                                                          ^ (bad-whitespace)
C:182, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:186, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:189, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highData,
                    |   ^ (bad-continuation)
C:189, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highData,
                                                 ^ (bad-whitespace)
C:192, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:195, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=True,
                                                  ^ (bad-whitespace)
C:196, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:199, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highestData,
                    |   ^ (bad-continuation)
C:199, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highestData,
                                                 ^ (bad-whitespace)
C:201, 0: Exactly one space required after comma
                                    name=r'90%',visible=True
                                               ^ (bad-whitespace)
C:202, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                    ^ (bad-whitespace)
C:202, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                                ^ (bad-whitespace)
C:204, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:205, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:207, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=maxData
                    |   ^ (bad-continuation)
C:207, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=maxData
                                                 ^ (bad-whitespace)
C:208, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                    ^ (bad-whitespace)
C:208, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                                           ^ (bad-whitespace)
C:209, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:212, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:213, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:214, 0: Trailing whitespace (trailing-whitespace)
C:217, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData,
                |   ^ (bad-continuation)
C:217, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData,
                                             ^ (bad-whitespace)
C:218, 0: Exactly one space required after comma
                                name=r'Min',visible=True,
                                           ^ (bad-whitespace)
C:219, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:221, 0: Trailing whitespace (trailing-whitespace)
C:224, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:227, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:227, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',connectgaps=True,
                                                             ^ (bad-whitespace)
C:229, 0: Trailing whitespace (trailing-whitespace)
C:233, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,
                    |   ^ (bad-continuation)
C:234, 0: Exactly one space required after comma
                                    y=meanData,name=r'Normal (POR)',
                                              ^ (bad-whitespace)
C:235, 0: Exactly one space required after comma
                                    visible='legendonly',connectgaps=True,
                                                        ^ (bad-whitespace)
C:241, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=meanData,
                    |   ^ (bad-continuation)
C:241, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=meanData,
                                                 ^ (bad-whitespace)
C:242, 0: Exactly one space required after comma
                                    name=r'Normal (POR)',connectgaps=True,
                                                        ^ (bad-whitespace)
C:243, 0: Exactly one space required after comma
                                    visible=True,hoverinfo='none',
                                                ^ (bad-whitespace)
C:247, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData,
                |   ^ (bad-continuation)
C:247, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData,
                                             ^ (bad-whitespace)
C:248, 0: Exactly one space required after comma
                                name=r'Max',visible=True,
                                           ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:251, 0: Trailing whitespace (trailing-whitespace)
C:252, 0: Line too long (393/100) (line-too-long)
C:253, 0: Trailing whitespace (trailing-whitespace)
C:255, 0: Wrong hanging indentation (remove 4 spaces).
                images= [dict(
            |   ^ (bad-continuation)
C:255, 0: No space allowed after keyword argument assignment
                images= [dict(
                      ^ (bad-whitespace)
C:256, 0: Line too long (195/100) (line-too-long)
C:256, 0: No space allowed after keyword argument assignment
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                          ^ (bad-whitespace)
C:259, 0: No space allowed after keyword argument assignment
                    x= 0,
                     ^ (bad-whitespace)
C:260, 0: No space allowed after keyword argument assignment
                    y= 0.9,
                     ^ (bad-whitespace)
C:262, 0: No space allowed after keyword argument assignment
                    sizex= 0.4,
                         ^ (bad-whitespace)
C:263, 0: No space allowed after keyword argument assignment
                    sizey= 0.1,
                         ^ (bad-whitespace)
C:264, 0: No space allowed after keyword argument assignment
                    opacity= 0.5,
                           ^ (bad-whitespace)
C:265, 0: No space allowed after keyword argument assignment
                    layer= "above"
                         ^ (bad-whitespace)
C:267, 0: Wrong hanging indentation (remove 4 spaces).
                annotations=[dict(
            |   ^ (bad-continuation)
C:270, 0: Trailing whitespace (trailing-whitespace)
C:270, 0: Exactly one space required after comma
                    x=0,y=-0.41, 
                       ^ (bad-whitespace)
C:271, 0: Exactly one space required after comma
                    yref='paper',xref='paper',
                                ^ (bad-whitespace)
C:273, 0: Trailing whitespace (trailing-whitespace)
C:274, 0: Exactly one space required after comma
            legend=dict(traceorder='reversed',tracegroupgap=1,
                                             ^ (bad-whitespace)
C:275, 0: Exactly one space required after comma
                        bordercolor='#E2E2E2',borderwidth=2),
                                             ^ (bad-whitespace)
C:276, 0: No space allowed around keyword argument assignment
            showlegend = True,
                       ^ (bad-whitespace)
C:286, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(count=9,
                        |   ^ (bad-continuation)
C:290, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(count=6,
                        |   ^ (bad-continuation)
C:294, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(count=3,
                        |   ^ (bad-continuation)
C:298, 0: Wrong hanging indentation (remove 4 spaces).
                            dict(label='WY', step='all')
                        |   ^ (bad-continuation)
C:305, 0: Trailing whitespace (trailing-whitespace)
C:307, 0: Wrong continued indentation (add 4 spaces).
            'layout': layout}
            ^   | (bad-continuation)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:312, 0: Trailing whitespace (trailing-whitespace)
C:317, 0: Exactly one space required after comma
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                ^ (bad-whitespace)
C:330, 0: Trailing whitespace (trailing-whitespace)
C:332, 0: Trailing whitespace (trailing-whitespace)
C:334, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'basinCharts','POR', sensor, state)
                                                         ^ (bad-whitespace)
C:338, 0: Exactly one space required after comma
                basinSites = getBasinSites(basinName,basinTable)
                                                    ^ (bad-whitespace)
C:339, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(basinName,basinSites))
                                                   ^ (bad-whitespace)
C:342, 0: Line too long (270/100) (line-too-long)
C:350, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "BasinPOR_TAVG" doesn't conform to snake_case naming style (invalid-name)
C: 24, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 25, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 31, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 32, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 33, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 35,20: Redefining name 'data' from outer scope (line 319) (redefined-outer-name)
C: 35, 0: Argument name "m" doesn't conform to snake_case naming style (invalid-name)
C: 35, 0: Missing function docstring (missing-docstring)
W: 42,14: Redefining name 'basinName' from outer scope (line 331) (redefined-outer-name)
W: 42,25: Redefining name 'basinSites' from outer scope (line 338) (redefined-outer-name)
W: 63, 4: Redefining name 'sensor' from outer scope (line 311) (redefined-outer-name)
W: 66,33: Redefining name 'data' from outer scope (line 319) (redefined-outer-name)
W:146,23: Redefining name 'i' from outer scope (line 327) (redefined-outer-name)
C: 42, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 42, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 42, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 42, 0: Missing function docstring (missing-docstring)
R: 42, 0: Too many local variables (40/15) (too-many-locals)
C: 45, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 53, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 54, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 56, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 57, 4: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 58, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 59, 4: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 60, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 72, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 77, 8: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 78,12: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 83, 8: Variable name "basinBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 85, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 88,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 91,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 93,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 95, 8: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 96, 8: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C:102,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:103,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:106,12: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:110, 8: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:114,12: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C:117, 8: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:120, 8: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:122, 8: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:128,20: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:129,20: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:130,20: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:131,20: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:132,20: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:133,20: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:134,20: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:138,16: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:142,16: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:145,11: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:252, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
R: 42, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
R: 42, 0: Too many branches (27/12) (too-many-branches)
R: 42, 0: Too many statements (102/50) (too-many-statements)
C:310, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:311, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:327,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:347,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import csv" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module BasinProjection_PREC
C: 23, 0: Line too long (110/100) (line-too-long)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 61, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                           ^ (bad-whitespace)
C: 64, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 66, 0: Wrong continued indentation (add 7 spaces).
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 66, 0: Exactly one space required after comma
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 70, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 76, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 81, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Wrong hanging indentation (remove 4 spaces).
                np.nanmean(np.array([i for i in basinNormData]), axis=0))
            |   ^ (bad-continuation)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 89, 0: Wrong continued indentation (add 7 spaces).
                 normData[index]['values']] 
                 ^      | (bad-continuation)
C: 89, 0: Trailing whitespace (trailing-whitespace)
C: 90, 0: Trailing whitespace (trailing-whitespace)
C: 94, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 94, 0: Trailing whitespace (trailing-whitespace)
C: 95, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C:108, 0: Trailing whitespace (trailing-whitespace)
C:109, 0: Trailing whitespace (trailing-whitespace)
C:113, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C:115, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:122, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C:122, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C:123, 0: Trailing whitespace (trailing-whitespace)
C:125, 0: Trailing whitespace (trailing-whitespace)
C:129, 0: Wrong hanging indentation (remove 4 spaces).
                np.array([i for i in plotData]), axis=0))
            |   ^ (bad-continuation)
C:131, 0: Trailing whitespace (trailing-whitespace)
C:132, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(basinPlotData),366)])
                    ^   | (bad-continuation)
C:132, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                    ^ (bad-whitespace)
C:132, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                                       ^ (bad-whitespace)
C:136, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:137, 0: Trailing whitespace (trailing-whitespace)
C:145, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:146, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:147, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:148, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:149, 0: Trailing whitespace (trailing-whitespace)
C:150, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:152, 0: Trailing whitespace (trailing-whitespace)
C:153, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:154, 0: Trailing whitespace (trailing-whitespace)
C:158, 0: Exactly one space required after comma
    projData = [createPRECProjTrace(a,jDay,lastValue,nanList) for
                                     ^ (bad-whitespace)
C:158, 0: Exactly one space required after comma
    projData = [createPRECProjTrace(a,jDay,lastValue,nanList) for
                                          ^ (bad-whitespace)
C:158, 0: Exactly one space required after comma
    projData = [createPRECProjTrace(a,jDay,lastValue,nanList) for
                                                    ^ (bad-whitespace)
C:160, 0: Exactly one space required after comma
    statsProj = list(map(list,zip(*projData)))
                             ^ (bad-whitespace)
C:167, 0: Exactly one space required after comma
            medianProj = [np.nanpercentile(a,50) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:168, 0: Exactly one space required after comma
            lowestProj = [np.nanpercentile(a,10) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:169, 0: Exactly one space required after comma
            highestProj = [np.nanpercentile(a,90) for a in cleanStatsProj]
                                             ^ (bad-whitespace)
C:170, 0: Exactly one space required after comma
            lowProj = [np.nanpercentile(a,30) for a in cleanStatsProj]
                                         ^ (bad-whitespace)
C:171, 0: Exactly one space required after comma
            highProj = [np.nanpercentile(a,70) for a in cleanStatsProj]
                                          ^ (bad-whitespace)
C:172, 0: Trailing whitespace (trailing-whitespace)
C:173, 0: Trailing whitespace (trailing-whitespace)
C:178, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:179, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:179, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:180, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:181, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:181, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:182, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:185, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:186, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,
                            |   ^ (bad-continuation)
C:187, 0: Wrong hanging indentation (remove 4 spaces).
                                y=projData[index],
                            |   ^ (bad-continuation)
C:188, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:189, 0: Wrong hanging indentation (remove 4 spaces).
                                visible='legendonly',connectgaps=True)])
                            |   ^ (bad-continuation)
C:189, 0: Exactly one space required after comma
                                visible='legendonly',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:193, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:194, 0: Wrong continued indentation (remove 1 space).
                                 y=minProj,
                                |^ (bad-continuation)
C:195, 0: Wrong continued indentation (remove 1 space).
                                 name=r'Min Proj',
                                |^ (bad-continuation)
C:196, 0: Wrong continued indentation (remove 1 space).
                                 visible=True,connectgaps=True,
                                |^ (bad-continuation)
C:196, 0: Exactly one space required after comma
                                 visible=True,connectgaps=True,
                                             ^ (bad-whitespace)
C:197, 0: Wrong continued indentation (remove 1 space).
                                 line=dict(color='rgba(237,0,0,0.4)'))])
                                |^ (bad-continuation)
C:200, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:203, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:207, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:210, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:214, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:216, 0: Exactly one space required after comma
                                name=r'50% Proj',connectgaps=True,
                                                ^ (bad-whitespace)
C:221, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:224, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:228, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:231, 0: Exactly one space required after comma
                                name=r'90% Proj',visible=True,
                                                ^ (bad-whitespace)
C:235, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:238, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:239, 0: Trailing whitespace (trailing-whitespace)
C:243, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:243, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:244, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:244, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:245, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:246, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:248, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:249, 0: Trailing whitespace (trailing-whitespace)
C:251, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:251, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:252, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:252, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:253, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:254, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:256, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:260, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:260, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:261, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:262, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:263, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:265, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:269, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:269, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:272, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:273, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:275, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:279, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:279, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:280, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:281, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:282, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:282, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:284, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:287, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:287, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:288, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:288, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:289, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:292, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:294, 0: Trailing whitespace (trailing-whitespace)
C:297, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:299, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:300, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:302, 0: Trailing whitespace (trailing-whitespace)
C:306, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:307, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:315, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:315, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:317, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:319, 0: Trailing whitespace (trailing-whitespace)
C:320, 0: Line too long (389/100) (line-too-long)
C:322, 0: Trailing whitespace (trailing-whitespace)
C:324, 0: Line too long (131/100) (line-too-long)
C:330, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:330, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
                                                             ^ (bad-whitespace)
C:332, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
        |   ^ (bad-continuation)
C:332, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
                                                        ^ (bad-whitespace)
C:335, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:336, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:336, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:339, 0: Trailing whitespace (trailing-whitespace)
C:346, 0: Trailing whitespace (trailing-whitespace)
C:349, 0: Trailing whitespace (trailing-whitespace)
C:350, 0: Trailing whitespace (trailing-whitespace)
C:352, 0: Trailing whitespace (trailing-whitespace)
C:354, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:354, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:355, 0: Line too long (191/100) (line-too-long)
C:355, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:358, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:359, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:361, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:362, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:363, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:364, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:366, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:369, 0: Trailing whitespace (trailing-whitespace)
C:369, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:370, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:373, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:374, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:375, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:375, 0: Trailing whitespace (trailing-whitespace)
C:375, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:376, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:376, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:377, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:378, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:379, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:379, 0: Trailing whitespace (trailing-whitespace)
C:380, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:381, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:382, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:410, 0: Trailing whitespace (trailing-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:417, 0: Trailing whitespace (trailing-whitespace)
C:422, 0: Exactly one space required after comma
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                ^ (bad-whitespace)
C:435, 0: Trailing whitespace (trailing-whitespace)
C:437, 0: Trailing whitespace (trailing-whitespace)
C:439, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'basinCharts','Proj', sensor, state)
                                                         ^ (bad-whitespace)
C:443, 0: Exactly one space required after comma
                basinSites = getBasinSites(basinName,basinTable)
                                                    ^ (bad-whitespace)
C:444, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(basinName,basinSites))
                                                   ^ (bad-whitespace)
C:447, 0: Line too long (270/100) (line-too-long)
C:455, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "BasinProjection_PREC" doesn't conform to snake_case naming style (invalid-name)
C: 26, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 27, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 33, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 35, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 37,14: Redefining name 'basinName' from outer scope (line 436) (redefined-outer-name)
W: 37,25: Redefining name 'basinSites' from outer scope (line 443) (redefined-outer-name)
W: 59, 4: Redefining name 'sensor' from outer scope (line 416) (redefined-outer-name)
W: 62,33: Redefining name 'data' from outer scope (line 424) (redefined-outer-name)
W:175,19: Redefining name 'i' from outer scope (line 432) (redefined-outer-name)
C: 37, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Missing function docstring (missing-docstring)
R: 37, 0: Too many local variables (62/15) (too-many-locals)
C: 40, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 53, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 54, 4: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 55, 4: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 56, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 73, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 77,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 78,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 81, 8: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 85, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 91, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 92, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 97, 4: Variable name "basinBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 99, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:102,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:105,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:107,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:109, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C:110, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C:116,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:117,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:120, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:124, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:128, 8: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C:131, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:134, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:136, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:142,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:143,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:144,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:145,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:146,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:147,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:148,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:149, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:152, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:155, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:156, 4: Variable name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C:157, 4: Variable name "nanList" doesn't conform to snake_case naming style (invalid-name)
C:158, 4: Variable name "projData" doesn't conform to snake_case naming style (invalid-name)
C:160, 4: Variable name "statsProj" doesn't conform to snake_case naming style (invalid-name)
C:161, 4: Variable name "cleanStatsProj" doesn't conform to snake_case naming style (invalid-name)
C:165,12: Variable name "minProj" doesn't conform to snake_case naming style (invalid-name)
C:166,12: Variable name "maxProj" doesn't conform to snake_case naming style (invalid-name)
C:167,12: Variable name "medianProj" doesn't conform to snake_case naming style (invalid-name)
C:168,12: Variable name "lowestProj" doesn't conform to snake_case naming style (invalid-name)
C:169,12: Variable name "highestProj" doesn't conform to snake_case naming style (invalid-name)
C:170,12: Variable name "lowProj" doesn't conform to snake_case naming style (invalid-name)
C:171,12: Variable name "highProj" doesn't conform to snake_case naming style (invalid-name)
C:174, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:320, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:323, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:324, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:327, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:329, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:331, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:340, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:345, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:346, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 37, 0: Too many branches (42/12) (too-many-branches)
R: 37, 0: Too many statements (157/50) (too-many-statements)
C:415, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:416, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:432,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:452,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import csv" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 21, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module BasinProjection_SWE
C: 23, 0: Line too long (134/100) (line-too-long)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C: 58, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 61, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                           ^ (bad-whitespace)
C: 64, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Trailing whitespace (trailing-whitespace)
C: 65, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 66, 0: Wrong continued indentation (add 7 spaces).
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 66, 0: Exactly one space required after comma
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 70, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 76, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 81, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Wrong hanging indentation (remove 4 spaces).
                np.nanmean(np.array([i for i in basinNormData]), axis=0))
            |   ^ (bad-continuation)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 89, 0: Wrong continued indentation (add 7 spaces).
                 normData[index]['values']]  
                 ^      | (bad-continuation)
C: 89, 0: Trailing whitespace (trailing-whitespace)
C: 90, 0: Trailing whitespace (trailing-whitespace)
C: 94, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 94, 0: Trailing whitespace (trailing-whitespace)
C: 95, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C:108, 0: Trailing whitespace (trailing-whitespace)
C:109, 0: Trailing whitespace (trailing-whitespace)
C:113, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C:115, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:121, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C:121, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C:124, 0: Trailing whitespace (trailing-whitespace)
C:128, 0: Wrong hanging indentation (remove 4 spaces).
                np.array([i for i in plotData]), axis=0))
            |   ^ (bad-continuation)
C:130, 0: Trailing whitespace (trailing-whitespace)
C:131, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(basinPlotData),366)])
                    ^   | (bad-continuation)
C:131, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                    ^ (bad-whitespace)
C:131, 0: Exactly one space required after comma
                    for i in range(0,len(basinPlotData),366)])
                                                       ^ (bad-whitespace)
C:135, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:136, 0: Trailing whitespace (trailing-whitespace)
C:143, 0: Exactly one space required after comma
            meanData = [np.nanpercentile(a,50) for a in statsData]
                                          ^ (bad-whitespace)
C:144, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:145, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:146, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:147, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:149, 0: Trailing whitespace (trailing-whitespace)
C:151, 0: Trailing whitespace (trailing-whitespace)
C:152, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[get_last_non_zero_index(
                                 |^ (bad-continuation)
C:153, 0: Wrong hanging indentation (remove 4 spaces).
                                          maxData[0:305]) + future_date_pad]]))
                                      |   ^ (bad-continuation)
C:155, 0: Trailing whitespace (trailing-whitespace)
C:156, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:157, 0: Trailing whitespace (trailing-whitespace)
C:161, 0: Exactly one space required after comma
    projData = [createSWEProjTrace(a,jDay,lastValue,nanList) for
                                    ^ (bad-whitespace)
C:161, 0: Exactly one space required after comma
    projData = [createSWEProjTrace(a,jDay,lastValue,nanList) for
                                         ^ (bad-whitespace)
C:161, 0: Exactly one space required after comma
    projData = [createSWEProjTrace(a,jDay,lastValue,nanList) for
                                                   ^ (bad-whitespace)
C:163, 0: Exactly one space required after comma
    statsProj = list(map(list,zip(*projData)))
                             ^ (bad-whitespace)
C:170, 0: Exactly one space required after comma
            medianProj = [np.nanpercentile(a,50) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:171, 0: Exactly one space required after comma
            lowestProj = [np.nanpercentile(a,10) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:172, 0: Exactly one space required after comma
            highestProj = [np.nanpercentile(a,90) for a in cleanStatsProj]
                                             ^ (bad-whitespace)
C:173, 0: Exactly one space required after comma
            lowProj = [np.nanpercentile(a,30) for a in cleanStatsProj]
                                         ^ (bad-whitespace)
C:174, 0: Exactly one space required after comma
            highProj = [np.nanpercentile(a,70) for a in cleanStatsProj]
                                          ^ (bad-whitespace)
C:175, 0: Trailing whitespace (trailing-whitespace)
C:180, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:181, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:181, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:182, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:183, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:183, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:184, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:187, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:188, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,
                            |   ^ (bad-continuation)
C:189, 0: Wrong hanging indentation (remove 4 spaces).
                                y=projData[index],
                            |   ^ (bad-continuation)
C:190, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:191, 0: Wrong hanging indentation (remove 4 spaces).
                                visible='legendonly',connectgaps=True)])
                            |   ^ (bad-continuation)
C:191, 0: Exactly one space required after comma
                                visible='legendonly',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:195, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:196, 0: Wrong continued indentation (remove 1 space).
                                 y=minProj,
                                |^ (bad-continuation)
C:197, 0: Wrong continued indentation (remove 1 space).
                                 name=r'Min Proj',
                                |^ (bad-continuation)
C:198, 0: Wrong continued indentation (remove 1 space).
                                 visible=True,connectgaps=True,
                                |^ (bad-continuation)
C:198, 0: Exactly one space required after comma
                                 visible=True,connectgaps=True,
                                             ^ (bad-whitespace)
C:199, 0: Wrong continued indentation (remove 1 space).
                                 line=dict(color='rgba(237,0,0,0.4)'))])
                                |^ (bad-continuation)
C:202, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:205, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:209, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:212, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:216, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:218, 0: Exactly one space required after comma
                                name=r'50% Proj',connectgaps=True,
                                                ^ (bad-whitespace)
C:223, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:226, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:230, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:233, 0: Exactly one space required after comma
                                name=r'90% Proj',visible=True,
                                                ^ (bad-whitespace)
C:237, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:240, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:245, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:245, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:246, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:246, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:247, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:248, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:250, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:251, 0: Trailing whitespace (trailing-whitespace)
C:253, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:253, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:254, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:254, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:255, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:256, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:258, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:262, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:262, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:263, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:264, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:265, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:267, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:271, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:271, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:274, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:275, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:277, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:281, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:281, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:282, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:283, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:284, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:284, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:286, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:289, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:289, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:291, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:292, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:294, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:298, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:300, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:301, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:303, 0: Trailing whitespace (trailing-whitespace)
C:307, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:308, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:315, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:315, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:317, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:319, 0: Trailing whitespace (trailing-whitespace)
C:320, 0: Line too long (391/100) (line-too-long)
C:322, 0: Trailing whitespace (trailing-whitespace)
C:324, 0: Line too long (131/100) (line-too-long)
C:330, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:330, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
                                                             ^ (bad-whitespace)
C:332, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
        |   ^ (bad-continuation)
C:332, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
                                                        ^ (bad-whitespace)
C:335, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:336, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:336, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:339, 0: Trailing whitespace (trailing-whitespace)
C:346, 0: Trailing whitespace (trailing-whitespace)
C:349, 0: Trailing whitespace (trailing-whitespace)
C:350, 0: Trailing whitespace (trailing-whitespace)
C:352, 0: Trailing whitespace (trailing-whitespace)
C:354, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:354, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:355, 0: Line too long (191/100) (line-too-long)
C:355, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:358, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:359, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:361, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:362, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:363, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:364, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:366, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:369, 0: Trailing whitespace (trailing-whitespace)
C:369, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:370, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:373, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:374, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:375, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:375, 0: Trailing whitespace (trailing-whitespace)
C:375, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:376, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:376, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:377, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:378, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:379, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:379, 0: Trailing whitespace (trailing-whitespace)
C:380, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:381, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:382, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:410, 0: Trailing whitespace (trailing-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:417, 0: Trailing whitespace (trailing-whitespace)
C:422, 0: Exactly one space required after comma
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                ^ (bad-whitespace)
C:435, 0: Trailing whitespace (trailing-whitespace)
C:437, 0: Trailing whitespace (trailing-whitespace)
C:439, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'basinCharts','Proj', sensor, state)
                                                         ^ (bad-whitespace)
C:443, 0: Exactly one space required after comma
                basinSites = getBasinSites(basinName,basinTable)
                                                    ^ (bad-whitespace)
C:444, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(basinName,basinSites))
                                                   ^ (bad-whitespace)
C:447, 0: Line too long (270/100) (line-too-long)
C:455, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "BasinProjection_SWE" doesn't conform to snake_case naming style (invalid-name)
C: 26, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 27, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 33, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 35, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 37,14: Redefining name 'basinName' from outer scope (line 436) (redefined-outer-name)
W: 37,25: Redefining name 'basinSites' from outer scope (line 443) (redefined-outer-name)
W: 59, 4: Redefining name 'sensor' from outer scope (line 416) (redefined-outer-name)
W: 62,33: Redefining name 'data' from outer scope (line 424) (redefined-outer-name)
W:177,19: Redefining name 'i' from outer scope (line 432) (redefined-outer-name)
C: 37, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 37, 0: Missing function docstring (missing-docstring)
R: 37, 0: Too many local variables (63/15) (too-many-locals)
C: 40, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 53, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 54, 4: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 55, 4: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 56, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 73, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 77,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 78,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 81, 8: Variable name "basinNormData" doesn't conform to snake_case naming style (invalid-name)
C: 85, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 91, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 92, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 97, 4: Variable name "basinBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 99, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:102,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:105,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:107,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C:109, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C:110, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C:116,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:117,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:119, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:123, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:127, 8: Variable name "basinPlotData" doesn't conform to snake_case naming style (invalid-name)
C:130, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:133, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:135, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:141,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:142,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:143,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:144,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:145,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:146,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:147,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:151, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:155, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:158, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:159, 4: Variable name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C:160, 4: Variable name "nanList" doesn't conform to snake_case naming style (invalid-name)
C:161, 4: Variable name "projData" doesn't conform to snake_case naming style (invalid-name)
C:163, 4: Variable name "statsProj" doesn't conform to snake_case naming style (invalid-name)
C:164, 4: Variable name "cleanStatsProj" doesn't conform to snake_case naming style (invalid-name)
C:168,12: Variable name "minProj" doesn't conform to snake_case naming style (invalid-name)
C:169,12: Variable name "maxProj" doesn't conform to snake_case naming style (invalid-name)
C:170,12: Variable name "medianProj" doesn't conform to snake_case naming style (invalid-name)
C:171,12: Variable name "lowestProj" doesn't conform to snake_case naming style (invalid-name)
C:172,12: Variable name "highestProj" doesn't conform to snake_case naming style (invalid-name)
C:173,12: Variable name "lowProj" doesn't conform to snake_case naming style (invalid-name)
C:174,12: Variable name "highProj" doesn't conform to snake_case naming style (invalid-name)
C:176, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:320, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:323, 8: Variable name "basinPlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:324, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:327, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:329, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:331, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:340, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:345, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:346, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 37, 0: Too many branches (43/12) (too-many-branches)
R: 37, 0: Too many statements (160/50) (too-many-statements)
C:415, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:416, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:432,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:452,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import csv" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 21, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module SiteContour_SMS
C: 42, 0: Trailing whitespace (trailing-whitespace)
C: 43, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x) for
                            ^ (bad-whitespace)
C: 43, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x) for
                               ^ (bad-whitespace)
C: 44, 0: Trailing whitespace (trailing-whitespace)
C: 46, 0: Exactly one space required around assignment
    cscale=[[0.0, 'rgb(165,0,38)'], [0.1111111111111111, 'rgb(215,48,39)'],
          ^ (bad-whitespace)
C: 47, 0: Wrong continued indentation (remove 1 space).
             [0.2222222222222222, 'rgb(244,109,67)'],
            |^ (bad-continuation)
C: 48, 0: Wrong continued indentation (remove 1 space).
             [0.3333333333333333, 'rgb(253,174,97)'],
            |^ (bad-continuation)
C: 49, 0: Wrong continued indentation (remove 1 space).
             [0.4444444444444444, 'rgb(254,224,144)'],
            |^ (bad-continuation)
C: 50, 0: Wrong continued indentation (remove 1 space).
             [0.5555555555555556, 'rgb(224,243,248)'],
            |^ (bad-continuation)
C: 51, 0: Wrong continued indentation (remove 1 space).
             [0.6666666666666666, 'rgb(171,217,233)'],
            |^ (bad-continuation)
C: 52, 0: Wrong continued indentation (remove 1 space).
             [0.7777777777777778, 'rgb(116,173,209)'],
            |^ (bad-continuation)
C: 53, 0: Wrong continued indentation (remove 1 space).
             [0.8888888888888888, 'rgb(69,117,180)'], [1.0, 'rgb(49,54,149)']]
            |^ (bad-continuation)
C: 56, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Trailing whitespace (trailing-whitespace)
C: 62, 0: Exactly one space required after comma
        elements = awdb.service.getStationElements(site['stationTriplet'],sDateWY,eDate)
                                                                         ^ (bad-whitespace)
C: 62, 0: Exactly one space required after comma
        elements = awdb.service.getStationElements(site['stationTriplet'],sDateWY,eDate)
                                                                                 ^ (bad-whitespace)
C: 68, 0: Trailing whitespace (trailing-whitespace)
C: 69, 0: Trailing whitespace (trailing-whitespace)
C: 83, 0: Exactly one space required after comma
                smsDepth = [float(min(y))+(0.5*float((y[-1]-y[-2]))),0]
                                                                    ^ (bad-whitespace)
C: 85, 0: Trailing whitespace (trailing-whitespace)
C: 85, 0: Exactly one space required after comma
                smsDepth = [float(min(y))*1.5,0]                
                                             ^ (bad-whitespace)
C: 91, 0: Exactly one space required after comma
                        sDate = date(dt.strptime(validSite['beginDate'],"%Y-%m-%d %H:%M:%S").year,
                                                                       ^ (bad-whitespace)
C: 92, 0: Trailing whitespace (trailing-whitespace)
C: 93, 0: Trailing whitespace (trailing-whitespace)
C: 93, 0: Exactly one space required after comma
                        url = '/'.join([dataUrl,'DAILY', sensor, 
                                               ^ (bad-whitespace)
C: 94, 0: Exactly one space required after comma
                                        triplet.replace(':','_') + '.json'])
                                                           ^ (bad-whitespace)
C: 98, 0: Trailing whitespace (trailing-whitespace)
C:100, 0: Exactly one space required after comma
                            sDate = date(dt.strptime(data[0]['beginDate'],"%Y-%m-%d %H:%M:%S").year,
                                                                         ^ (bad-whitespace)
C:102, 0: Trailing whitespace (trailing-whitespace)
C:102, 0: Exactly one space required after comma
                            date_series = [dt.strptime(sDate,"%Y-%m-%d") + 
                                                            ^ (bad-whitespace)
C:103, 0: Trailing whitespace (trailing-whitespace)
C:104, 0: Exactly one space required after comma
                                           x in range(0, (dt.strptime(eDate,"%Y-%m-%d")-
                                                                           ^ (bad-whitespace)
C:105, 0: Exactly one space required after comma
                                                          dt.strptime(sDate,"%Y-%m-%d")).days+1)]
                                                                           ^ (bad-whitespace)
C:106, 0: Exactly one space required before assignment
                            sliderDates= list(chain([(date_series[0])] + [date_series[-1]]))
                                       ^ (bad-whitespace)
C:108, 0: Exactly one space required before assignment
                                currDates= list(chain([date_series[-365]] + [date_series[-1]]))
                                         ^ (bad-whitespace)
C:110, 0: Exactly one space required before assignment
                                currDates= list(chain([date_series[0]] + [date_series[-1]]))
                                         ^ (bad-whitespace)
C:111, 0: Exactly one space required after comma
                            if hasattr(data[0],r'values'):
                                              ^ (bad-whitespace)
C:112, 0: Exactly one space required after comma
                                sat = getSaturation(i,validSite['stationTriplet'])
                                                     ^ (bad-whitespace)
C:114, 0: Trailing whitespace (trailing-whitespace)
C:117, 0: Wrong continued indentation (add 7 spaces).
                                        in plotData]
                                        ^      | (bad-continuation)
C:124, 0: Trailing whitespace (trailing-whitespace)
C:124, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'DAILY', 'PREC', 
                                   ^ (bad-whitespace)
C:125, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C:134, 0: Trailing whitespace (trailing-whitespace)
C:134, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'DAILY', 'WTEQ', 
                                   ^ (bad-whitespace)
C:135, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
                    barPrec = go.Bar(x=date_series,y=precDelta,yaxis='y2',
                                                  ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
                    barPrec = go.Bar(x=date_series,y=precDelta,yaxis='y2',
                                                              ^ (bad-whitespace)
C:156, 0: Trailing whitespace (trailing-whitespace)
C:156, 0: Exactly one space required after comma
                sweDeltaNeg = [round(-1*c,1) if 
                                         ^ (bad-whitespace)
C:159, 0: Exactly one space required after comma
                barSWE = go.Bar(x=date_series,y=sweDeltaNeg,yaxis='y2',
                                             ^ (bad-whitespace)
C:159, 0: Exactly one space required after comma
                barSWE = go.Bar(x=date_series,y=sweDeltaNeg,yaxis='y2',
                                                           ^ (bad-whitespace)
C:162, 0: Trailing whitespace (trailing-whitespace)
C:164, 0: Exactly one space required after comma
                trace = go.Heatmap(z=SMSPlotData,x=date_series,y=depthVals,
                                                ^ (bad-whitespace)
C:164, 0: Exactly one space required after comma
                trace = go.Heatmap(z=SMSPlotData,x=date_series,y=depthVals,
                                                              ^ (bad-whitespace)
C:165, 0: Exactly one space required after comma
                                   connectgaps=True,zsmooth='best',
                                                   ^ (bad-whitespace)
C:167, 0: Exactly one space required after comma
                                                 titleside='right',x=1.125),
                                                                  ^ (bad-whitespace)
C:168, 0: Wrong continued indentation (remove 14 spaces).
                                                 colorscale=cscale,
                                   |             ^ (bad-continuation)
C:169, 0: Wrong continued indentation (remove 14 spaces).
                                                 hoverinfo='none')
                                   |             ^ (bad-continuation)
C:171, 0: Trailing whitespace (trailing-whitespace)
C:172, 0: Exactly one space required after comma
                           str(int(round(validSite['elevation'],0))) +
                                                               ^ (bad-whitespace)
C:173, 0: Exactly one space required after comma
                           r', Lat = ' + str(round(validSite['latitude'],3)) +
                                                                        ^ (bad-whitespace)
C:174, 0: Exactly one space required after comma
                           r', Long = ' + str(round(validSite['longitude'],3)))
                                                                          ^ (bad-whitespace)
C:175, 0: Trailing whitespace (trailing-whitespace)
C:177, 0: Wrong hanging indentation (remove 4 spaces).
                    images= [dict(
                |   ^ (bad-continuation)
C:177, 0: No space allowed after keyword argument assignment
                    images= [dict(
                          ^ (bad-whitespace)
C:178, 0: Line too long (199/100) (line-too-long)
C:178, 0: No space allowed after keyword argument assignment
                        source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                              ^ (bad-whitespace)
C:181, 0: No space allowed after keyword argument assignment
                        x= 0,
                         ^ (bad-whitespace)
C:182, 0: No space allowed after keyword argument assignment
                        y= 0.9,
                         ^ (bad-whitespace)
C:184, 0: No space allowed after keyword argument assignment
                        sizex= 0.4,
                             ^ (bad-whitespace)
C:185, 0: No space allowed after keyword argument assignment
                        sizey= 0.1,
                             ^ (bad-whitespace)
C:186, 0: No space allowed after keyword argument assignment
                        opacity= 0.75,
                               ^ (bad-whitespace)
C:187, 0: No space allowed after keyword argument assignment
                        layer= "above"
                             ^ (bad-whitespace)
C:189, 0: Wrong hanging indentation (remove 4 spaces).
                    annotations=[dict(
                |   ^ (bad-continuation)
C:192, 0: Trailing whitespace (trailing-whitespace)
C:192, 0: Exactly one space required after comma
                        x=0,y=-0.31, 
                           ^ (bad-whitespace)
C:193, 0: Exactly one space required after comma
                        yref='paper',xref='paper',
                                    ^ (bad-whitespace)
C:196, 0: Trailing whitespace (trailing-whitespace)
C:197, 0: No space allowed around keyword argument assignment
                showlegend = True,
                           ^ (bad-whitespace)
C:198, 0: Exactly one space required after comma
                legend=dict(orientation="h",x=0.5,y=1.1),
                                           ^ (bad-whitespace)
C:198, 0: Exactly one space required after comma
                legend=dict(orientation="h",x=0.5,y=1.1),
                                                 ^ (bad-whitespace)
C:202, 0: Exactly one space required after comma
                yaxis=dict(title=r'Soil Depth (in.)',range=smsDepth,
                                                    ^ (bad-whitespace)
C:205, 0: Wrong hanging indentation (remove 4 spaces).
                        title=r'Daily Incremental Precip./Snow Melt (in.)',
                    |   ^ (bad-continuation)
C:206, 0: Wrong hanging indentation (remove 4 spaces).
                        overlaying='y',
                    |   ^ (bad-continuation)
C:207, 0: Wrong hanging indentation (remove 4 spaces).
                        side='right',
                    |   ^ (bad-continuation)
C:208, 0: Wrong hanging indentation (remove 4 spaces).
                        anchor='free',
                    |   ^ (bad-continuation)
C:209, 0: Wrong hanging indentation (remove 4 spaces).
                        position=1,
                    |   ^ (bad-continuation)
C:210, 0: Wrong hanging indentation (remove 4 spaces).
                        range=maxPrecRng,
                    |   ^ (bad-continuation)
C:211, 0: Wrong hanging indentation (remove 4 spaces).
                        tickformat="0f",
                    |   ^ (bad-continuation)
C:212, 0: Wrong hanging indentation (remove 4 spaces).
                        hoverformat='.1f',),
                    |   ^ (bad-continuation)
C:236, 0: Exactly one space required after comma
                    rangeslider=dict(thickness=0.1,range=sliderDates),
                                                  ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:250, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                      ^ (bad-whitespace)
C:250, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                             ^ (bad-whitespace)
C:253, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                               ^ (bad-whitespace)
C:256, 0: Trailing whitespace (trailing-whitespace)
C:257, 0: Trailing whitespace (trailing-whitespace)
C:258, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[1] in state and 
            ^      | (bad-continuation)
C:258, 0: Trailing whitespace (trailing-whitespace)
C:259, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[2] in networks]
            ^      | (bad-continuation)
C:260, 0: Trailing whitespace (trailing-whitespace)
C:262, 0: Trailing whitespace (trailing-whitespace)
C:265, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'siteCharts','Contour', sensor, state)
                                                        ^ (bad-whitespace)
C:272, 0: Line too long (270/100) (line-too-long)
C:279, 0: Final newline missing (missing-final-newline)
C:  1, 0: Module name "SiteContour_SMS" doesn't conform to snake_case naming style (invalid-name)
C: 22, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 23, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 29, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 30, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 31, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 34, 4: Redefining name 'siteName' from outer scope (line 264) (redefined-outer-name)
W: 36, 4: Redefining name 'meta' from outer scope (line 255) (redefined-outer-name)
W: 38, 4: Redefining name 'state' from outer scope (line 251) (redefined-outer-name)
W: 39, 4: Redefining name 'sensor' from outer scope (line 252) (redefined-outer-name)
W: 61, 8: Redefining name 'site' from outer scope (line 261) (redefined-outer-name)
W: 89,20: Redefining name 'data' from outer scope (line 254) (redefined-outer-name)
W: 93,24: Redefining name 'url' from outer scope (line 253) (redefined-outer-name)
C: 33, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 33, 0: Missing function docstring (missing-docstring)
R: 33, 0: Too many local variables (50/15) (too-many-locals)
C: 34, 4: Variable name "siteName" doesn't conform to snake_case naming style (invalid-name)
C: 37, 4: Variable name "siteTriplet" doesn't conform to snake_case naming style (invalid-name)
C: 54, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 56, 8: Variable name "sDateWY" doesn't conform to snake_case naming style (invalid-name)
C: 58, 8: Variable name "sDateWY" doesn't conform to snake_case naming style (invalid-name)
E: 62,19: Undefined variable 'awdb' (undefined-variable)
C: 63, 8: Variable name "siteDepths" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "SMSPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 71,12: Variable name "validSite" doesn't conform to snake_case naming style (invalid-name)
C: 73,12: Variable name "barPrec" doesn't conform to snake_case naming style (invalid-name)
C: 74,12: Variable name "barSWE" doesn't conform to snake_case naming style (invalid-name)
C: 75,12: Variable name "depthVals" doesn't conform to snake_case naming style (invalid-name)
C: 76,12: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 77,12: Variable name "SMSPlotData" doesn't conform to snake_case naming style (invalid-name)
C: 79,12: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
C: 83,16: Variable name "smsDepth" doesn't conform to snake_case naming style (invalid-name)
C: 85,16: Variable name "smsDepth" doesn't conform to snake_case naming style (invalid-name)
C: 91,24: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 95,53: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 96,28: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:100,28: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C:106,28: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:108,32: Variable name "currDates" doesn't conform to snake_case naming style (invalid-name)
C:110,32: Variable name "currDates" doesn't conform to snake_case naming style (invalid-name)
C:113,32: Variable name "siteDepthData" doesn't conform to snake_case naming style (invalid-name)
C:114,32: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:123,12: Variable name "dataPrec" doesn't conform to snake_case naming style (invalid-name)
R: 70, 4: Too many nested blocks (8/5) (too-many-nested-blocks)
W:130,12: No exception type(s) specified (bare-except)
C:127,45: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:128,20: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:131,16: Variable name "dataPrec" doesn't conform to snake_case naming style (invalid-name)
C:133,12: Variable name "dataSWE" doesn't conform to snake_case naming style (invalid-name)
W:140,12: No exception type(s) specified (bare-except)
C:137,45: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:138,20: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C:141,16: Variable name "dataSWE" doesn't conform to snake_case naming style (invalid-name)
C:142,12: Variable name "maxPrecRng" doesn't conform to snake_case naming style (invalid-name)
C:144,16: Variable name "precValues" doesn't conform to snake_case naming style (invalid-name)
C:145,16: Variable name "precDelta" doesn't conform to snake_case naming style (invalid-name)
C:147,20: Variable name "maxPrecRng" doesn't conform to snake_case naming style (invalid-name)
C:149,20: Variable name "barPrec" doesn't conform to snake_case naming style (invalid-name)
C:154,16: Variable name "sweValues" doesn't conform to snake_case naming style (invalid-name)
C:155,16: Variable name "sweDelta" doesn't conform to snake_case naming style (invalid-name)
C:156,16: Variable name "sweDeltaNeg" doesn't conform to snake_case naming style (invalid-name)
C:159,16: Variable name "barSWE" doesn't conform to snake_case naming style (invalid-name)
C:170,12: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:241, 8: Variable name "figPlots" doesn't conform to snake_case naming style (invalid-name)
R: 33, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
R: 33, 0: Too many branches (26/12) (too-many-branches)
R: 33, 0: Too many statements (101/50) (too-many-statements)
C:249, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:250, 4: Constant name "networks" doesn't conform to UPPER_CASE naming style (invalid-name)
W:277,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module SitePOR_PREC
C: 48, 0: Trailing whitespace (trailing-whitespace)
C: 50, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 50, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 51, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 52, 0: Trailing whitespace (trailing-whitespace)
C: 54, 0: Trailing whitespace (trailing-whitespace)
C: 55, 0: Trailing whitespace (trailing-whitespace)
C: 55, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 56, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 62, 0: Trailing whitespace (trailing-whitespace)
C: 66, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 66, 0: Trailing whitespace (trailing-whitespace)
C: 67, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C: 68, 0: Trailing whitespace (trailing-whitespace)
C: 69, 0: Trailing whitespace (trailing-whitespace)
C: 81, 0: Trailing whitespace (trailing-whitespace)
C: 82, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Trailing whitespace (trailing-whitespace)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 87, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C: 88, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C: 95, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C: 95, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C: 96, 0: Trailing whitespace (trailing-whitespace)
C: 99, 0: Trailing whitespace (trailing-whitespace)
C:100, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(sitePlotData),366)])
                    ^   | (bad-continuation)
C:100, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                    ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                                      ^ (bad-whitespace)
C:104, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:105, 0: Trailing whitespace (trailing-whitespace)
C:113, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:114, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:115, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:116, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:117, 0: Trailing whitespace (trailing-whitespace)
C:118, 0: Wrong continued indentation (remove 5 spaces).
                                      [date_series[-1]]))
                                 |    ^ (bad-continuation)
C:126, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:127, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:127, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:128, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:129, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:129, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:130, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:133, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=i,
                    |   ^ (bad-continuation)
C:133, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:140, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:140, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:141, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:141, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:142, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:143, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:145, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:146, 0: Trailing whitespace (trailing-whitespace)
C:148, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:148, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:150, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:151, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:153, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:157, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:157, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:158, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:159, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:160, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:162, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:166, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:166, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:169, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:170, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:172, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:176, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:176, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:177, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:178, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:181, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:184, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:184, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:186, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:187, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:194, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=minData,
            |   ^ (bad-continuation)
C:194, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=minData,
                                         ^ (bad-whitespace)
C:195, 0: Exactly one space required after comma
                            name=r'Min',visible=True,
                                       ^ (bad-whitespace)
C:196, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:198, 0: Trailing whitespace (trailing-whitespace)
C:201, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:203, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:204, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:206, 0: Trailing whitespace (trailing-whitespace)
C:210, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:211, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:219, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:219, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:220, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:221, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:225, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=maxData,
            |   ^ (bad-continuation)
C:225, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=maxData,
                                         ^ (bad-whitespace)
C:226, 0: Exactly one space required after comma
                            name=r'Max',visible=True,
                                       ^ (bad-whitespace)
C:227, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:229, 0: Trailing whitespace (trailing-whitespace)
C:230, 0: Line too long (389/100) (line-too-long)
C:232, 0: Trailing whitespace (trailing-whitespace)
C:234, 0: Line too long (130/100) (line-too-long)
C:241, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:241, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
                                                            ^ (bad-whitespace)
C:243, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
        |   ^ (bad-continuation)
C:243, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
                                                       ^ (bad-whitespace)
C:246, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:247, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:247, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:247, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:250, 0: Trailing whitespace (trailing-whitespace)
C:257, 0: Trailing whitespace (trailing-whitespace)
C:260, 0: Trailing whitespace (trailing-whitespace)
C:261, 0: Trailing whitespace (trailing-whitespace)
C:263, 0: Trailing whitespace (trailing-whitespace)
C:265, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:265, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:266, 0: Line too long (191/100) (line-too-long)
C:266, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:269, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:270, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:272, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:273, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:274, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:275, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:277, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:280, 0: Trailing whitespace (trailing-whitespace)
C:280, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:281, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:284, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:285, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:286, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:286, 0: Trailing whitespace (trailing-whitespace)
C:286, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:287, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:287, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:288, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:289, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:290, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:290, 0: Trailing whitespace (trailing-whitespace)
C:291, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:292, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:293, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:296, 0: Exactly one space required after comma
        yaxis=dict(title=r'Precipitation (in.)',hoverformat='.1f',
                                               ^ (bad-whitespace)
C:303, 0: Wrong hanging indentation (remove 8 spaces).
                            dict(count=9,
                    |       ^ (bad-continuation)
C:307, 0: Wrong hanging indentation (remove 8 spaces).
                            dict(count=6,
                    |       ^ (bad-continuation)
C:311, 0: Wrong hanging indentation (remove 8 spaces).
                            dict(count=3,
                    |       ^ (bad-continuation)
C:315, 0: Wrong hanging indentation (remove 8 spaces).
                            dict(label='WY', step='all')
                    |       ^ (bad-continuation)
C:316, 0: Wrong hanging indentation.
                        ])
                |   |   ^ (bad-continuation)
C:321, 0: Trailing whitespace (trailing-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:327, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                      ^ (bad-whitespace)
C:327, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                             ^ (bad-whitespace)
C:330, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                               ^ (bad-whitespace)
C:333, 0: Trailing whitespace (trailing-whitespace)
C:334, 0: Trailing whitespace (trailing-whitespace)
C:335, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[1] in state and 
            ^      | (bad-continuation)
C:335, 0: Trailing whitespace (trailing-whitespace)
C:336, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[2] in networks]
            ^      | (bad-continuation)
C:337, 0: Trailing whitespace (trailing-whitespace)
C:339, 0: Trailing whitespace (trailing-whitespace)
C:343, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'siteCharts','POR', sensor, state)
                                                        ^ (bad-whitespace)
C:347, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(site_triplet,siteName))
                                                      ^ (bad-whitespace)
C:350, 0: Line too long (270/100) (line-too-long)
C:358, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "SitePOR_PREC" doesn't conform to snake_case naming style (invalid-name)
C: 23, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 27, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 28, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 29, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 31,14: Redefining name 'site_triplet' from outer scope (line 341) (redefined-outer-name)
W: 31,28: Redefining name 'siteName' from outer scope (line 342) (redefined-outer-name)
W: 49, 4: Redefining name 'sensor' from outer scope (line 329) (redefined-outer-name)
W: 55,12: Redefining name 'url' from outer scope (line 330) (redefined-outer-name)
W: 85, 4: Redefining name 'data' from outer scope (line 331) (redefined-outer-name)
C: 31, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 31, 0: Argument name "siteName" doesn't conform to snake_case naming style (invalid-name)
C: 31, 0: Missing function docstring (missing-docstring)
R: 31, 0: Too many local variables (45/15) (too-many-locals)
C: 33, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 34, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 35, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 36, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 37, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 38, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 40, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 53, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 57,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 58,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 61, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 62, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 63, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 64, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 70, 4: Variable name "siteBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 72, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 75,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 78,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 80,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 82, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 83, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 89,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 90,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 93, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C: 97, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 99, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:102, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:104, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:110,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:111,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:112,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:113,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:114,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:115,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:116,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:117, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:120, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:122, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:199, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:208,11: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:230, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:232, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:233, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:234, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:236, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:238, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:240, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:242, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:251, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:256, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:257, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 31, 0: Too many branches (34/12) (too-many-branches)
R: 31, 0: Too many statements (117/50) (too-many-statements)
C:326, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:327, 4: Constant name "networks" doesn't conform to UPPER_CASE naming style (invalid-name)
W:355,12: No exception type(s) specified (bare-except)
C: 16, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 17, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module SitePOR_SMS
C: 20, 0: Line too long (124/100) (line-too-long)
C: 51, 0: Trailing whitespace (trailing-whitespace)
C: 53, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 53, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 54, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 55, 0: Trailing whitespace (trailing-whitespace)
C: 60, 0: Wrong hanging indentation (remove 4 spaces).
                    {str(site_triplet) : 
                |   ^ (bad-continuation)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 61, 0: Wrong hanging indentation in dict value.
                        dt.strptime(str(siteMeta['beginDate']),
                     |  ^| (bad-continuation)
C: 64, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 75, 0: Trailing whitespace (trailing-whitespace)
C: 79, 0: Trailing whitespace (trailing-whitespace)
C: 79, 0: Exactly one space required after comma
        sensorDepths = [-8,-20]#[-2,-4,-8,-20,-40]     #     
                          ^ (bad-whitespace)
C: 83, 0: Trailing whitespace (trailing-whitespace)
C: 83, 0: Exactly one space required after comma
                url = '/'.join([dataUrl,'DAILY', sensor, 
                                       ^ (bad-whitespace)
C: 84, 0: Exactly one space required after comma
                                triplet.replace(':','_') + '.json'])
                                                   ^ (bad-whitespace)
C: 91, 0: Exactly one space required after comma
                if hasattr(dataSite,r'values'):
                                   ^ (bad-whitespace)
C: 94, 0: Wrong hanging indentation (remove 4 spaces).
                                sensorDepth,
                            |   ^ (bad-continuation)
C: 95, 0: Wrong hanging indentation (remove 4 spaces).
                                str(dataSite['stationTriplet']))
                            |   ^ (bad-continuation)
C: 97, 0: Exactly one space required after comma
                        padMissingData(dataSite,sDate,eDate)
                                               ^ (bad-whitespace)
C: 97, 0: Exactly one space required after comma
                        padMissingData(dataSite,sDate,eDate)
                                                     ^ (bad-whitespace)
C: 99, 0: Trailing whitespace (trailing-whitespace)
C:100, 0: Wrong continued indentation (add 7 spaces).
                                100*(c/float(sat)) for c in siteData]
                                ^      | (bad-continuation)
C:102, 0: Wrong hanging indentation (remove 4 spaces).
                            {str(dataSite['stationTriplet']) : 
                        |   ^ (bad-continuation)
C:102, 0: Trailing whitespace (trailing-whitespace)
C:103, 0: Wrong hanging indentation in dict value.
                                list(siteData)})               
                             |  ^| (bad-continuation)
C:103, 0: Trailing whitespace (trailing-whitespace)
C:107, 0: Trailing whitespace (trailing-whitespace)
C:112, 0: Trailing whitespace (trailing-whitespace)
C:113, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Wrong hanging indentation (remove 4 spaces).
                    {siteID : fillMissingData(plotData[siteID],30)})
                |   ^ (bad-continuation)
C:115, 0: Exactly one space required after comma
                    {siteID : fillMissingData(plotData[siteID],30)})
                                                              ^ (bad-whitespace)
C:117, 0: Trailing whitespace (trailing-whitespace)
C:120, 0: Trailing whitespace (trailing-whitespace)
C:121, 0: Wrong continued indentation (add 4 spaces).
                        for i in range(0,len(sitePlotData),366)])
                        ^   | (bad-continuation)
C:121, 0: Exactly one space required after comma
                        for i in range(0,len(sitePlotData),366)])
                                        ^ (bad-whitespace)
C:121, 0: Exactly one space required after comma
                        for i in range(0,len(sitePlotData),366)])
                                                          ^ (bad-whitespace)
C:122, 0: Trailing whitespace (trailing-whitespace)
C:125, 0: Exactly one space required after comma
        statsData = list(map(list,zip(*allButCurrWY)))
                                 ^ (bad-whitespace)
C:126, 0: Trailing whitespace (trailing-whitespace)
C:134, 0: Exactly one space required after comma
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                                                ^ (bad-whitespace)
C:135, 0: Exactly one space required after comma
                highestData = [np.nanpercentile(a,90) for a in statsData]
                                                 ^ (bad-whitespace)
C:136, 0: Exactly one space required after comma
                lowData = [np.nanpercentile(a,30) for a in statsData]
                                             ^ (bad-whitespace)
C:137, 0: Exactly one space required after comma
                highData = [np.nanpercentile(a,70) for a in statsData]
                                              ^ (bad-whitespace)
C:139, 0: Trailing whitespace (trailing-whitespace)
C:141, 0: Trailing whitespace (trailing-whitespace)
C:142, 0: Wrong continued indentation (remove 1 space).
                                      [date_series[len(PORplotData[-1])+
                                     |^ (bad-continuation)
C:145, 0: Trailing whitespace (trailing-whitespace)
C:146, 0: Wrong continued indentation (remove 1 space).
                                      [date_series[-1]]))
                                     |^ (bad-continuation)
C:147, 0: Trailing whitespace (trailing-whitespace)
C:152, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(
                        |   ^ (bad-continuation)
C:153, 0: Wrong hanging indentation (remove 4 spaces).
                                    x=date_series,y=i,
                                |   ^ (bad-continuation)
C:153, 0: Exactly one space required after comma
                                    x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:154, 0: Wrong hanging indentation (remove 4 spaces).
                                    name=str(sYear + index + 1),
                                |   ^ (bad-continuation)
C:155, 0: Wrong hanging indentation (remove 4 spaces).
                                    visible=True,connectgaps=True,
                                |   ^ (bad-continuation)
C:155, 0: Exactly one space required after comma
                                    visible=True,connectgaps=True,
                                                ^ (bad-whitespace)
C:156, 0: Wrong hanging indentation (remove 4 spaces).
                                    line=dict(color='rgb(0,0,0)'))])
                                |   ^ (bad-continuation)
C:159, 0: Wrong hanging indentation (remove 4 spaces).
                            [go.Scatter(x=date_series,y=i,
                        |   ^ (bad-continuation)
C:159, 0: Exactly one space required after comma
                            [go.Scatter(x=date_series,y=i,
                                                     ^ (bad-whitespace)
C:166, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=minData
                    |   ^ (bad-continuation)
C:166, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=minData
                                                 ^ (bad-whitespace)
C:167, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                    ^ (bad-whitespace)
C:167, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Min',
                                                           ^ (bad-whitespace)
C:168, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:171, 0: Exactly one space required after comma
                                    fill='none',showlegend=False,
                                               ^ (bad-whitespace)
C:172, 0: Trailing whitespace (trailing-whitespace)
C:172, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])       
                                                    ^ (bad-whitespace)
C:174, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowestData
                    |   ^ (bad-continuation)
C:174, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowestData
                                                 ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                    ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'10%',
                                                           ^ (bad-whitespace)
C:176, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:180, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:183, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=lowData,
                    |   ^ (bad-continuation)
C:183, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=lowData,
                                                 ^ (bad-whitespace)
C:184, 0: Exactly one space required after comma
                                    legendgroup='centiles',name=r'30%',
                                                          ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:188, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:192, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highData,
                    |   ^ (bad-continuation)
C:192, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highData,
                                                 ^ (bad-whitespace)
C:195, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:198, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=True,
                                                  ^ (bad-whitespace)
C:199, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:202, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=highestData,
                    |   ^ (bad-continuation)
C:202, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=highestData,
                                                 ^ (bad-whitespace)
C:204, 0: Exactly one space required after comma
                                    name=r'90%',visible=True
                                               ^ (bad-whitespace)
C:205, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                    ^ (bad-whitespace)
C:205, 0: Exactly one space required after comma
                                    ,mode='line',line=dict(width=0),
                                                ^ (bad-whitespace)
C:207, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:208, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:210, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=maxData
                    |   ^ (bad-continuation)
C:210, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=maxData
                                                 ^ (bad-whitespace)
C:211, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                    ^ (bad-whitespace)
C:211, 0: Exactly one space required after comma
                                    ,legendgroup='centiles',name=r'Max',
                                                           ^ (bad-whitespace)
C:212, 0: Exactly one space required after comma
                                    visible=True,mode='line',
                                                ^ (bad-whitespace)
C:215, 0: Exactly one space required after comma
                                    fill='tonexty',showlegend=False,
                                                  ^ (bad-whitespace)
C:216, 0: Exactly one space required after comma
                                    hoverinfo='none',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:220, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData,
                |   ^ (bad-continuation)
C:220, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData,
                                             ^ (bad-whitespace)
C:221, 0: Exactly one space required after comma
                                name=r'Min',visible=True,
                                           ^ (bad-whitespace)
C:222, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:224, 0: Trailing whitespace (trailing-whitespace)
C:227, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:227, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:228, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:233, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData,
                |   ^ (bad-continuation)
C:233, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData,
                                             ^ (bad-whitespace)
C:234, 0: Exactly one space required after comma
                                name=r'Max',visible=True,
                                           ^ (bad-whitespace)
C:235, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:237, 0: Trailing whitespace (trailing-whitespace)
C:238, 0: Line too long (320/100) (line-too-long)
C:239, 0: Trailing whitespace (trailing-whitespace)
C:241, 0: Wrong hanging indentation (remove 4 spaces).
                images= [dict(
            |   ^ (bad-continuation)
C:241, 0: No space allowed after keyword argument assignment
                images= [dict(
                      ^ (bad-whitespace)
C:242, 0: Line too long (195/100) (line-too-long)
C:242, 0: No space allowed after keyword argument assignment
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                          ^ (bad-whitespace)
C:245, 0: No space allowed after keyword argument assignment
                    x= 0,
                     ^ (bad-whitespace)
C:246, 0: No space allowed after keyword argument assignment
                    y= 0.9,
                     ^ (bad-whitespace)
C:248, 0: No space allowed after keyword argument assignment
                    sizex= 0.4,
                         ^ (bad-whitespace)
C:249, 0: No space allowed after keyword argument assignment
                    sizey= 0.1,
                         ^ (bad-whitespace)
C:250, 0: No space allowed after keyword argument assignment
                    opacity= 0.5,
                           ^ (bad-whitespace)
C:251, 0: No space allowed after keyword argument assignment
                    layer= "above"
                         ^ (bad-whitespace)
C:253, 0: Wrong hanging indentation (remove 4 spaces).
                annotations=[dict(
            |   ^ (bad-continuation)
C:256, 0: Trailing whitespace (trailing-whitespace)
C:256, 0: Exactly one space required after comma
                    x=0,y=-0.41, 
                       ^ (bad-whitespace)
C:257, 0: Exactly one space required after comma
                    yref='paper',xref='paper',
                                ^ (bad-whitespace)
C:259, 0: Trailing whitespace (trailing-whitespace)
C:260, 0: Exactly one space required after comma
            legend=dict(traceorder='reversed',tracegroupgap=1,
                                             ^ (bad-whitespace)
C:261, 0: Exactly one space required after comma
                        bordercolor='#E2E2E2',borderwidth=2),
                                             ^ (bad-whitespace)
C:262, 0: No space allowed around keyword argument assignment
            showlegend = True,
                       ^ (bad-whitespace)
C:265, 0: Exactly one space required after comma
            yaxis=dict(title=r'Percent Saturation (%)',hoverformat='.1f',
                                                      ^ (bad-whitespace)
C:271, 0: Wrong hanging indentation (remove 12 spaces).
                                buttons=list([
                    |           ^ (bad-continuation)
C:272, 0: Wrong hanging indentation (add 4 spaces).
                                dict(count=9,
                                ^   | (bad-continuation)
C:276, 0: Wrong hanging indentation (add 4 spaces).
                                dict(count=6,
                                ^   | (bad-continuation)
C:280, 0: Wrong hanging indentation (add 4 spaces).
                                dict(count=3,
                                ^   | (bad-continuation)
C:284, 0: Wrong hanging indentation (add 4 spaces).
                                dict(label='WY', step='all')
                                ^   | (bad-continuation)
C:285, 0: Wrong hanging indentation.
                            ])
                            ^   |   | (bad-continuation)
C:290, 0: Trailing whitespace (trailing-whitespace)
C:292, 0: Wrong continued indentation (add 4 spaces).
            'layout': layout}
            ^   | (bad-continuation)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:296, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                      ^ (bad-whitespace)
C:296, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                             ^ (bad-whitespace)
C:299, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                               ^ (bad-whitespace)
C:302, 0: Trailing whitespace (trailing-whitespace)
C:303, 0: Trailing whitespace (trailing-whitespace)
C:304, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[1] in state and 
            ^      | (bad-continuation)
C:304, 0: Trailing whitespace (trailing-whitespace)
C:305, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[2] in networks]
            ^      | (bad-continuation)
C:306, 0: Trailing whitespace (trailing-whitespace)
C:308, 0: Trailing whitespace (trailing-whitespace)
C:312, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'siteCharts','POR', sensor, state)
                                                        ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(site_triplet,siteName))
                                                      ^ (bad-whitespace)
C:319, 0: Line too long (270/100) (line-too-long)
C:  1, 0: Module name "SitePOR_SMS" doesn't conform to snake_case naming style (invalid-name)
C: 23, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 30, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 31, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 32, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 34,14: Redefining name 'site_triplet' from outer scope (line 311) (redefined-outer-name)
W: 34,28: Redefining name 'siteName' from outer scope (line 310) (redefined-outer-name)
W: 52, 4: Redefining name 'sensor' from outer scope (line 298) (redefined-outer-name)
W: 81,12: Redefining name 'data' from outer scope (line 300) (redefined-outer-name)
W: 83,16: Redefining name 'url' from outer scope (line 299) (redefined-outer-name)
C: 34, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 34, 0: Argument name "siteName" doesn't conform to snake_case naming style (invalid-name)
C: 34, 0: Missing function docstring (missing-docstring)
R: 34, 0: Too many local variables (45/15) (too-many-locals)
C: 36, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 37, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 38, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 40, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 57, 8: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 58,12: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 63, 8: Variable name "siteBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 65, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 68,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 71,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 73,20: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 75, 8: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 76, 8: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 78, 8: Variable name "dataDict" doesn't conform to snake_case naming style (invalid-name)
C: 79, 8: Variable name "sensorDepths" doesn't conform to snake_case naming style (invalid-name)
C: 80,12: Variable name "sensorDepth" doesn't conform to snake_case naming style (invalid-name)
C: 85,45: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 86,20: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 88,12: Variable name "depthData" doesn't conform to snake_case naming style (invalid-name)
C: 89,16: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C: 90,16: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C: 98,24: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:108, 8: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:110, 8: Variable name "plotData" doesn't conform to snake_case naming style (invalid-name)
C:113,12: Variable name "siteID" doesn't conform to snake_case naming style (invalid-name)
C:113,20: Variable name "smsValues" doesn't conform to snake_case naming style (invalid-name)
C:116, 8: Variable name "smsPlotData" doesn't conform to snake_case naming style (invalid-name)
C:118, 8: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C:120, 8: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:123, 8: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:125, 8: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:131,16: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:132,16: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:133,16: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:134,16: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:135,16: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:136,16: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:137,16: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:141,12: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:145,12: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:148,11: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:238, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
R: 34, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
W:113,20: Unused variable 'smsValues' (unused-variable)
R: 34, 0: Too many branches (27/12) (too-many-branches)
R: 34, 0: Too many statements (101/50) (too-many-statements)
C:295, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:296, 4: Constant name "networks" doesn't conform to UPPER_CASE naming style (invalid-name)
W:324,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module SitePOR_SWE
C: 53, 0: Trailing whitespace (trailing-whitespace)
C: 55, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 55, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 56, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Trailing whitespace (trailing-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 60, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 61, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 67, 0: Trailing whitespace (trailing-whitespace)
C: 71, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C: 73, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Trailing whitespace (trailing-whitespace)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 91, 0: Trailing whitespace (trailing-whitespace)
C: 92, 0: Trailing whitespace (trailing-whitespace)
C: 92, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C: 93, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C:101, 0: Trailing whitespace (trailing-whitespace)
C:104, 0: Trailing whitespace (trailing-whitespace)
C:105, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(sitePlotData),366)])
                    ^   | (bad-continuation)
C:105, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                    ^ (bad-whitespace)
C:105, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                                      ^ (bad-whitespace)
C:109, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:110, 0: Trailing whitespace (trailing-whitespace)
C:117, 0: Trailing whitespace (trailing-whitespace)
C:117, 0: Exactly one space required after comma
            meanData = [np.nanpercentile(a,50) for a in statsData]        
                                          ^ (bad-whitespace)
C:118, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:119, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:120, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:121, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:123, 0: Trailing whitespace (trailing-whitespace)
C:125, 0: Trailing whitespace (trailing-whitespace)
C:126, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[get_last_non_zero_index(
                                 |^ (bad-continuation)
C:127, 0: Wrong hanging indentation (remove 4 spaces).
                                          maxData[0:305]) + future_date_pad]]))
                                      |   ^ (bad-continuation)
C:129, 0: Trailing whitespace (trailing-whitespace)
C:130, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:136, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:137, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:137, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:138, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:139, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:139, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:140, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:143, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=i,
                    |   ^ (bad-continuation)
C:143, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:150, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:150, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:151, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:151, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:152, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:153, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:155, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:156, 0: Trailing whitespace (trailing-whitespace)
C:158, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:158, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:159, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:159, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:160, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:161, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:163, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:167, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:167, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:168, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:169, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:170, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:172, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:176, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:176, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:180, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:182, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:186, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:186, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:187, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:188, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:191, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:194, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:194, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:195, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:195, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:196, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:197, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:199, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:204, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=minData,
            |   ^ (bad-continuation)
C:204, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=minData,
                                         ^ (bad-whitespace)
C:205, 0: Exactly one space required after comma
                            name=r'Min',visible=True,
                                       ^ (bad-whitespace)
C:206, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:208, 0: Trailing whitespace (trailing-whitespace)
C:211, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:213, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:214, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:216, 0: Trailing whitespace (trailing-whitespace)
C:220, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:221, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:229, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:229, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:230, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:231, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:235, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=maxData,
            |   ^ (bad-continuation)
C:235, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=maxData,
                                         ^ (bad-whitespace)
C:236, 0: Exactly one space required after comma
                            name=r'Max',visible=True,
                                       ^ (bad-whitespace)
C:237, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:239, 0: Trailing whitespace (trailing-whitespace)
C:240, 0: Line too long (391/100) (line-too-long)
C:242, 0: Trailing whitespace (trailing-whitespace)
C:244, 0: Line too long (130/100) (line-too-long)
C:247, 0: Trailing whitespace (trailing-whitespace)
C:251, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:251, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
                                                            ^ (bad-whitespace)
C:253, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
        |   ^ (bad-continuation)
C:253, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
                                                       ^ (bad-whitespace)
C:256, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:257, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:257, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:257, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:260, 0: Trailing whitespace (trailing-whitespace)
C:267, 0: Trailing whitespace (trailing-whitespace)
C:270, 0: Trailing whitespace (trailing-whitespace)
C:271, 0: Trailing whitespace (trailing-whitespace)
C:273, 0: Trailing whitespace (trailing-whitespace)
C:275, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:275, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:276, 0: Line too long (191/100) (line-too-long)
C:276, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:279, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:280, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:282, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:283, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:284, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:285, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:287, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:290, 0: Trailing whitespace (trailing-whitespace)
C:290, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:291, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:294, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:295, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:296, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:296, 0: Trailing whitespace (trailing-whitespace)
C:296, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:297, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:297, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:298, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:299, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:300, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:300, 0: Trailing whitespace (trailing-whitespace)
C:301, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:302, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:303, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:306, 0: Exactly one space required after comma
        yaxis=dict(title=r'Snow Water Equivalent (in.)',hoverformat='.1f',
                                                       ^ (bad-whitespace)
C:331, 0: Trailing whitespace (trailing-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:337, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                      ^ (bad-whitespace)
C:337, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                             ^ (bad-whitespace)
C:340, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                               ^ (bad-whitespace)
C:343, 0: Trailing whitespace (trailing-whitespace)
C:344, 0: Trailing whitespace (trailing-whitespace)
C:345, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[1] in state and 
            ^      | (bad-continuation)
C:345, 0: Trailing whitespace (trailing-whitespace)
C:346, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[2] in networks]
            ^      | (bad-continuation)
C:347, 0: Trailing whitespace (trailing-whitespace)
C:349, 0: Trailing whitespace (trailing-whitespace)
C:353, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'siteCharts','POR', sensor, state)
                                                        ^ (bad-whitespace)
C:357, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(site_triplet,siteName))
                                                      ^ (bad-whitespace)
C:360, 0: Line too long (270/100) (line-too-long)
C:368, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "SitePOR_SWE" doesn't conform to snake_case naming style (invalid-name)
C: 25, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 26, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 32, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 33, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 36,14: Redefining name 'site_triplet' from outer scope (line 351) (redefined-outer-name)
W: 36,28: Redefining name 'siteName' from outer scope (line 352) (redefined-outer-name)
W: 54, 4: Redefining name 'sensor' from outer scope (line 339) (redefined-outer-name)
W: 60,12: Redefining name 'url' from outer scope (line 340) (redefined-outer-name)
W: 90, 4: Redefining name 'data' from outer scope (line 341) (redefined-outer-name)
C: 36, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Argument name "siteName" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Missing function docstring (missing-docstring)
R: 36, 0: Too many local variables (46/15) (too-many-locals)
C: 38, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 40, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 58, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 62,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 63,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 66, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 67, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 69, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 75, 4: Variable name "siteBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 77, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 80,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 83,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 85,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 87, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 88, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 94,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 95,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 98, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:102, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C:104, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:107, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:109, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:115,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:116,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:117,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:118,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:119,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:120,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:121,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:125, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:129, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:132, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:209, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:218,11: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:240, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:242, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:243, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:244, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:246, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:247, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:248, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:250, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:252, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:261, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:266, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:267, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 36, 0: Too many branches (35/12) (too-many-branches)
R: 36, 0: Too many statements (120/50) (too-many-statements)
C:336, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:337, 4: Constant name "networks" doesn't conform to UPPER_CASE naming style (invalid-name)
W:365,12: No exception type(s) specified (bare-except)
C: 18, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 21, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module SitePOR_TAVG
C: 51, 0: Trailing whitespace (trailing-whitespace)
C: 53, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 53, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 54, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 55, 0: Trailing whitespace (trailing-whitespace)
C: 56, 0: Trailing whitespace (trailing-whitespace)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 61, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 61, 0: Trailing whitespace (trailing-whitespace)
C: 62, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C: 63, 0: Trailing whitespace (trailing-whitespace)
C: 64, 0: Trailing whitespace (trailing-whitespace)
C: 76, 0: Trailing whitespace (trailing-whitespace)
C: 77, 0: Trailing whitespace (trailing-whitespace)
C: 81, 0: Trailing whitespace (trailing-whitespace)
C: 82, 0: Trailing whitespace (trailing-whitespace)
C: 82, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C: 83, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C: 90, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C: 90, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C: 91, 0: Trailing whitespace (trailing-whitespace)
C: 94, 0: Trailing whitespace (trailing-whitespace)
C: 95, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(sitePlotData),366)])
                    ^   | (bad-continuation)
C: 95, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                    ^ (bad-whitespace)
C: 95, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                                      ^ (bad-whitespace)
C: 99, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:100, 0: Trailing whitespace (trailing-whitespace)
C:107, 0: Exactly one space required after comma
            meanData = [np.nanpercentile(a,50) for a in statsData]
                                          ^ (bad-whitespace)
C:108, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:109, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:110, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:111, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:113, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Trailing whitespace (trailing-whitespace)
C:116, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[len(PORplotData[-1])+
                                 |^ (bad-continuation)
C:119, 0: Trailing whitespace (trailing-whitespace)
C:120, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:126, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:127, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:127, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:128, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:129, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:129, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:130, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:133, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(x=date_series,y=i,
                    |   ^ (bad-continuation)
C:133, 0: Exactly one space required after comma
                        [go.Scatter(x=date_series,y=i,
                                                 ^ (bad-whitespace)
C:140, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:140, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:141, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:141, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:142, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:143, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:145, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:146, 0: Trailing whitespace (trailing-whitespace)
C:148, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:148, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:149, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:150, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:151, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:153, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:157, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:157, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:158, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:159, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:160, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:162, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:166, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:166, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:169, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:170, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:172, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:176, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:176, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:177, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:178, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:181, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:184, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:184, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:185, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:186, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:187, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:194, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=minData,
            |   ^ (bad-continuation)
C:194, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=minData,
                                         ^ (bad-whitespace)
C:195, 0: Exactly one space required after comma
                            name=r'Min',visible=True,
                                       ^ (bad-whitespace)
C:196, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:198, 0: Trailing whitespace (trailing-whitespace)
C:201, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:203, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:204, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:206, 0: Trailing whitespace (trailing-whitespace)
C:210, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:211, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:219, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:219, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:220, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:221, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:225, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,y=maxData,
            |   ^ (bad-continuation)
C:225, 0: Exactly one space required after comma
                [go.Scatter(x=date_series,y=maxData,
                                         ^ (bad-whitespace)
C:226, 0: Exactly one space required after comma
                            name=r'Max',visible=True,
                                       ^ (bad-whitespace)
C:227, 0: Exactly one space required after comma
                            hoverinfo='none',connectgaps=True,
                                            ^ (bad-whitespace)
C:229, 0: Trailing whitespace (trailing-whitespace)
C:230, 0: Line too long (391/100) (line-too-long)
C:232, 0: Trailing whitespace (trailing-whitespace)
C:234, 0: Line too long (131/100) (line-too-long)
C:237, 0: Trailing whitespace (trailing-whitespace)
C:250, 0: Trailing whitespace (trailing-whitespace)
C:257, 0: Trailing whitespace (trailing-whitespace)
C:260, 0: Trailing whitespace (trailing-whitespace)
C:261, 0: Trailing whitespace (trailing-whitespace)
C:263, 0: Trailing whitespace (trailing-whitespace)
C:265, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:265, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:266, 0: Line too long (191/100) (line-too-long)
C:266, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:269, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:270, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:272, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:273, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:274, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:275, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:277, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:280, 0: Trailing whitespace (trailing-whitespace)
C:280, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:281, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:284, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:285, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:286, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:286, 0: Trailing whitespace (trailing-whitespace)
C:286, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:287, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:287, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:288, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:289, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:290, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:290, 0: Trailing whitespace (trailing-whitespace)
C:291, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:292, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:293, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:296, 0: Exactly one space required after comma
        yaxis=dict(title=r'Avg. Daily Temperature (&#176;F)',hoverformat='.1f',
                                                            ^ (bad-whitespace)
C:297, 0: Wrong continued indentation (remove 1 space).
                    tickformat="0f"),
                   |^ (bad-continuation)
C:321, 0: Trailing whitespace (trailing-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:326, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:327, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                      ^ (bad-whitespace)
C:327, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                             ^ (bad-whitespace)
C:330, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                               ^ (bad-whitespace)
C:333, 0: Trailing whitespace (trailing-whitespace)
C:334, 0: Trailing whitespace (trailing-whitespace)
C:335, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[1] in state and 
            ^      | (bad-continuation)
C:335, 0: Trailing whitespace (trailing-whitespace)
C:336, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[2] in networks]
            ^      | (bad-continuation)
C:337, 0: Trailing whitespace (trailing-whitespace)
C:339, 0: Trailing whitespace (trailing-whitespace)
C:343, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'siteCharts','POR', sensor, state)
                                                        ^ (bad-whitespace)
C:347, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(site_triplet,siteName))
                                                      ^ (bad-whitespace)
C:350, 0: Line too long (270/100) (line-too-long)
C:358, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "SitePOR_TAVG" doesn't conform to snake_case naming style (invalid-name)
C: 23, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 30, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 31, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 32, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 34,14: Redefining name 'site_triplet' from outer scope (line 341) (redefined-outer-name)
W: 34,28: Redefining name 'siteName' from outer scope (line 342) (redefined-outer-name)
W: 52, 4: Redefining name 'sensor' from outer scope (line 329) (redefined-outer-name)
W: 80, 4: Redefining name 'data' from outer scope (line 331) (redefined-outer-name)
W: 82, 8: Redefining name 'url' from outer scope (line 330) (redefined-outer-name)
C: 34, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 34, 0: Argument name "siteName" doesn't conform to snake_case naming style (invalid-name)
C: 34, 0: Missing function docstring (missing-docstring)
R: 34, 0: Too many local variables (37/15) (too-many-locals)
C: 36, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 37, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 38, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 40, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 56, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 58, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 59, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 65, 4: Variable name "siteBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 67, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 70,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 73,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 75,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 77, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 78, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 84,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 85,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 88, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C: 92, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 94, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 97, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C: 99, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:105,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:106,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:107,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:108,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:109,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:110,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:111,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:115, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:119, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:122, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:199, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:208,11: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:230, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:257, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 34, 0: Too many branches (26/12) (too-many-branches)
R: 34, 0: Too many statements (92/50) (too-many-statements)
C:326, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:327, 4: Constant name "networks" doesn't conform to UPPER_CASE naming style (invalid-name)
W:355,12: No exception type(s) specified (bare-except)
C: 17, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 18, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module SiteProjection_PREC
C: 53, 0: Trailing whitespace (trailing-whitespace)
C: 55, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 55, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 56, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Trailing whitespace (trailing-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 60, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 61, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 67, 0: Trailing whitespace (trailing-whitespace)
C: 71, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C: 73, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Trailing whitespace (trailing-whitespace)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 91, 0: Trailing whitespace (trailing-whitespace)
C: 92, 0: Trailing whitespace (trailing-whitespace)
C: 92, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C: 93, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C:101, 0: Trailing whitespace (trailing-whitespace)
C:104, 0: Trailing whitespace (trailing-whitespace)
C:105, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(sitePlotData),366)])
                    ^   | (bad-continuation)
C:105, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                    ^ (bad-whitespace)
C:105, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                                      ^ (bad-whitespace)
C:109, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:110, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Trailing whitespace (trailing-whitespace)
C:118, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:119, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:120, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:121, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:122, 0: Trailing whitespace (trailing-whitespace)
C:123, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:125, 0: Trailing whitespace (trailing-whitespace)
C:126, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:127, 0: Trailing whitespace (trailing-whitespace)
C:131, 0: Exactly one space required after comma
    projData = [createPRECProjTrace(a,jDay,lastValue,nanList) for
                                     ^ (bad-whitespace)
C:131, 0: Exactly one space required after comma
    projData = [createPRECProjTrace(a,jDay,lastValue,nanList) for
                                          ^ (bad-whitespace)
C:131, 0: Exactly one space required after comma
    projData = [createPRECProjTrace(a,jDay,lastValue,nanList) for
                                                    ^ (bad-whitespace)
C:133, 0: Exactly one space required after comma
    statsProj = list(map(list,zip(*projData)))
                             ^ (bad-whitespace)
C:140, 0: Exactly one space required after comma
            medianProj = [np.nanpercentile(a,50) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:141, 0: Exactly one space required after comma
            lowestProj = [np.nanpercentile(a,10) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:142, 0: Exactly one space required after comma
            highestProj = [np.nanpercentile(a,90) for a in cleanStatsProj]
                                             ^ (bad-whitespace)
C:143, 0: Exactly one space required after comma
            lowProj = [np.nanpercentile(a,30) for a in cleanStatsProj]
                                         ^ (bad-whitespace)
C:144, 0: Exactly one space required after comma
            highProj = [np.nanpercentile(a,70) for a in cleanStatsProj]
                                          ^ (bad-whitespace)
C:145, 0: Trailing whitespace (trailing-whitespace)
C:146, 0: Trailing whitespace (trailing-whitespace)
C:151, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:152, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:152, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:153, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:154, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:154, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:155, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:158, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:159, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,
                            |   ^ (bad-continuation)
C:160, 0: Wrong hanging indentation (remove 4 spaces).
                                y=projData[index],
                            |   ^ (bad-continuation)
C:161, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:162, 0: Wrong hanging indentation (remove 4 spaces).
                                visible='legendonly',connectgaps=True)])
                            |   ^ (bad-continuation)
C:162, 0: Exactly one space required after comma
                                visible='legendonly',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:166, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:167, 0: Wrong continued indentation (remove 1 space).
                                 y=minProj,
                                |^ (bad-continuation)
C:168, 0: Wrong continued indentation (remove 1 space).
                                 name=r'Min Proj',
                                |^ (bad-continuation)
C:169, 0: Wrong continued indentation (remove 1 space).
                                 visible=True,connectgaps=True,
                                |^ (bad-continuation)
C:169, 0: Exactly one space required after comma
                                 visible=True,connectgaps=True,
                                             ^ (bad-whitespace)
C:170, 0: Wrong continued indentation (remove 1 space).
                                 line=dict(color='rgba(237,0,0,0.4)'))])
                                |^ (bad-continuation)
C:173, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:176, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:180, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:183, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:187, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:189, 0: Exactly one space required after comma
                                name=r'50% Proj',connectgaps=True,
                                                ^ (bad-whitespace)
C:194, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:197, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:201, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:204, 0: Exactly one space required after comma
                                name=r'90% Proj',visible=True,
                                                ^ (bad-whitespace)
C:208, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:211, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:212, 0: Trailing whitespace (trailing-whitespace)
C:216, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:216, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:217, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:217, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:218, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:219, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:221, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:222, 0: Trailing whitespace (trailing-whitespace)
C:224, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:224, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:225, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:225, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:226, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:227, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:233, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:233, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:234, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:235, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:236, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:238, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:242, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:242, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:245, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:246, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:248, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:252, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:252, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:253, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:254, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:255, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:255, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:257, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:260, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:260, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:261, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:261, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:262, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:263, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:265, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:267, 0: Trailing whitespace (trailing-whitespace)
C:270, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:272, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:273, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:275, 0: Trailing whitespace (trailing-whitespace)
C:279, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:280, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:288, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:288, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:289, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:292, 0: Trailing whitespace (trailing-whitespace)
C:293, 0: Line too long (389/100) (line-too-long)
C:295, 0: Trailing whitespace (trailing-whitespace)
C:297, 0: Line too long (130/100) (line-too-long)
C:304, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:304, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
                                                            ^ (bad-whitespace)
C:306, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
        |   ^ (bad-continuation)
C:306, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
                                                       ^ (bad-whitespace)
C:309, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:310, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:310, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:310, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:313, 0: Trailing whitespace (trailing-whitespace)
C:320, 0: Trailing whitespace (trailing-whitespace)
C:323, 0: Trailing whitespace (trailing-whitespace)
C:324, 0: Trailing whitespace (trailing-whitespace)
C:326, 0: Trailing whitespace (trailing-whitespace)
C:328, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:328, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:329, 0: Line too long (191/100) (line-too-long)
C:329, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:332, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:333, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:335, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:336, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:337, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:338, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:340, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:343, 0: Trailing whitespace (trailing-whitespace)
C:343, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:344, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:347, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:348, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:349, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:349, 0: Trailing whitespace (trailing-whitespace)
C:349, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:350, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:350, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:351, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:352, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:353, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:353, 0: Trailing whitespace (trailing-whitespace)
C:354, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:355, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:356, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:359, 0: Exactly one space required after comma
        yaxis=dict(title=r'Precipitation (in.)',hoverformat='.1f',
                                               ^ (bad-whitespace)
C:384, 0: Trailing whitespace (trailing-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:389, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                      ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                             ^ (bad-whitespace)
C:393, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                               ^ (bad-whitespace)
C:396, 0: Trailing whitespace (trailing-whitespace)
C:397, 0: Trailing whitespace (trailing-whitespace)
C:398, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[1] in state and 
            ^      | (bad-continuation)
C:398, 0: Trailing whitespace (trailing-whitespace)
C:399, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[2] in networks]
            ^      | (bad-continuation)
C:400, 0: Trailing whitespace (trailing-whitespace)
C:402, 0: Trailing whitespace (trailing-whitespace)
C:406, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'siteCharts','Proj', sensor, state)
                                                        ^ (bad-whitespace)
C:410, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(site_triplet,siteName))
                                                      ^ (bad-whitespace)
C:413, 0: Line too long (270/100) (line-too-long)
C:421, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "SiteProjection_PREC" doesn't conform to snake_case naming style (invalid-name)
C: 25, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 26, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 32, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 33, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 36,14: Redefining name 'site_triplet' from outer scope (line 404) (redefined-outer-name)
W: 36,28: Redefining name 'siteName' from outer scope (line 405) (redefined-outer-name)
W: 54, 4: Redefining name 'sensor' from outer scope (line 392) (redefined-outer-name)
W: 60,12: Redefining name 'url' from outer scope (line 393) (redefined-outer-name)
W: 90, 4: Redefining name 'data' from outer scope (line 394) (redefined-outer-name)
C: 36, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Argument name "siteName" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Missing function docstring (missing-docstring)
R: 36, 0: Too many local variables (57/15) (too-many-locals)
C: 38, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 40, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 58, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 62,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 63,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 66, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 67, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 69, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 75, 4: Variable name "siteBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 77, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 80,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 83,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 85,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 87, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 88, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 94,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 95,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 98, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:102, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C:104, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:107, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:109, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:115,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:116,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:117,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:118,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:119,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:120,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:121,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:122, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:125, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:128, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:129, 4: Variable name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C:130, 4: Variable name "nanList" doesn't conform to snake_case naming style (invalid-name)
C:131, 4: Variable name "projData" doesn't conform to snake_case naming style (invalid-name)
C:133, 4: Variable name "statsProj" doesn't conform to snake_case naming style (invalid-name)
C:134, 4: Variable name "cleanStatsProj" doesn't conform to snake_case naming style (invalid-name)
C:138,12: Variable name "minProj" doesn't conform to snake_case naming style (invalid-name)
C:139,12: Variable name "maxProj" doesn't conform to snake_case naming style (invalid-name)
C:140,12: Variable name "medianProj" doesn't conform to snake_case naming style (invalid-name)
C:141,12: Variable name "lowestProj" doesn't conform to snake_case naming style (invalid-name)
C:142,12: Variable name "highestProj" doesn't conform to snake_case naming style (invalid-name)
C:143,12: Variable name "lowProj" doesn't conform to snake_case naming style (invalid-name)
C:144,12: Variable name "highProj" doesn't conform to snake_case naming style (invalid-name)
C:147, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:293, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:295, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:296, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:297, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:299, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:301, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:303, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:305, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:314, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:319, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:320, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 36, 0: Too many branches (41/12) (too-many-branches)
R: 36, 0: Too many statements (144/50) (too-many-statements)
C:389, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:390, 4: Constant name "networks" doesn't conform to UPPER_CASE naming style (invalid-name)
W:418,12: No exception type(s) specified (bare-except)
C: 18, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 21, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module SiteProjection_SWE
C: 22, 0: Line too long (119/100) (line-too-long)
C: 53, 0: Trailing whitespace (trailing-whitespace)
C: 55, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                            ^ (bad-whitespace)
C: 55, 0: Exactly one space required after comma
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                               ^ (bad-whitespace)
C: 56, 0: Wrong continued indentation (remove 5 spaces).
                        for x in range(0, 366)] #could use any year with a leap day
                   |    ^ (bad-continuation)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Trailing whitespace (trailing-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
C: 60, 0: Exactly one space required after comma
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor, 
                                   ^ (bad-whitespace)
C: 61, 0: Exactly one space required after comma
                            triplet.replace(':','_') + '.json'])
                                               ^ (bad-whitespace)
C: 67, 0: Trailing whitespace (trailing-whitespace)
C: 71, 0: Wrong hanging indentation (remove 4 spaces).
                {str(siteMeta['stationTriplet']) : 
            |   ^ (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Wrong hanging indentation in dict value.
                    dt.strptime(str(siteMeta['beginDate']),
                 |  ^| (bad-continuation)
C: 73, 0: Trailing whitespace (trailing-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Trailing whitespace (trailing-whitespace)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 92, 0: Trailing whitespace (trailing-whitespace)
C: 92, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'DAILY', sensor, 
                               ^ (bad-whitespace)
C: 93, 0: Exactly one space required after comma
                        triplet.replace(':','_') + '.json'])
                                           ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                   ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
            padMissingData(dataSite,sDate,eDate)
                                         ^ (bad-whitespace)
C:101, 0: Trailing whitespace (trailing-whitespace)
C:104, 0: Trailing whitespace (trailing-whitespace)
C:105, 0: Wrong continued indentation (add 4 spaces).
                    for i in range(0,len(sitePlotData),366)])
                    ^   | (bad-continuation)
C:105, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                    ^ (bad-whitespace)
C:105, 0: Exactly one space required after comma
                    for i in range(0,len(sitePlotData),366)])
                                                      ^ (bad-whitespace)
C:109, 0: Exactly one space required after comma
    statsData = list(map(list,zip(*allButCurrWY)))
                             ^ (bad-whitespace)
C:110, 0: Trailing whitespace (trailing-whitespace)
C:117, 0: Exactly one space required after comma
            meanData = [np.nanpercentile(a,50) for a in statsData]
                                          ^ (bad-whitespace)
C:118, 0: Exactly one space required after comma
            lowestData = [np.nanpercentile(a,10) for a in statsData]
                                            ^ (bad-whitespace)
C:119, 0: Exactly one space required after comma
            highestData = [np.nanpercentile(a,90) for a in statsData]
                                             ^ (bad-whitespace)
C:120, 0: Exactly one space required after comma
            lowData = [np.nanpercentile(a,30) for a in statsData]
                                         ^ (bad-whitespace)
C:121, 0: Exactly one space required after comma
            highData = [np.nanpercentile(a,70) for a in statsData]
                                          ^ (bad-whitespace)
C:123, 0: Trailing whitespace (trailing-whitespace)
C:125, 0: Trailing whitespace (trailing-whitespace)
C:126, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[get_last_non_zero_index(
                                 |^ (bad-continuation)
C:127, 0: Wrong hanging indentation (remove 4 spaces).
                                          maxData[0:305]) + future_date_pad]]))
                                      |   ^ (bad-continuation)
C:129, 0: Trailing whitespace (trailing-whitespace)
C:130, 0: Wrong continued indentation (remove 1 space).
                                  [date_series[-1]]))
                                 |^ (bad-continuation)
C:131, 0: Trailing whitespace (trailing-whitespace)
C:135, 0: Exactly one space required after comma
    projData = [createSWEProjTrace(a,jDay,lastValue,nanList) for
                                    ^ (bad-whitespace)
C:135, 0: Exactly one space required after comma
    projData = [createSWEProjTrace(a,jDay,lastValue,nanList) for
                                         ^ (bad-whitespace)
C:135, 0: Exactly one space required after comma
    projData = [createSWEProjTrace(a,jDay,lastValue,nanList) for
                                                   ^ (bad-whitespace)
C:137, 0: Exactly one space required after comma
    statsProj = list(map(list,zip(*projData)))
                             ^ (bad-whitespace)
C:144, 0: Exactly one space required after comma
            medianProj = [np.nanpercentile(a,50) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:145, 0: Exactly one space required after comma
            lowestProj = [np.nanpercentile(a,10) for a in cleanStatsProj]
                                            ^ (bad-whitespace)
C:146, 0: Exactly one space required after comma
            highestProj = [np.nanpercentile(a,90) for a in cleanStatsProj]
                                             ^ (bad-whitespace)
C:147, 0: Exactly one space required after comma
            lowProj = [np.nanpercentile(a,30) for a in cleanStatsProj]
                                         ^ (bad-whitespace)
C:148, 0: Exactly one space required after comma
            highProj = [np.nanpercentile(a,70) for a in cleanStatsProj]
                                          ^ (bad-whitespace)
C:149, 0: Trailing whitespace (trailing-whitespace)
C:154, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:155, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,y=i,
                            |   ^ (bad-continuation)
C:155, 0: Exactly one space required after comma
                                x=date_series,y=i,
                                             ^ (bad-whitespace)
C:156, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:157, 0: Wrong hanging indentation (remove 4 spaces).
                                visible=True,connectgaps=True,
                            |   ^ (bad-continuation)
C:157, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:158, 0: Wrong hanging indentation (remove 4 spaces).
                                line=dict(color='rgb(0,0,0)'))])
                            |   ^ (bad-continuation)
C:161, 0: Wrong hanging indentation (remove 4 spaces).
                        [go.Scatter(
                    |   ^ (bad-continuation)
C:162, 0: Wrong hanging indentation (remove 4 spaces).
                                x=date_series,
                            |   ^ (bad-continuation)
C:163, 0: Wrong hanging indentation (remove 4 spaces).
                                y=projData[index],
                            |   ^ (bad-continuation)
C:164, 0: Wrong hanging indentation (remove 4 spaces).
                                name=str(sYear + index + 1),
                            |   ^ (bad-continuation)
C:165, 0: Wrong hanging indentation (remove 4 spaces).
                                visible='legendonly',connectgaps=True)])
                            |   ^ (bad-continuation)
C:165, 0: Exactly one space required after comma
                                visible='legendonly',connectgaps=True)])
                                                    ^ (bad-whitespace)
C:169, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:170, 0: Wrong continued indentation (remove 1 space).
                                 y=minProj,
                                |^ (bad-continuation)
C:171, 0: Wrong continued indentation (remove 1 space).
                                 name=r'Min Proj',
                                |^ (bad-continuation)
C:172, 0: Wrong continued indentation (remove 1 space).
                                 visible=True,connectgaps=True,
                                |^ (bad-continuation)
C:172, 0: Exactly one space required after comma
                                 visible=True,connectgaps=True,
                                             ^ (bad-whitespace)
C:173, 0: Wrong continued indentation (remove 1 space).
                                 line=dict(color='rgba(237,0,0,0.4)'))])
                                |^ (bad-continuation)
C:176, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:179, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:183, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:186, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:190, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:192, 0: Exactly one space required after comma
                                name=r'50% Proj',connectgaps=True,
                                                ^ (bad-whitespace)
C:197, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:200, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:204, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:207, 0: Exactly one space required after comma
                                name=r'90% Proj',visible=True,
                                                ^ (bad-whitespace)
C:211, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:214, 0: Exactly one space required after comma
                                visible=True,connectgaps=True,
                                            ^ (bad-whitespace)
C:219, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=minData
                |   ^ (bad-continuation)
C:219, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=minData
                                             ^ (bad-whitespace)
C:220, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                ^ (bad-whitespace)
C:220, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Min',
                                                       ^ (bad-whitespace)
C:221, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:222, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:224, 0: Exactly one space required after comma
                                fill='none',showlegend=False,
                                           ^ (bad-whitespace)
C:225, 0: Trailing whitespace (trailing-whitespace)
C:227, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowestData
                |   ^ (bad-continuation)
C:227, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowestData
                                             ^ (bad-whitespace)
C:228, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                ^ (bad-whitespace)
C:228, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'10%',
                                                       ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:230, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:232, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:236, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=lowData,
                |   ^ (bad-continuation)
C:236, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=lowData,
                                             ^ (bad-whitespace)
C:237, 0: Exactly one space required after comma
                                legendgroup='centiles',name=r'30%',
                                                      ^ (bad-whitespace)
C:238, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:239, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:241, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:245, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highData,
                |   ^ (bad-continuation)
C:245, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highData,
                                             ^ (bad-whitespace)
C:248, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:251, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=True,
                                              ^ (bad-whitespace)
C:255, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=highestData,
                |   ^ (bad-continuation)
C:255, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=highestData,
                                             ^ (bad-whitespace)
C:256, 0: Exactly one space required after comma
                                legendgroup='centiles',connectgaps=True,
                                                      ^ (bad-whitespace)
C:257, 0: Exactly one space required after comma
                                name=r'90%',visible=True
                                           ^ (bad-whitespace)
C:258, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                ^ (bad-whitespace)
C:258, 0: Exactly one space required after comma
                                ,mode='line',line=dict(width=0),
                                            ^ (bad-whitespace)
C:260, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:263, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=maxData
                |   ^ (bad-continuation)
C:263, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=maxData
                                             ^ (bad-whitespace)
C:264, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                ^ (bad-whitespace)
C:264, 0: Exactly one space required after comma
                                ,legendgroup='centiles',name=r'Max',
                                                       ^ (bad-whitespace)
C:265, 0: Exactly one space required after comma
                                visible=True,mode='line',
                                            ^ (bad-whitespace)
C:266, 0: Exactly one space required after comma
                                line=dict(width=0),connectgaps=True,
                                                  ^ (bad-whitespace)
C:268, 0: Exactly one space required after comma
                                fill='tonexty',showlegend=False,
                                              ^ (bad-whitespace)
C:272, 0: Wrong hanging indentation (remove 4 spaces).
                [go.Scatter(x=date_series,
            |   ^ (bad-continuation)
C:274, 0: Exactly one space required after comma
                            name=r"Normal ('81-'10)",connectgaps=True,
                                                    ^ (bad-whitespace)
C:275, 0: Exactly one space required after comma
                            visible=True,hoverinfo='none',
                                        ^ (bad-whitespace)
C:277, 0: Trailing whitespace (trailing-whitespace)
C:281, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,
                |   ^ (bad-continuation)
C:282, 0: Exactly one space required after comma
                                y=meanData,name=r'Normal (POR)',
                                          ^ (bad-whitespace)
C:284, 0: Exactly one space required after comma
                                hoverinfo='none',connectgaps=True,
                                                ^ (bad-whitespace)
C:289, 0: Wrong hanging indentation (remove 4 spaces).
                    [go.Scatter(x=date_series,y=meanData,
                |   ^ (bad-continuation)
C:289, 0: Exactly one space required after comma
                    [go.Scatter(x=date_series,y=meanData,
                                             ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
                                name=r'Normal (POR)',connectgaps=True,
                                                    ^ (bad-whitespace)
C:291, 0: Exactly one space required after comma
                                visible=True,hoverinfo='none',
                                            ^ (bad-whitespace)
C:293, 0: Trailing whitespace (trailing-whitespace)
C:294, 0: Line too long (391/100) (line-too-long)
C:296, 0: Trailing whitespace (trailing-whitespace)
C:298, 0: Line too long (130/100) (line-too-long)
C:301, 0: Trailing whitespace (trailing-whitespace)
C:305, 0: Wrong hanging indentation (remove 4 spaces).
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
            |   ^ (bad-continuation)
C:305, 0: Exactly one space required after comma
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
                                                            ^ (bad-whitespace)
C:307, 0: Wrong hanging indentation (remove 4 spaces).
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
        |   ^ (bad-continuation)
C:307, 0: Exactly one space required after comma
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
                                                       ^ (bad-whitespace)
C:310, 0: Wrong hanging indentation (remove 4 spaces).
                stats.percentileofscore(
            |   ^ (bad-continuation)
C:311, 0: Wrong hanging indentation (remove 4 spaces).
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                    |   ^ (bad-continuation)
C:311, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                       ^ (bad-whitespace)
C:311, 0: Exactly one space required after comma
                        statsData[jDay],PORplotData[-1][jDay]),0)))
                                                              ^ (bad-whitespace)
C:314, 0: Trailing whitespace (trailing-whitespace)
C:321, 0: Trailing whitespace (trailing-whitespace)
C:324, 0: Trailing whitespace (trailing-whitespace)
C:325, 0: Trailing whitespace (trailing-whitespace)
C:327, 0: Trailing whitespace (trailing-whitespace)
C:329, 0: Wrong hanging indentation (remove 4 spaces).
            images= [dict(
        |   ^ (bad-continuation)
C:329, 0: No space allowed after keyword argument assignment
            images= [dict(
                  ^ (bad-whitespace)
C:330, 0: Line too long (191/100) (line-too-long)
C:330, 0: No space allowed after keyword argument assignment
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                      ^ (bad-whitespace)
C:333, 0: No space allowed after keyword argument assignment
                x= 0,
                 ^ (bad-whitespace)
C:334, 0: No space allowed after keyword argument assignment
                y= 0.9,
                 ^ (bad-whitespace)
C:336, 0: No space allowed after keyword argument assignment
                sizex= 0.4,
                     ^ (bad-whitespace)
C:337, 0: No space allowed after keyword argument assignment
                sizey= 0.1,
                     ^ (bad-whitespace)
C:338, 0: No space allowed after keyword argument assignment
                opacity= 0.5,
                       ^ (bad-whitespace)
C:339, 0: No space allowed after keyword argument assignment
                layer= "above"
                     ^ (bad-whitespace)
C:341, 0: Wrong hanging indentation (remove 4 spaces).
            annotations=[dict(
        |   ^ (bad-continuation)
C:344, 0: Trailing whitespace (trailing-whitespace)
C:344, 0: Exactly one space required after comma
                x=0,y=-0.41, 
                   ^ (bad-whitespace)
C:345, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:348, 0: Wrong continued indentation (add 9 spaces).
                dict(font=dict(size=10),
                ^        | (bad-continuation)
C:349, 0: Wrong continued indentation (add 5 spaces).
                text=annoData,
                ^    | (bad-continuation)
C:350, 0: Wrong continued indentation (add 5 spaces).
                x=0,y=0.9, 
                ^    | (bad-continuation)
C:350, 0: Trailing whitespace (trailing-whitespace)
C:350, 0: Exactly one space required after comma
                x=0,y=0.9, 
                   ^ (bad-whitespace)
C:351, 0: Wrong continued indentation (add 5 spaces).
                yref='paper',xref='paper',
                ^    | (bad-continuation)
C:351, 0: Exactly one space required after comma
                yref='paper',xref='paper',
                            ^ (bad-whitespace)
C:352, 0: Wrong continued indentation (add 5 spaces).
                align='left',
                ^    | (bad-continuation)
C:353, 0: Wrong continued indentation (add 5 spaces).
                xanchor="left", yanchor="top",
                ^    | (bad-continuation)
C:354, 0: Wrong continued indentation (add 5 spaces).
                showarrow=False)],    
                ^    | (bad-continuation)
C:354, 0: Trailing whitespace (trailing-whitespace)
C:355, 0: Exactly one space required after comma
        legend=dict(traceorder='reversed',tracegroupgap=1,
                                         ^ (bad-whitespace)
C:356, 0: Exactly one space required after comma
                    bordercolor='#E2E2E2',borderwidth=2),
                                         ^ (bad-whitespace)
C:357, 0: No space allowed around keyword argument assignment
        showlegend = True,
                   ^ (bad-whitespace)
C:360, 0: Exactly one space required after comma
        yaxis=dict(title=r'Snow Water Equivalent (in.)',hoverformat='.1f',
                                                       ^ (bad-whitespace)
C:385, 0: Trailing whitespace (trailing-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:390, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:391, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                      ^ (bad-whitespace)
C:391, 0: Exactly one space required after comma
    networks = ['SNTL','SCAN','SNTLT']
                             ^ (bad-whitespace)
C:394, 0: Exactly one space required after comma
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
                               ^ (bad-whitespace)
C:397, 0: Trailing whitespace (trailing-whitespace)
C:398, 0: Trailing whitespace (trailing-whitespace)
C:399, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[1] in state and 
            ^      | (bad-continuation)
C:399, 0: Trailing whitespace (trailing-whitespace)
C:400, 0: Wrong continued indentation (add 7 spaces).
            x['stationTriplet'].split(':')[2] in networks]
            ^      | (bad-continuation)
C:401, 0: Trailing whitespace (trailing-whitespace)
C:406, 0: Exactly one space required after comma
            dirPath = path.join(master_dir, 'siteCharts','Proj', sensor, state)
                                                        ^ (bad-whitespace)
C:410, 0: Exactly one space required after comma
                fig = go.Figure(updtChart(site_triplet,siteName))
                                                      ^ (bad-whitespace)
C:413, 0: Line too long (270/100) (line-too-long)
C:421, 0: Trailing whitespace (trailing-whitespace)
C:  1, 0: Module name "SiteProjection_SWE" doesn't conform to snake_case naming style (invalid-name)
C: 25, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 26, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 32, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 33, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 34, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 36,14: Redefining name 'site_triplet' from outer scope (line 404) (redefined-outer-name)
W: 36,28: Redefining name 'siteName' from outer scope (line 405) (redefined-outer-name)
W: 54, 4: Redefining name 'sensor' from outer scope (line 393) (redefined-outer-name)
W: 60,12: Redefining name 'url' from outer scope (line 394) (redefined-outer-name)
W: 90, 4: Redefining name 'data' from outer scope (line 395) (redefined-outer-name)
C: 36, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Argument name "siteName" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Missing function docstring (missing-docstring)
R: 36, 0: Too many local variables (58/15) (too-many-locals)
C: 38, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 4: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C: 40, 4: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C: 41, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 4: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C: 44, 4: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C: 45, 4: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C: 47, 4: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 52, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 58, 8: Variable name "normData" doesn't conform to snake_case naming style (invalid-name)
C: 62,41: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 63,16: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 66, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 67, 4: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C: 68, 4: Variable name "beginDateDict" doesn't conform to snake_case naming style (invalid-name)
C: 69, 8: Variable name "siteMeta" doesn't conform to snake_case naming style (invalid-name)
C: 75, 4: Variable name "siteBeginDate" doesn't conform to snake_case naming style (invalid-name)
C: 77, 4: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 80,12: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 83,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 85,16: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 87, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C: 88, 4: Variable name "eDate" doesn't conform to snake_case naming style (invalid-name)
C: 94,37: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C: 95,12: Variable name "jTemp" doesn't conform to snake_case naming style (invalid-name)
C: 98, 8: Variable name "dataSite" doesn't conform to snake_case naming style (invalid-name)
C:102, 4: Variable name "sitePlotData" doesn't conform to snake_case naming style (invalid-name)
C:104, 4: Variable name "PORplotData" doesn't conform to snake_case naming style (invalid-name)
C:107, 4: Variable name "allButCurrWY" doesn't conform to snake_case naming style (invalid-name)
C:109, 4: Variable name "statsData" doesn't conform to snake_case naming style (invalid-name)
C:115,12: Variable name "minData" doesn't conform to snake_case naming style (invalid-name)
C:116,12: Variable name "maxData" doesn't conform to snake_case naming style (invalid-name)
C:117,12: Variable name "meanData" doesn't conform to snake_case naming style (invalid-name)
C:118,12: Variable name "lowestData" doesn't conform to snake_case naming style (invalid-name)
C:119,12: Variable name "highestData" doesn't conform to snake_case naming style (invalid-name)
C:120,12: Variable name "lowData" doesn't conform to snake_case naming style (invalid-name)
C:121,12: Variable name "highData" doesn't conform to snake_case naming style (invalid-name)
C:125, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:129, 8: Variable name "sliderDates" doesn't conform to snake_case naming style (invalid-name)
C:132, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:133, 4: Variable name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C:134, 4: Variable name "nanList" doesn't conform to snake_case naming style (invalid-name)
C:135, 4: Variable name "projData" doesn't conform to snake_case naming style (invalid-name)
C:137, 4: Variable name "statsProj" doesn't conform to snake_case naming style (invalid-name)
C:138, 4: Variable name "cleanStatsProj" doesn't conform to snake_case naming style (invalid-name)
C:142,12: Variable name "minProj" doesn't conform to snake_case naming style (invalid-name)
C:143,12: Variable name "maxProj" doesn't conform to snake_case naming style (invalid-name)
C:144,12: Variable name "medianProj" doesn't conform to snake_case naming style (invalid-name)
C:145,12: Variable name "lowestProj" doesn't conform to snake_case naming style (invalid-name)
C:146,12: Variable name "highestProj" doesn't conform to snake_case naming style (invalid-name)
C:147,12: Variable name "lowProj" doesn't conform to snake_case naming style (invalid-name)
C:148,12: Variable name "highProj" doesn't conform to snake_case naming style (invalid-name)
C:150, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:294, 4: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:296, 7: Do not use `len(SEQUENCE)` to determine if a sequence is empty (len-as-condition)
C:297, 8: Variable name "sitePlotNormData" doesn't conform to snake_case naming style (invalid-name)
C:298, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:300, 4: Variable name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:302, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:304, 8: Variable name "perNorm" doesn't conform to snake_case naming style (invalid-name)
C:306, 4: Variable name "perPeak" doesn't conform to snake_case naming style (invalid-name)
C:315, 4: Variable name "dayOfPeak" doesn't conform to snake_case naming style (invalid-name)
C:320, 4: Variable name "daysToPeak" doesn't conform to snake_case naming style (invalid-name)
C:321, 4: Variable name "annoData" doesn't conform to snake_case naming style (invalid-name)
R: 36, 0: Too many branches (42/12) (too-many-branches)
R: 36, 0: Too many statements (147/50) (too-many-statements)
C:390, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:391, 4: Constant name "networks" doesn't conform to UPPER_CASE naming style (invalid-name)
W:418,12: No exception type(s) specified (bare-except)
C: 18, 0: standard import "from itertools import chain" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 19, 0: standard import "import warnings" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 20, 0: standard import "import math" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
C: 21, 0: standard import "import time" should be placed before "import plotly.graph_objs as go" (wrong-import-order)
************* Module basinMaps
C: 33, 0: Exactly one space required after comma
    huc = basinTable.get(basinName).get('HUCS').replace(r';',r',')
                                                            ^ (bad-whitespace)
C: 36, 0: Trailing whitespace (trailing-whitespace)
C: 40, 0: Trailing whitespace (trailing-whitespace)
C: 41, 0: Exactly one space required after comma
    url = '/'.join([dataUrl,'metadata', 'ALL', 'metadata.json'])
                           ^ (bad-whitespace)
C: 44, 0: Trailing whitespace (trailing-whitespace)
C: 45, 0: Trailing whitespace (trailing-whitespace)
C: 45, 0: Exactly one space required after comma
    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in 
                                                               ^ (bad-whitespace)
C: 46, 0: Wrong continued indentation (add 7 spaces).
        NETWORKS and str.split(x['stationTriplet'],":")[0] in basinSites]
        ^      | (bad-continuation)
C: 46, 0: Exactly one space required after comma
        NETWORKS and str.split(x['stationTriplet'],":")[0] in basinSites]
                                                  ^ (bad-whitespace)
C: 47, 0: Trailing whitespace (trailing-whitespace)
C: 57, 0: Wrong continued indentation (add 8 spaces).
                 r'SNTL' in validTrip[index]]
                 ^       | (bad-continuation)
C: 59, 0: Wrong continued indentation (add 7 spaces).
                 r'SNTL' in validTrip[index]]
                 ^      | (bad-continuation)
C: 61, 0: Wrong continued indentation (add 8 spaces).
                 r'SCAN' in validTrip[index]]
                 ^       | (bad-continuation)
C: 63, 0: Wrong continued indentation (add 7 spaces).
                 r'SCAN' in validTrip[index]]
                 ^      | (bad-continuation)
C: 65, 0: Wrong continued indentation (add 9 spaces).
                 r'SNTLT' in validTrip[index]]
                 ^        | (bad-continuation)
C: 67, 0: Wrong continued indentation (add 8 spaces).
                 r'SNTLT' in validTrip[index]]
                 ^       | (bad-continuation)
C: 69, 0: Wrong continued indentation (add 8 spaces).
                 r'SNTL' in validTrip[index]]
                 ^       | (bad-continuation)
C: 71, 0: Wrong continued indentation (add 8 spaces).
                 r'SCAN' in validTrip[index]]
                 ^       | (bad-continuation)
C: 73, 0: Wrong continued indentation (add 9 spaces).
                 r'SNTLT' in validTrip[index]]
                 ^        | (bad-continuation)
C: 74, 0: Trailing whitespace (trailing-whitespace)
W: 79, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
W: 80, 0: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
C: 83, 0: Wrong hanging indentation (remove 4 spaces).
                go.Scattermapbox(
            |   ^ (bad-continuation)
C: 84, 0: Wrong hanging indentation (remove 4 spaces).
                        lat=validLatSNTL,
                    |   ^ (bad-continuation)
C: 85, 0: Wrong hanging indentation (remove 4 spaces).
                        lon=validLongSNTL,
                    |   ^ (bad-continuation)
C: 86, 0: Wrong hanging indentation (remove 4 spaces).
                        mode='markers',
                    |   ^ (bad-continuation)
C: 87, 0: Wrong hanging indentation (remove 4 spaces).
                        marker=go.Marker(
                    |   ^ (bad-continuation)
C: 88, 0: Wrong hanging indentation (remove 4 spaces).
                                symbol='circle',
                            |   ^ (bad-continuation)
C: 89, 0: Wrong hanging indentation (remove 4 spaces).
                                size=9,
                            |   ^ (bad-continuation)
C: 90, 0: Wrong hanging indentation (remove 4 spaces).
                                opacity=0.7),
                            |   ^ (bad-continuation)
C: 91, 0: Wrong hanging indentation (remove 4 spaces).
                        text=validTextSNTL,
                    |   ^ (bad-continuation)
C: 92, 0: Wrong hanging indentation (remove 4 spaces).
                        hoverinfo='text',
                    |   ^ (bad-continuation)
C: 93, 0: Wrong hanging indentation (remove 4 spaces).
                        name='SNOTEL'
                    |   ^ (bad-continuation)
C: 94, 0: Wrong hanging indentation.
                        ),
                |   |   ^ (bad-continuation)
C: 95, 0: Wrong hanging indentation (remove 4 spaces).
                go.Scattermapbox(
            |   ^ (bad-continuation)
C: 96, 0: Wrong hanging indentation (remove 4 spaces).
                        lat=validLatSCAN,
                    |   ^ (bad-continuation)
C: 97, 0: Wrong hanging indentation (remove 4 spaces).
                        lon=validLongSCAN,
                    |   ^ (bad-continuation)
C: 98, 0: Wrong hanging indentation (remove 4 spaces).
                        mode='markers',
                    |   ^ (bad-continuation)
C: 99, 0: Wrong hanging indentation (remove 4 spaces).
                        marker=go.Marker(
                    |   ^ (bad-continuation)
C:100, 0: Wrong hanging indentation (remove 4 spaces).
                                symbol='circle',
                            |   ^ (bad-continuation)
C:101, 0: Wrong hanging indentation (remove 4 spaces).
                                size=9,
                            |   ^ (bad-continuation)
C:102, 0: Wrong hanging indentation (remove 4 spaces).
                                opacity=0.7),
                            |   ^ (bad-continuation)
C:103, 0: Wrong hanging indentation (remove 4 spaces).
                        text=validTextSCAN,
                    |   ^ (bad-continuation)
C:104, 0: Wrong hanging indentation (remove 4 spaces).
                        hoverinfo='text',
                    |   ^ (bad-continuation)
C:105, 0: Wrong hanging indentation (remove 4 spaces).
                        name='SCAN'
                    |   ^ (bad-continuation)
C:106, 0: Wrong hanging indentation.
                        ),
                |   |   ^ (bad-continuation)
C:107, 0: Wrong hanging indentation (remove 4 spaces).
                go.Scattermapbox(
            |   ^ (bad-continuation)
C:108, 0: Wrong hanging indentation (remove 4 spaces).
                        lat=validLatSNTLT,
                    |   ^ (bad-continuation)
C:109, 0: Wrong hanging indentation (remove 4 spaces).
                        lon=validLongSNTLT,
                    |   ^ (bad-continuation)
C:110, 0: Wrong hanging indentation (remove 4 spaces).
                        mode='markers',
                    |   ^ (bad-continuation)
C:111, 0: Wrong hanging indentation (remove 4 spaces).
                        marker=go.Marker(
                    |   ^ (bad-continuation)
C:112, 0: Wrong hanging indentation (remove 4 spaces).
                                symbol='circle',
                            |   ^ (bad-continuation)
C:113, 0: Wrong hanging indentation (remove 4 spaces).
                                size=9,
                            |   ^ (bad-continuation)
C:114, 0: Wrong hanging indentation (remove 4 spaces).
                                opacity=0.7),
                            |   ^ (bad-continuation)
C:115, 0: Wrong hanging indentation (remove 4 spaces).
                        text=validTextSNTLT,
                    |   ^ (bad-continuation)
C:116, 0: Wrong hanging indentation (remove 4 spaces).
                        hoverinfo='text',
                    |   ^ (bad-continuation)
C:117, 0: Wrong hanging indentation (remove 4 spaces).
                        name='SNOLITE'
                    |   ^ (bad-continuation)
C:118, 0: Wrong hanging indentation.
                        )
                |   |   ^ (bad-continuation)
C:119, 0: Wrong hanging indentation.
                ],
        |   |   ^ (bad-continuation)
C:120, 0: Trailing whitespace (trailing-whitespace)
C:121, 0: Wrong continued indentation (add 15 spaces).
        )
        ^              | (bad-continuation)
C:123, 0: Exactly one space required after comma
        if r'basin' in basinName: basinName = basinName.replace(r'basins',r'').replace(r'basin',r'')
                                                                         ^ (bad-whitespace)
C:123, 0: Exactly one space required after comma
        if r'basin' in basinName: basinName = basinName.replace(r'basins',r'').replace(r'basin',r'')
                                                                                               ^ (bad-whitespace)
C:126, 0: No space allowed after keyword argument assignment
        layout = go.Layout(images= [dict(
                                 ^ (bad-whitespace)
C:127, 0: Wrong hanging indentation (remove 8 spaces).
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
            |       ^ (bad-continuation)
C:127, 0: Line too long (195/100) (line-too-long)
C:127, 0: No space allowed after keyword argument assignment
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                          ^ (bad-whitespace)
C:128, 0: Wrong hanging indentation (remove 8 spaces).
                    xref="paper",
            |       ^ (bad-continuation)
C:129, 0: Wrong hanging indentation (remove 8 spaces).
                    yref="paper",
            |       ^ (bad-continuation)
C:130, 0: Wrong hanging indentation (remove 8 spaces).
                    x= 0,
            |       ^ (bad-continuation)
C:130, 0: No space allowed after keyword argument assignment
                    x= 0,
                     ^ (bad-whitespace)
C:131, 0: Wrong hanging indentation (remove 8 spaces).
                    y= 0.975,
            |       ^ (bad-continuation)
C:131, 0: No space allowed after keyword argument assignment
                    y= 0.975,
                     ^ (bad-whitespace)
C:132, 0: Wrong hanging indentation (remove 8 spaces).
                    xanchor="left", yanchor="top",
            |       ^ (bad-continuation)
C:133, 0: Wrong hanging indentation (remove 8 spaces).
                    sizex= 0.4,
            |       ^ (bad-continuation)
C:133, 0: No space allowed after keyword argument assignment
                    sizex= 0.4,
                         ^ (bad-whitespace)
C:134, 0: Wrong hanging indentation (remove 8 spaces).
                    sizey= 0.1,
            |       ^ (bad-continuation)
C:134, 0: No space allowed after keyword argument assignment
                    sizey= 0.1,
                         ^ (bad-whitespace)
C:135, 0: Wrong hanging indentation (remove 8 spaces).
                    opacity= 0.5,
            |       ^ (bad-continuation)
C:135, 0: No space allowed after keyword argument assignment
                    opacity= 0.5,
                           ^ (bad-whitespace)
C:136, 0: Wrong hanging indentation (remove 8 spaces).
                    layer= "above"
            |       ^ (bad-continuation)
C:136, 0: No space allowed after keyword argument assignment
                    layer= "above"
                         ^ (bad-whitespace)
C:137, 0: Wrong hanging indentation.
                )],
        |   |   ^ (bad-continuation)
C:138, 0: Wrong continued indentation (add 11 spaces).
                annotations=[dict(
                ^          | (bad-continuation)
C:141, 0: Trailing whitespace (trailing-whitespace)
C:141, 0: Exactly one space required after comma
                    x=1,y=1, 
                       ^ (bad-whitespace)
C:142, 0: Exactly one space required after comma
                    yref='paper',xref='paper',
                                ^ (bad-whitespace)
C:146, 0: Wrong continued indentation (add 11 spaces).
                legend=dict(orientation="h",traceorder='reversed',tracegroupgap=1,
                ^          | (bad-continuation)
C:146, 0: Exactly one space required after comma
                legend=dict(orientation="h",traceorder='reversed',tracegroupgap=1,
                                           ^ (bad-whitespace)
C:146, 0: Exactly one space required after comma
                legend=dict(orientation="h",traceorder='reversed',tracegroupgap=1,
                                                                 ^ (bad-whitespace)
C:147, 0: Wrong continued indentation (add 4 spaces).
                        bordercolor='#E2E2E2',borderwidth=2,x=0,y=0.075),
                        ^   | (bad-continuation)
C:147, 0: Exactly one space required after comma
                        bordercolor='#E2E2E2',borderwidth=2,x=0,y=0.075),
                                             ^ (bad-whitespace)
C:147, 0: Exactly one space required after comma
                        bordercolor='#E2E2E2',borderwidth=2,x=0,y=0.075),
                                                           ^ (bad-whitespace)
C:147, 0: Exactly one space required after comma
                        bordercolor='#E2E2E2',borderwidth=2,x=0,y=0.075),
                                                               ^ (bad-whitespace)
C:148, 0: Wrong continued indentation (add 11 spaces).
                showlegend=True,
                ^          | (bad-continuation)
C:149, 0: Wrong continued indentation (add 11 spaces).
                title = r'Sites used in<br>'+ basinName + r'<br>Basin Calculations',
                ^          | (bad-continuation)
C:149, 0: No space allowed around keyword argument assignment
                title = r'Sites used in<br>'+ basinName + r'<br>Basin Calculations',
                      ^ (bad-whitespace)
C:150, 0: Wrong continued indentation (add 11 spaces).
                height=622, width=700,
                ^          | (bad-continuation)
C:151, 0: Wrong continued indentation (add 11 spaces).
                autosize=True, 
                ^          | (bad-continuation)
C:151, 0: Trailing whitespace (trailing-whitespace)
C:152, 0: Wrong continued indentation (add 11 spaces).
                hovermode='closest',
                ^          | (bad-continuation)
C:153, 0: Wrong continued indentation (add 11 spaces).
                mapbox=dict(
                ^          | (bad-continuation)
C:154, 0: Wrong hanging indentation (remove 4 spaces).
                        accesstoken=mapbox_token(),
                    |   ^ (bad-continuation)
C:155, 0: Wrong hanging indentation (remove 4 spaces).
                        style='outdoors',
                    |   ^ (bad-continuation)
C:156, 0: Wrong hanging indentation (remove 4 spaces).
                        layers=[dict(
                    |   ^ (bad-continuation)
C:157, 0: Wrong hanging indentation (remove 4 spaces).
                                sourcetype='geojson',
                            |   ^ (bad-continuation)
C:158, 0: Wrong hanging indentation (remove 4 spaces).
                                source=geoData,
                            |   ^ (bad-continuation)
C:159, 0: Wrong hanging indentation (remove 4 spaces).
                                type='fill',
                            |   ^ (bad-continuation)
C:160, 0: Wrong hanging indentation (remove 4 spaces).
                                color='#A9A9A9',
                            |   ^ (bad-continuation)
C:161, 0: Wrong hanging indentation (remove 4 spaces).
                                fill=dict(outlinecolor='#A9A9A9'),
                            |   ^ (bad-continuation)
C:162, 0: Wrong hanging indentation (remove 4 spaces).
                                opacity=0.4,
                            |   ^ (bad-continuation)
C:163, 0: Wrong hanging indentation (remove 4 spaces).
                                below='errythang')],
                            |   ^ (bad-continuation)
C:164, 0: Wrong hanging indentation (remove 4 spaces).
                        bearing=0,
                    |   ^ (bad-continuation)
C:165, 0: Wrong hanging indentation (remove 4 spaces).
                        center=dict(lat=midLat,lon=midLong),
                    |   ^ (bad-continuation)
C:165, 0: Exactly one space required after comma
                        center=dict(lat=midLat,lon=midLong),
                                              ^ (bad-whitespace)
C:166, 0: Wrong hanging indentation (remove 4 spaces).
                        pitch=0,
                    |   ^ (bad-continuation)
C:167, 0: Wrong hanging indentation (remove 4 spaces).
                        zoom=mapZoom                            
                    |   ^ (bad-continuation)
C:167, 0: Trailing whitespace (trailing-whitespace)
C:169, 0: Wrong continued indentation (add 18 spaces).
        )
        ^                 | (bad-continuation)
C:170, 0: Trailing whitespace (trailing-whitespace)
C:173, 0: Trailing whitespace (trailing-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                   ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                            ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                 ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                      ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                           ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                     ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                          ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                               ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                    ^ (bad-whitespace)
C:175, 0: Exactly one space required after comma
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
                                                                         ^ (bad-whitespace)
C:177, 0: Trailing whitespace (trailing-whitespace)
C:182, 0: Exactly one space required after comma
        basinDefFileName = os.path.join(basinDefDir,'basinDef_' + state + r'.csv')
                                                   ^ (bad-whitespace)
C:195, 0: Trailing whitespace (trailing-whitespace)
C:206, 0: Line too long (270/100) (line-too-long)
C:  1, 0: Module name "basinMaps" doesn't conform to snake_case naming style (invalid-name)
C: 22, 0: Constant name "prod_scripts_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 25, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 27, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 28, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 29, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 31,14: Redefining name 'basinName' from outer scope (line 196) (redefined-outer-name)
W: 31,25: Redefining name 'basinSites' from outer scope (line 202) (redefined-outer-name)
W: 31,37: Redefining name 'basinTable' from outer scope (line 180) (redefined-outer-name)
W: 42,33: Redefining name 'data' from outer scope (line 184) (redefined-outer-name)
C: 31, 0: Function name "updtChart" doesn't conform to snake_case naming style (invalid-name)
C: 31, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C: 31, 0: Argument name "basinSites" doesn't conform to snake_case naming style (invalid-name)
C: 31, 0: Argument name "basinTable" doesn't conform to snake_case naming style (invalid-name)
C: 31, 0: Missing function docstring (missing-docstring)
R: 31, 0: Too many local variables (30/15) (too-many-locals)
C: 34, 4: Variable name "hucList" doesn't conform to snake_case naming style (invalid-name)
C: 37, 8: Variable name "geoData" doesn't conform to snake_case naming style (invalid-name)
C: 39, 8: Variable name "geoData" doesn't conform to snake_case naming style (invalid-name)
C: 48, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 49, 4: Variable name "validLong" doesn't conform to snake_case naming style (invalid-name)
C: 50, 4: Variable name "validLat" doesn't conform to snake_case naming style (invalid-name)
C: 51, 4: Variable name "validText" doesn't conform to snake_case naming style (invalid-name)
C: 56, 8: Variable name "validLongSNTL" doesn't conform to snake_case naming style (invalid-name)
C: 58, 8: Variable name "validLatSNTL" doesn't conform to snake_case naming style (invalid-name)
C: 60, 8: Variable name "validLongSCAN" doesn't conform to snake_case naming style (invalid-name)
C: 62, 8: Variable name "validLatSCAN" doesn't conform to snake_case naming style (invalid-name)
C: 64, 8: Variable name "validLongSNTLT" doesn't conform to snake_case naming style (invalid-name)
C: 66, 8: Variable name "validLatSNTLT" doesn't conform to snake_case naming style (invalid-name)
C: 68, 8: Variable name "validTextSNTL" doesn't conform to snake_case naming style (invalid-name)
C: 70, 8: Variable name "validTextSCAN" doesn't conform to snake_case naming style (invalid-name)
C: 72, 8: Variable name "validTextSNTLT" doesn't conform to snake_case naming style (invalid-name)
C: 75, 8: Variable name "zoomLat" doesn't conform to snake_case naming style (invalid-name)
C: 76, 8: Variable name "zoomLong" doesn't conform to snake_case naming style (invalid-name)
C: 77,31: More than one statement on a single line (multiple-statements)
C: 77,31: Variable name "zoomLong" doesn't conform to snake_case naming style (invalid-name)
C: 80,16: Variable name "mapZoom" doesn't conform to snake_case naming style (invalid-name)
C: 81,25: More than one statement on a single line (multiple-statements)
C: 81,25: Variable name "mapZoom" doesn't conform to snake_case naming style (invalid-name)
C:122, 8: Variable name "annoText" doesn't conform to snake_case naming style (invalid-name)
C:123,34: More than one statement on a single line (multiple-statements)
C:124, 8: Variable name "midLat" doesn't conform to snake_case naming style (invalid-name)
C:125, 8: Variable name "midLong" doesn't conform to snake_case naming style (invalid-name)
R: 31, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C:175, 4: Constant name "states" doesn't conform to UPPER_CASE naming style (invalid-name)
C:176, 4: Constant name "sensor" doesn't conform to UPPER_CASE naming style (invalid-name)
C:192,16: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
W:211,12: No exception type(s) specified (bare-except)
C: 12, 0: standard import "import datetime" should be placed before "import simplejson as json" (wrong-import-order)
C: 14, 0: standard import "import warnings" should be placed before "import simplejson as json" (wrong-import-order)
C: 15, 0: standard import "import time" should be placed before "import simplejson as json" (wrong-import-order)
C: 16, 0: standard import "import csv" should be placed before "import simplejson as json" (wrong-import-order)
C: 17, 0: standard import "import sys" should be placed before "import simplejson as json" (wrong-import-order)
************* Module data
C:  7, 0: Trailing newlines (trailing-newlines)
************* Module data.updateDataFetch
C: 24, 0: Exactly one space required after comma
transport = Transport(timeout=300,cache=InMemoryCache())
                                 ^ (bad-whitespace)
C: 25, 0: Exactly one space required after comma
awdb = Client(wsdl=wsdl,transport=transport,strict=False)
                       ^ (bad-whitespace)
C: 25, 0: Exactly one space required after comma
awdb = Client(wsdl=wsdl,transport=transport,strict=False)
                                           ^ (bad-whitespace)
C: 32, 0: Exactly one space required after comma
with open(path.join(this_dir,'lastCall.txt')) as f:
                            ^ (bad-whitespace)
C: 35, 0: Trailing whitespace (trailing-whitespace)
C: 42, 0: Trailing whitespace (trailing-whitespace)
C: 42, 0: Exactly one space required after comma
        chunkData = getUpdt(site, sensor, 1, None,duration, False, 
                                                 ^ (bad-whitespace)
C: 43, 0: Exactly one space required after comma
                            sDate,eDate, updt_since,True)
                                 ^ (bad-whitespace)
C: 43, 0: Exactly one space required after comma
                            sDate,eDate, updt_since,True)
                                                   ^ (bad-whitespace)
C: 44, 0: Trailing whitespace (trailing-whitespace)
C: 48, 0: Exactly one space required after comma
                fileName = path.join(this_dir,sensor,
                                             ^ (bad-whitespace)
C: 49, 0: Exactly one space required after comma
                                     siteData.stationTriplet.replace(':','_'))
                                                                        ^ (bad-whitespace)
C: 50, 0: Exactly one space required after comma
                with open(fileName + '.json',"r") as f:
                                            ^ (bad-whitespace)
C: 52, 0: Trailing whitespace (trailing-whitespace)
C: 56, 0: Trailing whitespace (trailing-whitespace)
C: 58, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Wrong continued indentation (add 8 spaces).
                                          "%Y-%m-%d %H:%M:%S")
                                          ^       | (bad-continuation)
C: 71, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Exactly one space required after comma
                with open(fileName + '.json',"w") as f:
                                            ^ (bad-whitespace)
C: 73, 0: Exactly one space required after comma
                    json.dump(json_in,f)
                                     ^ (bad-whitespace)
C: 80, 0: Trailing whitespace (trailing-whitespace)
C: 80, 0: Exactly one space required after comma
        chunkData = getUpdt(site, sensor, ordinal, None, sDate,eDate, 
                                                              ^ (bad-whitespace)
C: 81, 0: Exactly one space required after comma
                            updt_since,'ALL','ENGLISH')
                                      ^ (bad-whitespace)
C: 81, 0: Exactly one space required after comma
                            updt_since,'ALL','ENGLISH')
                                            ^ (bad-whitespace)
C: 82, 0: Trailing whitespace (trailing-whitespace)
C: 83, 0: Exactly one space required after comma
        for i,siteData in enumerate(chunkData):
             ^ (bad-whitespace)
C: 86, 0: Exactly one space required after comma
                fileName = path.join(this_dir,'HOURLY',sensor + str(ordinal),
                                             ^ (bad-whitespace)
C: 86, 0: Exactly one space required after comma
                fileName = path.join(this_dir,'HOURLY',sensor + str(ordinal),
                                                      ^ (bad-whitespace)
C: 87, 0: Exactly one space required after comma
                                     site[i].replace(':','_'))
                                                        ^ (bad-whitespace)
C: 88, 0: Exactly one space required after comma
                with open(fileName + '.json',"r") as f:
                                            ^ (bad-whitespace)
C:105, 0: Exactly one space required after comma
                with open(fileName + '.json',"w") as f:
                                            ^ (bad-whitespace)
C:106, 0: Exactly one space required after comma
                    json.dump(json_in,f)
                                     ^ (bad-whitespace)
C:108, 0: Trailing whitespace (trailing-whitespace)
C:113, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Exactly one space required after comma
                            sDate,eDate, updt_since,True)
                                 ^ (bad-whitespace)
C:114, 0: Exactly one space required after comma
                            sDate,eDate, updt_since,True)
                                                   ^ (bad-whitespace)
C:115, 0: Trailing whitespace (trailing-whitespace)
C:119, 0: Exactly one space required after comma
                fileName = path.join(this_dir,sensor,
                                             ^ (bad-whitespace)
C:121, 0: Exactly one space required after comma
                                     siteData.stationTriplet.replace(':','_'))
                                                                        ^ (bad-whitespace)
C:122, 0: Exactly one space required after comma
                with open(fileName + '.json',"r") as f:
                                            ^ (bad-whitespace)
C:124, 0: Trailing whitespace (trailing-whitespace)
C:128, 0: Trailing whitespace (trailing-whitespace)
C:130, 0: Trailing whitespace (trailing-whitespace)
C:131, 0: Wrong continued indentation (add 8 spaces).
                                          "%Y-%m-%d %H:%M:%S")
                                          ^       | (bad-continuation)
C:143, 0: Trailing whitespace (trailing-whitespace)
C:144, 0: Trailing whitespace (trailing-whitespace)
C:144, 0: Exactly one space required after comma
                with open(fileName + '.json',"w") as f:    
                                            ^ (bad-whitespace)
C:145, 0: Trailing whitespace (trailing-whitespace)
C:145, 0: Exactly one space required after comma
                    json.dump(json_in,f)    
                                     ^ (bad-whitespace)
C:147, 0: Trailing whitespace (trailing-whitespace)
C:150, 0: Exactly one space required after comma
    updt_files = glob.glob(path.join(this_dir,sensor, r'*.json'))
                                             ^ (bad-whitespace)
C:151, 0: Exactly one space required after comma
    validTrip = [path.basename(x).replace('.json','').replace('_',':') for
                                                 ^ (bad-whitespace)
C:151, 0: Exactly one space required after comma
    validTrip = [path.basename(x).replace('.json','').replace('_',':') for
                                                                 ^ (bad-whitespace)
C:152, 0: Wrong continued indentation (add 1 space).
                x in updt_files]
                ^| (bad-continuation)
C:154, 0: Trailing whitespace (trailing-whitespace)
C:156, 0: Trailing whitespace (trailing-whitespace)
C:157, 0: Exactly one space required around assignment
    num_threads=4
               ^ (bad-whitespace)
C:158, 0: Trailing whitespace (trailing-whitespace)
C:170, 0: Exactly one space required after comma
    updt_files = glob.glob(path.join(this_dir,'HOURLY',sensor + str(ordinal), r'*.json'))
                                             ^ (bad-whitespace)
C:170, 0: Exactly one space required after comma
    updt_files = glob.glob(path.join(this_dir,'HOURLY',sensor + str(ordinal), r'*.json'))
                                                      ^ (bad-whitespace)
C:171, 0: Exactly one space required after comma
    validTrip = [path.basename(x).replace('.json','').replace('_',':') for
                                                 ^ (bad-whitespace)
C:171, 0: Exactly one space required after comma
    validTrip = [path.basename(x).replace('.json','').replace('_',':') for
                                                                 ^ (bad-whitespace)
C:172, 0: Wrong continued indentation (add 1 space).
                x in updt_files]
                ^| (bad-continuation)
C:174, 0: Trailing whitespace (trailing-whitespace)
C:176, 0: Trailing whitespace (trailing-whitespace)
C:177, 0: Exactly one space required around assignment
    num_threads=4
               ^ (bad-whitespace)
C:178, 0: Trailing whitespace (trailing-whitespace)
C:187, 0: Trailing whitespace (trailing-whitespace)
C:188, 0: Exactly one space required after comma
def getSoilsData(sensor,depth):
                       ^ (bad-whitespace)
C:189, 0: Exactly one space required after comma
    getSoilsDataAtDepth(sensor,depth)
                              ^ (bad-whitespace)
C:191, 0: Exactly one space required after comma
def getSoilsDataAtDepth(sensor,depth):
                              ^ (bad-whitespace)
C:192, 0: Trailing whitespace (trailing-whitespace)
C:195, 0: Trailing whitespace (trailing-whitespace)
C:197, 0: Exactly one space required after comma
    updt_files = glob.glob(path.join(this_dir,sensor,str(abs(depth)), r'*.json'))
                                             ^ (bad-whitespace)
C:197, 0: Exactly one space required after comma
    updt_files = glob.glob(path.join(this_dir,sensor,str(abs(depth)), r'*.json'))
                                                    ^ (bad-whitespace)
C:198, 0: Exactly one space required after comma
    validTrip = [path.basename(x).replace('.json','').replace('_',':') for
                                                 ^ (bad-whitespace)
C:198, 0: Exactly one space required after comma
    validTrip = [path.basename(x).replace('.json','').replace('_',':') for
                                                                 ^ (bad-whitespace)
C:199, 0: Wrong continued indentation (add 1 space).
                x in updt_files]
                ^| (bad-continuation)
C:201, 0: Trailing whitespace (trailing-whitespace)
C:203, 0: Trailing whitespace (trailing-whitespace)
C:204, 0: Exactly one space required around assignment
    num_threads=4
               ^ (bad-whitespace)
C:205, 0: Trailing whitespace (trailing-whitespace)
C:211, 0: Exactly one space required after comma
        q.put([sites,heightDepth])
                    ^ (bad-whitespace)
C:214, 0: Trailing whitespace (trailing-whitespace)
C:216, 0: Trailing whitespace (trailing-whitespace)
C:218, 0: Exactly one space required after comma
        sensors = [r"PREC",r"WTEQ",r"TAVG"]#,r"SNWD"]
                          ^ (bad-whitespace)
C:218, 0: Exactly one space required after comma
        sensors = [r"PREC",r"WTEQ",r"TAVG"]#,r"SNWD"]
                                  ^ (bad-whitespace)
C:221, 0: Trailing whitespace (trailing-whitespace)
C:224, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                        ^ (bad-whitespace)
C:224, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                           ^ (bad-whitespace)
C:224, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                              ^ (bad-whitespace)
C:224, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                                  ^ (bad-whitespace)
C:226, 0: Exactly one space required after comma
                getSoilsData(sensor,depth)
                                   ^ (bad-whitespace)
C:227, 0: Trailing whitespace (trailing-whitespace)
C:232, 0: Trailing whitespace (trailing-whitespace)
C:233, 0: Trailing whitespace (trailing-whitespace)
C:234, 0: Exactly one space required after comma
        with open(path.join(this_dir,'lastCall.txt'), 'w') as f:
                                    ^ (bad-whitespace)
C:237, 0: Final newline missing (missing-final-newline)
C:  1, 0: Module name "updateDataFetch" doesn't conform to snake_case naming style (invalid-name)
E:  9, 0: Unable to import 'zeep' (import-error)
E: 10, 0: Unable to import 'zeep.transports' (import-error)
E: 11, 0: Unable to import 'zeep.cache' (import-error)
E: 12, 0: Unable to import 'zeep' (import-error)
C: 20, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 21, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 23, 0: Constant name "wsdl" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Constant name "transport" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 25, 0: Constant name "awdb" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 27, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 28, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 29, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 30, 0: Constant name "duration" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 33, 4: Constant name "updt_since" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 35, 0: Constant name "sDate" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 36, 0: Constant name "eDate" doesn't conform to UPPER_CASE naming style (invalid-name)
W: 50,53: Redefining name 'f' from outer scope (line 32) (redefined-outer-name)
C: 38, 0: Function name "getSiteData" doesn't conform to snake_case naming style (invalid-name)
C: 38, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C: 38, 0: Missing function docstring (missing-docstring)
R: 38, 0: Too many local variables (17/15) (too-many-locals)
C: 41, 8: Variable name "getUpdt" doesn't conform to snake_case naming style (invalid-name)
C: 42, 8: Variable name "chunkData" doesn't conform to snake_case naming style (invalid-name)
C: 45,12: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C: 48,16: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
C: 50,53: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
C: 52,20: Variable name "endDate" doesn't conform to snake_case naming style (invalid-name)
C: 58,24: Variable name "endDateTemp" doesn't conform to snake_case naming style (invalid-name)
C: 72,53: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
W: 88,53: Redefining name 'f' from outer scope (line 32) (redefined-outer-name)
C: 76, 0: Function name "getSiteHourlyData" doesn't conform to snake_case naming style (invalid-name)
C: 76, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C: 76, 0: Missing function docstring (missing-docstring)
R: 76, 0: Too many local variables (16/15) (too-many-locals)
C: 79, 8: Variable name "getUpdt" doesn't conform to snake_case naming style (invalid-name)
C: 80, 8: Variable name "chunkData" doesn't conform to snake_case naming style (invalid-name)
W: 80,42: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
C: 83,14: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C: 86,16: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
W: 86,68: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
C: 88,53: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
C: 93,28: Variable name "oldVal" doesn't conform to snake_case naming style (invalid-name)
C: 99,24: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
C:100,24: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
C:105,53: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
W:122,53: Redefining name 'f' from outer scope (line 32) (redefined-outer-name)
C:109, 0: Function name "getSiteSoilsData" doesn't conform to snake_case naming style (invalid-name)
C:109, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C:109, 0: Missing function docstring (missing-docstring)
R:109, 0: Too many local variables (17/15) (too-many-locals)
C:112, 8: Variable name "getUpdt" doesn't conform to snake_case naming style (invalid-name)
C:113, 8: Variable name "chunkData" doesn't conform to snake_case naming style (invalid-name)
C:116,12: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:119,16: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
W:120,45: Using possibly undefined loop variable 'depth' (undefined-loop-variable)
C:122,53: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
C:124,20: Variable name "endDate" doesn't conform to snake_case naming style (invalid-name)
C:130,24: Variable name "endDateTemp" doesn't conform to snake_case naming style (invalid-name)
C:144,53: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
W:148,15: Redefining name 'sensor' from outer scope (line 219) (redefined-outer-name)
C:148, 0: Function name "getMetData" doesn't conform to snake_case naming style (invalid-name)
C:148, 0: Missing function docstring (missing-docstring)
C:151, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:155, 4: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:158, 4: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:160, 8: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:159, 8: Unused variable 'i' (unused-variable)
W:168,18: Redefining name 'sensor' from outer scope (line 219) (redefined-outer-name)
C:168, 0: Function name "getHourlyData" doesn't conform to snake_case naming style (invalid-name)
C:168, 0: Missing function docstring (missing-docstring)
W:169,39: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
W:170,68: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
C:171, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:175, 4: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:178, 4: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:180, 8: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:179, 8: Unused variable 'i' (unused-variable)
W:188,17: Redefining name 'sensor' from outer scope (line 219) (redefined-outer-name)
W:188,24: Redefining name 'depth' from outer scope (line 225) (redefined-outer-name)
C:188, 0: Function name "getSoilsData" doesn't conform to snake_case naming style (invalid-name)
C:188, 0: Missing function docstring (missing-docstring)
W:191,24: Redefining name 'sensor' from outer scope (line 219) (redefined-outer-name)
W:191,31: Redefining name 'depth' from outer scope (line 225) (redefined-outer-name)
C:191, 0: Function name "getSoilsDataAtDepth" doesn't conform to snake_case naming style (invalid-name)
C:191, 0: Missing function docstring (missing-docstring)
C:194, 4: Variable name "heightDepths" doesn't conform to snake_case naming style (invalid-name)
C:195, 4: Variable name "heightDepth" doesn't conform to snake_case naming style (invalid-name)
C:198, 4: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:202, 4: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:205, 4: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:207, 8: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:206, 8: Unused variable 'i' (unused-variable)
W:217, 4: Using a conditional statement with a constant value (using-constant-test)
C:218, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
C:222, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
C:228, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
C:229, 8: Constant name "ordinals" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 13, 0: standard import "import datetime" should be placed before "from zeep import Client" (wrong-import-order)
C: 14, 0: standard import "from queue import Queue" should be placed before "from zeep import Client" (wrong-import-order)
C: 15, 0: standard import "from threading import Thread" should be placed before "from zeep import Client" (wrong-import-order)
C: 16, 0: third party import "import simplejson as json" should be placed before "from zeep import Client" (wrong-import-order)
C: 17, 0: standard import "import time" should be placed before "import simplejson as json" (wrong-import-order)
C: 18, 0: standard import "import glob" should be placed before "import simplejson as json" (wrong-import-order)
************* Module data.dataFetch
C: 23, 0: Exactly one space required after comma
transport = Transport(timeout=300,cache=InMemoryCache())
                                 ^ (bad-whitespace)
C: 24, 0: Exactly one space required after comma
awdb = Client(wsdl=wsdl,transport=transport,strict=False)
                       ^ (bad-whitespace)
C: 24, 0: Exactly one space required after comma
awdb = Client(wsdl=wsdl,transport=transport,strict=False)
                                           ^ (bad-whitespace)
C: 31, 0: Trailing whitespace (trailing-whitespace)
C: 31, 0: Exactly one space required after assignment
sDateHrly =  date(lastMonth.year, lastMonth.month, lastMonth.day).strftime("%Y-%m-%d")        
          ^ (bad-whitespace)
C: 38, 0: Exactly one space required after comma
def isAbove(x,elev):
             ^ (bad-whitespace)
C: 41, 0: Exactly one space required after comma
def isBelow(x,elev):
             ^ (bad-whitespace)
C: 44, 0: Exactly one space required after comma
def isYearsOld(x,yrs):
                ^ (bad-whitespace)
C: 49, 0: Exactly one space required after comma
def nonLeapDaysBetween(_sDateLeap,_eDateLeap):
                                 ^ (bad-whitespace)
C: 50, 0: Trailing whitespace (trailing-whitespace)
C: 59, 0: Exactly one space required after comma
    for t in range(sYear,eYear+1):
                        ^ (bad-whitespace)
C: 60, 0: Trailing whitespace (trailing-whitespace)
W: 60, 0: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
C: 64, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT',r'USGS']
                       ^ (bad-whitespace)
C: 64, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT',r'USGS']
                               ^ (bad-whitespace)
C: 64, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT',r'USGS']
                                        ^ (bad-whitespace)
C: 65, 0: Exactly one space required after comma
    sensors = [r"*",r"PREC",r"WTEQ",r"TAVG",r"SNWD",r"SMS",r"STO",r"BATT",
                   ^ (bad-whitespace)
C: 65, 0: Exactly one space required after comma
    sensors = [r"*",r"PREC",r"WTEQ",r"TAVG",r"SNWD",r"SMS",r"STO",r"BATT",
                           ^ (bad-whitespace)
C: 65, 0: Exactly one space required after comma
    sensors = [r"*",r"PREC",r"WTEQ",r"TAVG",r"SNWD",r"SMS",r"STO",r"BATT",
                                   ^ (bad-whitespace)
C: 65, 0: Exactly one space required after comma
    sensors = [r"*",r"PREC",r"WTEQ",r"TAVG",r"SNWD",r"SMS",r"STO",r"BATT",
                                           ^ (bad-whitespace)
C: 65, 0: Exactly one space required after comma
    sensors = [r"*",r"PREC",r"WTEQ",r"TAVG",r"SNWD",r"SMS",r"STO",r"BATT",
                                                   ^ (bad-whitespace)
C: 65, 0: Exactly one space required after comma
    sensors = [r"*",r"PREC",r"WTEQ",r"TAVG",r"SNWD",r"SMS",r"STO",r"BATT",
                                                          ^ (bad-whitespace)
C: 65, 0: Exactly one space required after comma
    sensors = [r"*",r"PREC",r"WTEQ",r"TAVG",r"SNWD",r"SMS",r"STO",r"BATT",
                                                                 ^ (bad-whitespace)
C: 69, 0: Trailing whitespace (trailing-whitespace)
C: 72, 0: Exactly one space required after comma
            forecasts = awdb.service.getForecastPoints('*','*',networks,
                                                          ^ (bad-whitespace)
C: 72, 0: Exactly one space required after comma
            forecasts = awdb.service.getForecastPoints('*','*',networks,
                                                              ^ (bad-whitespace)
C: 73, 0: Exactly one space required after comma
                                                       '*','*','*',True)
                                                          ^ (bad-whitespace)
C: 73, 0: Exactly one space required after comma
                                                       '*','*','*',True)
                                                              ^ (bad-whitespace)
C: 73, 0: Exactly one space required after comma
                                                       '*','*','*',True)
                                                                  ^ (bad-whitespace)
C: 77, 0: Wrong hanging indentation (remove 4 spaces).
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                |   ^ (bad-continuation)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                      ^ (bad-whitespace)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                          ^ (bad-whitespace)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                              ^ (bad-whitespace)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                    ^ (bad-whitespace)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                         ^ (bad-whitespace)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                               ^ (bad-whitespace)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                                    ^ (bad-whitespace)
C: 77, 0: Exactly one space required after comma
                    "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                                      ^ (bad-whitespace)
C: 78, 0: Wrong hanging indentation (remove 4 spaces).
                    sensor,1,None,True)
                |   ^ (bad-continuation)
C: 78, 0: Exactly one space required after comma
                    sensor,1,None,True)
                          ^ (bad-whitespace)
C: 78, 0: Exactly one space required after comma
                    sensor,1,None,True)
                            ^ (bad-whitespace)
C: 78, 0: Exactly one space required after comma
                    sensor,1,None,True)
                                 ^ (bad-whitespace)
C: 82, 0: Exactly one space required after comma
        meta[:] = [x for x in meta if isActive(x) and isYearsOld(x,1)]
                                                                  ^ (bad-whitespace)
C: 85, 0: Wrong continued indentation (add 7 spaces).
                           x in validTrip]
                           ^      | (bad-continuation)
C: 87, 0: Exactly one space required after comma
        makedirs(path.join(this_dir,'metaData',sensor), exist_ok=True)
                                   ^ (bad-whitespace)
C: 87, 0: Exactly one space required after comma
        makedirs(path.join(this_dir,'metaData',sensor), exist_ok=True)
                                              ^ (bad-whitespace)
C: 88, 0: Exactly one space required after comma
        fileName = path.join(this_dir,'metaData', sensor, 'stations')
                                     ^ (bad-whitespace)
C: 89, 0: Exactly one space required after comma
        with open(fileName + '.json',"w") as json_out:
                                    ^ (bad-whitespace)
C: 90, 0: Trailing whitespace (trailing-whitespace)
C: 91, 0: Exactly one space required after comma
        fileName = path.join(this_dir,'metaData', sensor, 'metaData')
                                     ^ (bad-whitespace)
C: 92, 0: Exactly one space required after comma
        with open(fileName + '.json',"w") as json_out:
                                    ^ (bad-whitespace)
C: 93, 0: Trailing whitespace (trailing-whitespace)
C: 95, 0: Trailing whitespace (trailing-whitespace)
C:100, 0: Exactly one space required after comma
    forecasts = helpers.serialize_object(awdb.service.getForecastPoints('*','*',networks,
                                                                           ^ (bad-whitespace)
C:100, 0: Exactly one space required after comma
    forecasts = helpers.serialize_object(awdb.service.getForecastPoints('*','*',networks,
                                                                               ^ (bad-whitespace)
C:101, 0: Wrong continued indentation (add 8 spaces).
                                                                '*','*','*',True))
                                                                ^       | (bad-continuation)
C:101, 0: Exactly one space required after comma
                                                                '*','*','*',True))
                                                                   ^ (bad-whitespace)
C:101, 0: Exactly one space required after comma
                                                                '*','*','*',True))
                                                                       ^ (bad-whitespace)
C:101, 0: Exactly one space required after comma
                                                                '*','*','*',True))
                                                                           ^ (bad-whitespace)
C:104, 0: Trailing whitespace (trailing-whitespace)
C:114, 0: Trailing whitespace (trailing-whitespace)
C:115, 0: Exactly one space required around assignment
    num_threads=4
               ^ (bad-whitespace)
C:116, 0: Trailing whitespace (trailing-whitespace)
C:125, 0: Trailing whitespace (trailing-whitespace)
C:136, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,'frcstEq'), exist_ok=True)
                                       ^ (bad-whitespace)
C:137, 0: Exactly one space required after comma
            fileName = path.join(this_dir,'frcstEq',
                                         ^ (bad-whitespace)
C:138, 0: Wrong continued indentation (add 1 space).
                                trip.replace(':','_'))
                                ^| (bad-continuation)
C:138, 0: Exactly one space required after comma
                                trip.replace(':','_'))
                                                ^ (bad-whitespace)
C:139, 0: Exactly one space required after comma
            with open(fileName + '.json',"w") as json_out:
                                        ^ (bad-whitespace)
C:141, 0: Trailing whitespace (trailing-whitespace)
C:149, 0: Trailing whitespace (trailing-whitespace)
C:153, 0: Exactly one space required after comma
        chunkData = awdb.service.getData(site,sensor, 1, None, duration, False,
                                             ^ (bad-whitespace)
C:154, 0: Wrong continued indentation (add 1 space).
                                        sDate, eDate, True)
                                        ^| (bad-continuation)
C:158, 0: Trailing whitespace (trailing-whitespace)
C:164, 0: Exactly one space required after comma
                    newBeginDate = dt(beginDate.year + offsetYear,10,1)
                                                                 ^ (bad-whitespace)
C:164, 0: Exactly one space required after comma
                    newBeginDate = dt(beginDate.year + offsetYear,10,1)
                                                                    ^ (bad-whitespace)
C:165, 0: Exactly one space required after comma
                    offsetNonLeap = nonLeapDaysBetween(beginDate,newBeginDate)
                                                                ^ (bad-whitespace)
C:170, 0: Trailing whitespace (trailing-whitespace)
C:171, 0: Wrong continued indentation (add 6 spaces).
                                        "%Y-%m-%d %H:%M:%S")
                                        ^     | (bad-continuation)
C:172, 0: Trailing whitespace (trailing-whitespace)
C:173, 0: Wrong continued indentation (add 10 spaces).
                                        "%Y-%m-%d %H:%M:%S")
                                        ^         | (bad-continuation)
C:174, 0: Exactly one space required after comma
                    offsetNonLeap = nonLeapDaysBetween(jsonEndDate,dataCallEndDate)
                                                                  ^ (bad-whitespace)
C:178, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,sensor), exist_ok=True)
                                       ^ (bad-whitespace)
C:179, 0: Exactly one space required after comma
            fileName = path.join(this_dir,sensor,
                                         ^ (bad-whitespace)
C:180, 0: Exactly one space required after comma
                                 siteData.stationTriplet.replace(':','_'))
                                                                    ^ (bad-whitespace)
C:181, 0: Exactly one space required after comma
            with open(fileName + '.json',"w") as json_out:
                                        ^ (bad-whitespace)
C:188, 0: Exactly one space required after comma
        chunkData = awdb.service.getInstantaneousData(site,sensor, ordinal,None,
                                                          ^ (bad-whitespace)
C:188, 0: Exactly one space required after comma
        chunkData = awdb.service.getInstantaneousData(site,sensor, ordinal,None,
                                                                          ^ (bad-whitespace)
C:189, 0: Wrong continued indentation (add 14 spaces).
                                        sDateHrly, eDate, "ALL", "ENGLISH")
                                        ^             | (bad-continuation)
C:190, 0: Exactly one space required after comma
        for i,siteData in enumerate(chunkData):
             ^ (bad-whitespace)
C:192, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,'HOURLY',sensor + str(ordinal)), exist_ok=True)
                                       ^ (bad-whitespace)
C:192, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,'HOURLY',sensor + str(ordinal)), exist_ok=True)
                                                ^ (bad-whitespace)
C:193, 0: Exactly one space required after comma
            fileName = path.join(this_dir,'HOURLY',sensor + str(ordinal),
                                         ^ (bad-whitespace)
C:193, 0: Exactly one space required after comma
            fileName = path.join(this_dir,'HOURLY',sensor + str(ordinal),
                                                  ^ (bad-whitespace)
C:194, 0: Exactly one space required after comma
                                 site[i].replace(':','_'))
                                                    ^ (bad-whitespace)
C:195, 0: Exactly one space required after comma
            with open(fileName + '.json',"w") as json_out:
                                        ^ (bad-whitespace)
C:198, 0: Trailing whitespace (trailing-whitespace)
C:202, 0: Exactly one space required after comma
        chunkData = awdb.service.getData(site[0],sensor, 1, site[1],
                                                ^ (bad-whitespace)
C:204, 0: Wrong continued indentation (add 1 space).
                                        sDate, eDate, True)
                                        ^| (bad-continuation)
C:208, 0: Trailing whitespace (trailing-whitespace)
C:214, 0: Exactly one space required after comma
                    newBeginDate = dt(beginDate.year + offsetYear,10,1)
                                                                 ^ (bad-whitespace)
C:214, 0: Exactly one space required after comma
                    newBeginDate = dt(beginDate.year + offsetYear,10,1)
                                                                    ^ (bad-whitespace)
C:215, 0: Exactly one space required after comma
                    offsetNonLeap = nonLeapDaysBetween(beginDate,newBeginDate)
                                                                ^ (bad-whitespace)
C:220, 0: Trailing whitespace (trailing-whitespace)
C:221, 0: Wrong continued indentation (add 6 spaces).
                                        "%Y-%m-%d %H:%M:%S")
                                        ^     | (bad-continuation)
C:222, 0: Trailing whitespace (trailing-whitespace)
C:223, 0: Wrong continued indentation (add 10 spaces).
                                        "%Y-%m-%d %H:%M:%S")
                                        ^         | (bad-continuation)
C:224, 0: Exactly one space required after comma
                    offsetNonLeap = nonLeapDaysBetween(jsonEndDate,dataCallEndDate)
                                                                  ^ (bad-whitespace)
C:228, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,sensor,str(abs(depth))), exist_ok=True)
                                       ^ (bad-whitespace)
C:228, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,sensor,str(abs(depth))), exist_ok=True)
                                              ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
            fileName = path.join(this_dir,sensor,str(abs(depth)),
                                         ^ (bad-whitespace)
C:229, 0: Exactly one space required after comma
            fileName = path.join(this_dir,sensor,str(abs(depth)),
                                                ^ (bad-whitespace)
C:230, 0: Exactly one space required after comma
                                 siteData.stationTriplet.replace(':','_'))
                                                                    ^ (bad-whitespace)
C:231, 0: Exactly one space required after comma
            with open(fileName + '.json',"w") as json_out:
                                        ^ (bad-whitespace)
C:240, 0: Wrong hanging indentation (remove 4 spaces).
                site,sensor,None,duration,
            |   ^ (bad-continuation)
C:240, 0: Exactly one space required after comma
                site,sensor,None,duration,
                    ^ (bad-whitespace)
C:240, 0: Exactly one space required after comma
                site,sensor,None,duration,
                           ^ (bad-whitespace)
C:240, 0: Exactly one space required after comma
                site,sensor,None,duration,
                                ^ (bad-whitespace)
C:241, 0: Wrong hanging indentation (remove 4 spaces).
                True,10,1,12,31,normType)
            |   ^ (bad-continuation)
C:241, 0: Exactly one space required after comma
                True,10,1,12,31,normType)
                    ^ (bad-whitespace)
C:241, 0: Exactly one space required after comma
                True,10,1,12,31,normType)
                       ^ (bad-whitespace)
C:241, 0: Exactly one space required after comma
                True,10,1,12,31,normType)
                         ^ (bad-whitespace)
C:241, 0: Exactly one space required after comma
                True,10,1,12,31,normType)
                            ^ (bad-whitespace)
C:241, 0: Exactly one space required after comma
                True,10,1,12,31,normType)
                               ^ (bad-whitespace)
C:243, 0: Wrong hanging indentation (remove 4 spaces).
                site,sensor,None,duration
            |   ^ (bad-continuation)
C:243, 0: Exactly one space required after comma
                site,sensor,None,duration
                    ^ (bad-whitespace)
C:243, 0: Exactly one space required after comma
                site,sensor,None,duration
                           ^ (bad-whitespace)
C:243, 0: Exactly one space required after comma
                site,sensor,None,duration
                                ^ (bad-whitespace)
C:244, 0: Wrong hanging indentation (remove 4 spaces).
                ,True,1,1,9,30,normType)
            |   ^ (bad-continuation)
C:244, 0: Exactly one space required after comma
                ,True,1,1,9,30,normType)
                ^ (bad-whitespace)
C:244, 0: Exactly one space required after comma
                ,True,1,1,9,30,normType)
                     ^ (bad-whitespace)
C:244, 0: Exactly one space required after comma
                ,True,1,1,9,30,normType)
                       ^ (bad-whitespace)
C:244, 0: Exactly one space required after comma
                ,True,1,1,9,30,normType)
                         ^ (bad-whitespace)
C:244, 0: Exactly one space required after comma
                ,True,1,1,9,30,normType)
                           ^ (bad-whitespace)
C:244, 0: Exactly one space required after comma
                ,True,1,1,9,30,normType)
                              ^ (bad-whitespace)
C:245, 0: Trailing whitespace (trailing-whitespace)
C:246, 0: Trailing whitespace (trailing-whitespace)
C:246, 0: Exactly one space required after comma
        for i,siteData in enumerate(chunkData1):  
             ^ (bad-whitespace)
C:249, 0: Exactly one space required after comma
            if hasattr(siteData,'values'):
                               ^ (bad-whitespace)
C:253, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,r'norms',sensor), exist_ok=True)
                                       ^ (bad-whitespace)
C:253, 0: Exactly one space required after comma
            makedirs(path.join(this_dir,r'norms',sensor), exist_ok=True)
                                                ^ (bad-whitespace)
C:254, 0: Exactly one space required after comma
            fileName = path.join(this_dir,r'norms',
                                         ^ (bad-whitespace)
C:255, 0: Exactly one space required after comma
                                 sensor,site[i].replace(':','_'))
                                       ^ (bad-whitespace)
C:255, 0: Exactly one space required after comma
                                 sensor,site[i].replace(':','_'))
                                                           ^ (bad-whitespace)
C:256, 0: Exactly one space required after comma
            with open(fileName + '.json',"w") as json_out:
                                        ^ (bad-whitespace)
C:263, 0: Exactly one space required after comma
    forecasts = awdb.service.getForecastPoints('*','*',networks,'*',
                                                  ^ (bad-whitespace)
C:263, 0: Exactly one space required after comma
    forecasts = awdb.service.getForecastPoints('*','*',networks,'*',
                                                      ^ (bad-whitespace)
C:263, 0: Exactly one space required after comma
    forecasts = awdb.service.getForecastPoints('*','*',networks,'*',
                                                               ^ (bad-whitespace)
C:264, 0: Exactly one space required after comma
                                               '*','*',True)
                                                  ^ (bad-whitespace)
C:264, 0: Exactly one space required after comma
                                               '*','*',True)
                                                      ^ (bad-whitespace)
C:269, 0: Wrong continued indentation (add 7 spaces).
            isBelow(x,30000) and isYearsOld(x,1)]
            ^      | (bad-continuation)
C:269, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                     ^ (bad-whitespace)
C:269, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                                             ^ (bad-whitespace)
C:272, 0: Trailing whitespace (trailing-whitespace)
C:274, 0: Trailing whitespace (trailing-whitespace)
C:275, 0: Exactly one space required around assignment
        num_threads=4
                   ^ (bad-whitespace)
C:276, 0: Trailing whitespace (trailing-whitespace)
C:288, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C:288, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C:290, 0: Wrong hanging indentation (remove 4 spaces).
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
        |   ^ (bad-continuation)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                              ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                  ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                      ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                            ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                 ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                       ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                            ^ (bad-whitespace)
C:290, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                              ^ (bad-whitespace)
C:291, 0: Wrong hanging indentation (remove 4 spaces).
            sensor,1,None,True)
        |   ^ (bad-continuation)
C:291, 0: Exactly one space required after comma
            sensor,1,None,True)
                  ^ (bad-whitespace)
C:291, 0: Exactly one space required after comma
            sensor,1,None,True)
                    ^ (bad-whitespace)
C:291, 0: Exactly one space required after comma
            sensor,1,None,True)
                         ^ (bad-whitespace)
C:295, 0: Wrong continued indentation (add 7 spaces).
            isBelow(x,30000) and isYearsOld(x,1)]
            ^      | (bad-continuation)
C:295, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                     ^ (bad-whitespace)
C:295, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                                             ^ (bad-whitespace)
C:298, 0: Trailing whitespace (trailing-whitespace)
C:300, 0: Trailing whitespace (trailing-whitespace)
C:301, 0: Exactly one space required around assignment
        num_threads=4
                   ^ (bad-whitespace)
C:302, 0: Trailing whitespace (trailing-whitespace)
C:314, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C:314, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C:316, 0: Wrong hanging indentation (remove 4 spaces).
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
        |   ^ (bad-continuation)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                              ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                  ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                      ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                            ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                 ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                       ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                            ^ (bad-whitespace)
C:316, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                              ^ (bad-whitespace)
C:317, 0: Wrong hanging indentation (remove 4 spaces).
            sensor,1,None,True)
        |   ^ (bad-continuation)
C:317, 0: Exactly one space required after comma
            sensor,1,None,True)
                  ^ (bad-whitespace)
C:317, 0: Exactly one space required after comma
            sensor,1,None,True)
                    ^ (bad-whitespace)
C:317, 0: Exactly one space required after comma
            sensor,1,None,True)
                         ^ (bad-whitespace)
C:321, 0: Wrong continued indentation (add 7 spaces).
            isBelow(x,30000) and isYearsOld(x,1)]
            ^      | (bad-continuation)
C:321, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                     ^ (bad-whitespace)
C:321, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                                             ^ (bad-whitespace)
C:324, 0: Trailing whitespace (trailing-whitespace)
C:326, 0: Trailing whitespace (trailing-whitespace)
C:327, 0: Exactly one space required around assignment
        num_threads=4
                   ^ (bad-whitespace)
C:328, 0: Trailing whitespace (trailing-whitespace)
C:337, 0: Trailing whitespace (trailing-whitespace)
C:340, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C:340, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C:342, 0: Wrong hanging indentation (remove 4 spaces).
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
        |   ^ (bad-continuation)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                              ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                  ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                      ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                            ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                 ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                       ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                            ^ (bad-whitespace)
C:342, 0: Exactly one space required after comma
            "*", "*", networks,"*","*",-1000,1000,-1000,1000,0,29000,
                                                              ^ (bad-whitespace)
C:343, 0: Wrong hanging indentation (remove 4 spaces).
            sensor,1,None,True)
        |   ^ (bad-continuation)
C:343, 0: Exactly one space required after comma
            sensor,1,None,True)
                  ^ (bad-whitespace)
C:343, 0: Exactly one space required after comma
            sensor,1,None,True)
                    ^ (bad-whitespace)
C:343, 0: Exactly one space required after comma
            sensor,1,None,True)
                         ^ (bad-whitespace)
C:347, 0: Wrong continued indentation (add 7 spaces).
            isBelow(x,30000) and isYearsOld(x,1)]
            ^      | (bad-continuation)
C:347, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                     ^ (bad-whitespace)
C:347, 0: Exactly one space required after comma
            isBelow(x,30000) and isYearsOld(x,1)]
                                             ^ (bad-whitespace)
C:350, 0: Trailing whitespace (trailing-whitespace)
C:352, 0: Trailing whitespace (trailing-whitespace)
C:353, 0: Exactly one space required around assignment
        num_threads=4
                   ^ (bad-whitespace)
C:354, 0: Trailing whitespace (trailing-whitespace)
C:364, 0: Exactly one space required after comma
def getSoilsData(sensor,depth):
                       ^ (bad-whitespace)
C:365, 0: Exactly one space required after comma
    getSoilsDataAtDepth(sensor,depth)
                              ^ (bad-whitespace)
C:366, 0: Trailing whitespace (trailing-whitespace)
C:367, 0: Exactly one space required after comma
def getSoilsDataAtDepth(sensor,depth):
                              ^ (bad-whitespace)
C:368, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                       ^ (bad-whitespace)
C:368, 0: Exactly one space required after comma
    networks = [r'SNTL',r'SCAN',r'SNTLT']
                               ^ (bad-whitespace)
C:372, 0: Trailing whitespace (trailing-whitespace)
C:374, 0: Exactly one space required after comma
    stations = awdb.service.getStations("*", "*", networks,"*","*",
                                                          ^ (bad-whitespace)
C:374, 0: Exactly one space required after comma
    stations = awdb.service.getStations("*", "*", networks,"*","*",
                                                              ^ (bad-whitespace)
C:375, 0: Exactly one space required after comma
                                        -1000,1000,-1000,1000,0,29000,
                                             ^ (bad-whitespace)
C:375, 0: Exactly one space required after comma
                                        -1000,1000,-1000,1000,0,29000,
                                                  ^ (bad-whitespace)
C:375, 0: Exactly one space required after comma
                                        -1000,1000,-1000,1000,0,29000,
                                                        ^ (bad-whitespace)
C:375, 0: Exactly one space required after comma
                                        -1000,1000,-1000,1000,0,29000,
                                                             ^ (bad-whitespace)
C:375, 0: Exactly one space required after comma
                                        -1000,1000,-1000,1000,0,29000,
                                                               ^ (bad-whitespace)
C:376, 0: Exactly one space required after comma
                                        sensor,1,None,True)
                                              ^ (bad-whitespace)
C:376, 0: Exactly one space required after comma
                                        sensor,1,None,True)
                                                ^ (bad-whitespace)
C:376, 0: Exactly one space required after comma
                                        sensor,1,None,True)
                                                     ^ (bad-whitespace)
C:380, 0: Wrong continued indentation (remove 1 space).
                    isBelow(x,30000) and isYearsOld(x,1)] 
                   |^ (bad-continuation)
C:380, 0: Trailing whitespace (trailing-whitespace)
C:380, 0: Exactly one space required after comma
                    isBelow(x,30000) and isYearsOld(x,1)] 
                             ^ (bad-whitespace)
C:380, 0: Exactly one space required after comma
                    isBelow(x,30000) and isYearsOld(x,1)] 
                                                     ^ (bad-whitespace)
C:383, 0: Trailing whitespace (trailing-whitespace)
C:385, 0: Trailing whitespace (trailing-whitespace)
C:386, 0: Exactly one space required around assignment
        num_threads=4
                   ^ (bad-whitespace)
C:387, 0: Trailing whitespace (trailing-whitespace)
C:393, 0: Exactly one space required after comma
            q.put([sites,heightDepth])
                        ^ (bad-whitespace)
C:395, 0: Line too long (106/100) (line-too-long)
C:396, 0: Trailing whitespace (trailing-whitespace)
C:402, 0: Exactly one space required after comma
        sensors = [r"PREC",r"WTEQ"]
                          ^ (bad-whitespace)
C:407, 0: Trailing whitespace (trailing-whitespace)
C:409, 0: Exactly one space required after comma
        sensors = [r"PREC",r"WTEQ",r"TAVG",r"SNWD"]
                          ^ (bad-whitespace)
C:409, 0: Exactly one space required after comma
        sensors = [r"PREC",r"WTEQ",r"TAVG",r"SNWD"]
                                  ^ (bad-whitespace)
C:409, 0: Exactly one space required after comma
        sensors = [r"PREC",r"WTEQ",r"TAVG",r"SNWD"]
                                          ^ (bad-whitespace)
C:412, 0: Trailing whitespace (trailing-whitespace)
C:413, 0: Exactly one space required after comma
        sensors = [r"SMS",r"STO"]
                         ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                        ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                           ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                              ^ (bad-whitespace)
C:415, 0: Exactly one space required after comma
            depths = [-2,-4,-8,-20,-40]
                                  ^ (bad-whitespace)
C:417, 0: Exactly one space required after comma
                getSoilsData(sensor,depth)
                                   ^ (bad-whitespace)
C:418, 0: Trailing whitespace (trailing-whitespace)
C:422, 0: Trailing whitespace (trailing-whitespace)
C:427, 0: Trailing whitespace (trailing-whitespace)
C:428, 0: Trailing whitespace (trailing-whitespace)
C:429, 0: Exactly one space required after comma
        with open(path.join(this_dir,'lastCall.txt'), 'w') as f:
                                    ^ (bad-whitespace)
C:432, 0: Final newline missing (missing-final-newline)
C:  1, 0: Module name "dataFetch" doesn't conform to snake_case naming style (invalid-name)
E:  9, 0: Unable to import 'zeep' (import-error)
E: 10, 0: Unable to import 'zeep.transports' (import-error)
E: 11, 0: Unable to import 'zeep.cache' (import-error)
E: 12, 0: Unable to import 'zeep' (import-error)
C: 19, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 20, 0: Constant name "master_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 22, 0: Constant name "wsdl" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 23, 0: Constant name "transport" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Constant name "awdb" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 26, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 27, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 28, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 29, 0: Constant name "lastMonth" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 30, 0: Constant name "sDate" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 31, 0: Constant name "sDateHrly" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 32, 0: Constant name "eDate" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 33, 0: Constant name "duration" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 35, 0: Function name "isActive" doesn't conform to snake_case naming style (invalid-name)
C: 35, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 35, 0: Missing function docstring (missing-docstring)
R: 35, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 38, 0: Function name "isAbove" doesn't conform to snake_case naming style (invalid-name)
C: 38, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 38, 0: Missing function docstring (missing-docstring)
R: 38, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 41, 0: Function name "isBelow" doesn't conform to snake_case naming style (invalid-name)
C: 41, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 41, 0: Missing function docstring (missing-docstring)
R: 41, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 44, 0: Function name "isYearsOld" doesn't conform to snake_case naming style (invalid-name)
C: 44, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 44, 0: Missing function docstring (missing-docstring)
C: 45, 4: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
C: 46, 4: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
R: 44, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 49, 0: Function name "nonLeapDaysBetween" doesn't conform to snake_case naming style (invalid-name)
C: 49, 0: Argument name "_sDateLeap" doesn't conform to snake_case naming style (invalid-name)
C: 49, 0: Argument name "_eDateLeap" doesn't conform to snake_case naming style (invalid-name)
C: 49, 0: Missing function docstring (missing-docstring)
C: 50, 4: Variable name "nonLeapDays" doesn't conform to snake_case naming style (invalid-name)
C: 52, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 54, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 56, 8: Variable name "eYear" doesn't conform to snake_case naming style (invalid-name)
C: 58, 8: Variable name "eYear" doesn't conform to snake_case naming style (invalid-name)
C: 59, 8: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
C: 60,34: More than one statement on a single line (multiple-statements)
C: 60,34: Variable name "nonLeapDays" doesn't conform to snake_case naming style (invalid-name)
W: 65, 4: Redefining name 'sensors' from outer scope (line 402) (redefined-outer-name)
W: 67, 8: Redefining name 'sensor' from outer scope (line 403) (redefined-outer-name)
C: 63, 0: Function name "getMetaData" doesn't conform to snake_case naming style (invalid-name)
C: 63, 0: Missing function docstring (missing-docstring)
C: 68, 8: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C: 79,27: More than one statement on a single line (multiple-statements)
C: 83, 8: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C: 88, 8: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
C: 91, 8: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
C: 96, 0: Function name "getForecastEquations" doesn't conform to snake_case naming style (invalid-name)
C: 96, 0: Missing function docstring (missing-docstring)
C: 97, 4: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:116, 4: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:118, 8: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:117, 8: Unused variable 'i' (unused-variable)
C:126, 0: Function name "getEquations" doesn't conform to snake_case naming style (invalid-name)
C:126, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C:126, 0: Missing function docstring (missing-docstring)
C:133,16: Variable name "eq" doesn't conform to snake_case naming style (invalid-name)
C:137,12: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
C:150, 0: Function name "getSiteData" doesn't conform to snake_case naming style (invalid-name)
C:150, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C:150, 0: Missing function docstring (missing-docstring)
C:153, 8: Variable name "chunkData" doesn't conform to snake_case naming style (invalid-name)
C:155,12: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:158,16: Variable name "beginDate" doesn't conform to snake_case naming style (invalid-name)
C:160,16: Variable name "endDate" doesn't conform to snake_case naming style (invalid-name)
C:162,20: Variable name "offsetYear" doesn't conform to snake_case naming style (invalid-name)
C:163,44: More than one statement on a single line (multiple-statements)
C:163,44: Variable name "offsetYear" doesn't conform to snake_case naming style (invalid-name)
C:164,20: Variable name "newBeginDate" doesn't conform to snake_case naming style (invalid-name)
C:165,20: Variable name "offsetNonLeap" doesn't conform to snake_case naming style (invalid-name)
C:166,20: Variable name "deltaDate" doesn't conform to snake_case naming style (invalid-name)
C:170,20: Variable name "jsonEndDate" doesn't conform to snake_case naming style (invalid-name)
C:172,20: Variable name "dataCallEndDate" doesn't conform to snake_case naming style (invalid-name)
C:174,20: Variable name "offsetNonLeap" doesn't conform to snake_case naming style (invalid-name)
C:175,20: Variable name "deltaDate" doesn't conform to snake_case naming style (invalid-name)
C:179,12: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
C:185, 0: Function name "getSiteHourlyData" doesn't conform to snake_case naming style (invalid-name)
C:185, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C:185, 0: Missing function docstring (missing-docstring)
C:188, 8: Variable name "chunkData" doesn't conform to snake_case naming style (invalid-name)
W:188,67: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
C:190,14: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
W:192,62: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
C:193,12: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
W:193,64: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
C:199, 0: Function name "getSiteSoilsData" doesn't conform to snake_case naming style (invalid-name)
C:199, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C:199, 0: Missing function docstring (missing-docstring)
C:202, 8: Variable name "chunkData" doesn't conform to snake_case naming style (invalid-name)
C:205,12: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:208,16: Variable name "beginDate" doesn't conform to snake_case naming style (invalid-name)
C:210,16: Variable name "endDate" doesn't conform to snake_case naming style (invalid-name)
C:212,20: Variable name "offsetYear" doesn't conform to snake_case naming style (invalid-name)
C:213,44: More than one statement on a single line (multiple-statements)
C:213,44: Variable name "offsetYear" doesn't conform to snake_case naming style (invalid-name)
C:214,20: Variable name "newBeginDate" doesn't conform to snake_case naming style (invalid-name)
C:215,20: Variable name "offsetNonLeap" doesn't conform to snake_case naming style (invalid-name)
C:216,20: Variable name "deltaDate" doesn't conform to snake_case naming style (invalid-name)
C:220,20: Variable name "jsonEndDate" doesn't conform to snake_case naming style (invalid-name)
C:222,20: Variable name "dataCallEndDate" doesn't conform to snake_case naming style (invalid-name)
C:224,20: Variable name "offsetNonLeap" doesn't conform to snake_case naming style (invalid-name)
C:225,20: Variable name "deltaDate" doesn't conform to snake_case naming style (invalid-name)
W:228,55: Using possibly undefined loop variable 'depth' (undefined-loop-variable)
C:229,12: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
W:229,57: Using possibly undefined loop variable 'depth' (undefined-loop-variable)
C:235, 0: Function name "getNormData" doesn't conform to snake_case naming style (invalid-name)
C:235, 0: Argument name "q" doesn't conform to snake_case naming style (invalid-name)
C:235, 0: Missing function docstring (missing-docstring)
C:236, 4: Variable name "normType" doesn't conform to snake_case naming style (invalid-name)
C:239, 8: Variable name "chunkData1" doesn't conform to snake_case naming style (invalid-name)
C:242, 8: Variable name "chunkData2" doesn't conform to snake_case naming style (invalid-name)
C:246,14: Variable name "siteData" doesn't conform to snake_case naming style (invalid-name)
C:247,12: Variable name "c1" doesn't conform to snake_case naming style (invalid-name)
C:248,12: Variable name "c2" doesn't conform to snake_case naming style (invalid-name)
C:254,12: Variable name "fileName" doesn't conform to snake_case naming style (invalid-name)
W:260,22: Redefining name 'sensor' from outer scope (line 403) (redefined-outer-name)
C:260, 0: Function name "getStreamflowData" doesn't conform to snake_case naming style (invalid-name)
C:260, 0: Missing function docstring (missing-docstring)
C:270, 8: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:273, 8: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:276, 8: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:278,12: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:277,12: Unused variable 'i' (unused-variable)
W:286,15: Redefining name 'sensor' from outer scope (line 403) (redefined-outer-name)
C:286, 0: Function name "getMetData" doesn't conform to snake_case naming style (invalid-name)
C:286, 0: Missing function docstring (missing-docstring)
C:296, 8: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:299, 8: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:302, 8: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:304,12: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:303,12: Unused variable 'i' (unused-variable)
W:312,18: Redefining name 'sensor' from outer scope (line 403) (redefined-outer-name)
C:312, 0: Function name "getHourlyData" doesn't conform to snake_case naming style (invalid-name)
C:312, 0: Missing function docstring (missing-docstring)
W:313,39: Using possibly undefined loop variable 'ordinal' (undefined-loop-variable)
C:322, 8: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:325, 8: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:328, 8: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:330,12: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:329,12: Unused variable 'i' (unused-variable)
W:338,19: Redefining name 'sensor' from outer scope (line 403) (redefined-outer-name)
C:338, 0: Function name "getMetNormData" doesn't conform to snake_case naming style (invalid-name)
C:338, 0: Missing function docstring (missing-docstring)
C:348, 8: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:351, 8: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:354, 8: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:356,12: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:355,12: Unused variable 'i' (unused-variable)
W:364,17: Redefining name 'sensor' from outer scope (line 403) (redefined-outer-name)
W:364,24: Redefining name 'depth' from outer scope (line 416) (redefined-outer-name)
C:364, 0: Function name "getSoilsData" doesn't conform to snake_case naming style (invalid-name)
C:364, 0: Missing function docstring (missing-docstring)
W:367,24: Redefining name 'sensor' from outer scope (line 403) (redefined-outer-name)
W:367,31: Redefining name 'depth' from outer scope (line 416) (redefined-outer-name)
C:367, 0: Function name "getSoilsDataAtDepth" doesn't conform to snake_case naming style (invalid-name)
C:367, 0: Missing function docstring (missing-docstring)
C:371, 4: Variable name "heightDepths" doesn't conform to snake_case naming style (invalid-name)
C:372, 4: Variable name "heightDepth" doesn't conform to snake_case naming style (invalid-name)
C:381, 8: Variable name "validTrip" doesn't conform to snake_case naming style (invalid-name)
C:384, 8: Variable name "bt" doesn't conform to snake_case naming style (invalid-name)
C:387, 8: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
C:389,12: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
W:388,12: Unused variable 'i' (unused-variable)
C:402, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
W:408, 4: Using a conditional statement with a constant value (using-constant-test)
C:409, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
C:413, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
C:419, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
C:423, 8: Constant name "sensors" doesn't conform to UPPER_CASE naming style (invalid-name)
C:424, 8: Constant name "ordinals" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 13, 0: standard import "import datetime" should be placed before "from zeep import Client" (wrong-import-order)
C: 14, 0: standard import "from queue import Queue" should be placed before "from zeep import Client" (wrong-import-order)
C: 15, 0: standard import "from threading import Thread" should be placed before "from zeep import Client" (wrong-import-order)
C: 16, 0: third party import "import simplejson as json" should be placed before "from zeep import Client" (wrong-import-order)
C: 17, 0: standard import "import time" should be placed before "import simplejson as json" (wrong-import-order)
C: 18, 0: standard import "import calendar as cal" should be placed before "import simplejson as json" (wrong-import-order)
************* Module lib
C:  7, 0: Trailing newlines (trailing-newlines)
************* Module lib.constants
C:  1, 0: Final newline missing (missing-final-newline)
C:  1, 0: Exactly one space required after comma
NETWORKS = [r'SNTL',r'SCAN',r'SNTLT']
                   ^ (bad-whitespace)
C:  1, 0: Exactly one space required after comma
NETWORKS = [r'SNTL',r'SCAN',r'SNTLT']
                           ^ (bad-whitespace)
C:  1, 0: Missing module docstring (missing-docstring)
************* Module lib.keys
C:  2, 0: Final newline missing (missing-final-newline)
C:  2, 0: Line too long (101/100) (line-too-long)
W:  2, 0: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
C:  1, 0: Missing module docstring (missing-docstring)
C:  1, 0: Missing function docstring (missing-docstring)
************* Module lib.awdbToolsJson
C: 31, 0: Trailing whitespace (trailing-whitespace)
C: 32, 0: Exactly one space required after comma
def isAbove(x,elev):
             ^ (bad-whitespace)
C: 35, 0: Trailing whitespace (trailing-whitespace)
C: 36, 0: Exactly one space required after comma
def isBelow(x,elev):
             ^ (bad-whitespace)
C: 39, 0: Trailing whitespace (trailing-whitespace)
C: 40, 0: Exactly one space required after comma
def isYearsOld(x,yrs):
                ^ (bad-whitespace)
C: 45, 0: Trailing whitespace (trailing-whitespace)
C: 51, 0: Exactly one space required after comma
    return "%d%s" % (n,"tsnrhtdd"[(math.floor(n//10)%10!=1)*(n%10<4)*n%10::4])
                      ^ (bad-whitespace)
C: 51, 0: Exactly one space required around comparison
    return "%d%s" % (n,"tsnrhtdd"[(math.floor(n//10)%10!=1)*(n%10<4)*n%10::4])
                                                       ^^ (bad-whitespace)
C: 51, 0: Exactly one space required around comparison
    return "%d%s" % (n,"tsnrhtdd"[(math.floor(n//10)%10!=1)*(n%10<4)*n%10::4])
                                                                 ^ (bad-whitespace)
C: 53, 0: Exactly one space required after comma
def fillMissingData(x,daysBack):
                     ^ (bad-whitespace)
C: 63, 0: Trailing whitespace (trailing-whitespace)
C: 64, 0: Wrong continued indentation (add 7 spaces).
         pd.DataFrame(y).interpolate().values.ravel().tolist())
         ^      | (bad-continuation)
C: 66, 0: Trailing whitespace (trailing-whitespace)
C: 67, 0: Exactly one space required after comma
def nonLeapDaysBetween(_sDateLeap,_eDateLeap):
                                 ^ (bad-whitespace)
C: 68, 0: Trailing whitespace (trailing-whitespace)
C: 77, 0: Exactly one space required after comma
    for t in range(sYear,eYear+1):
                        ^ (bad-whitespace)
C: 78, 0: Trailing whitespace (trailing-whitespace)
C: 81, 0: Exactly one space required after comma
def padMissingData(x,_sDate,_eDate):
                    ^ (bad-whitespace)
C: 81, 0: Exactly one space required after comma
def padMissingData(x,_sDate,_eDate):
                           ^ (bad-whitespace)
C: 83, 0: Trailing whitespace (trailing-whitespace)
C: 84, 0: Exactly one space required after comma
    eDateChkSite = dt.strptime(x['endDate'],"%Y-%m-%d %H:%M:%S").date()
                                           ^ (bad-whitespace)
C: 85, 0: Exactly one space required after comma
    eDateChkBasin = dt.strptime(_eDate,"%Y-%m-%d").date()
                                      ^ (bad-whitespace)
C: 87, 0: Trailing whitespace (trailing-whitespace)
C: 91, 0: Wrong hanging indentation (remove 4 spaces).
            x['beginDate'],"%Y-%m-%d %H:%M:%S").date()
        |   ^ (bad-continuation)
C: 91, 0: Exactly one space required after comma
            x['beginDate'],"%Y-%m-%d %H:%M:%S").date()
                          ^ (bad-whitespace)
C: 92, 0: Exactly one space required after assignment
    sDateChkBasin =dt.strptime(_sDate,"%Y-%m-%d").date()
                  ^ (bad-whitespace)
C: 92, 0: Exactly one space required after comma
    sDateChkBasin =dt.strptime(_sDate,"%Y-%m-%d").date()
                                     ^ (bad-whitespace)
C: 94, 0: Trailing whitespace (trailing-whitespace)
C: 97, 0: Trailing whitespace (trailing-whitespace)
C: 98, 0: Trailing whitespace (trailing-whitespace)
C: 99, 0: Exactly one space required after comma
                 nonLeapDaysBetween(sDateChkSite,sDateChkBasin))
                                                ^ (bad-whitespace)
C:103, 0: Exactly one space required after comma
def createPRECProjTrace(i,jDay,lastValue,nanList):
                         ^ (bad-whitespace)
C:103, 0: Exactly one space required after comma
def createPRECProjTrace(i,jDay,lastValue,nanList):
                              ^ (bad-whitespace)
C:103, 0: Exactly one space required after comma
def createPRECProjTrace(i,jDay,lastValue,nanList):
                                        ^ (bad-whitespace)
W:106, 0: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
C:116, 0: Exactly one space required after comma
def createSWEProjTrace(i,jDay,lastValue,nanList):
                        ^ (bad-whitespace)
C:116, 0: Exactly one space required after comma
def createSWEProjTrace(i,jDay,lastValue,nanList):
                             ^ (bad-whitespace)
C:116, 0: Exactly one space required after comma
def createSWEProjTrace(i,jDay,lastValue,nanList):
                                       ^ (bad-whitespace)
W:119, 0: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
C:124, 0: Exactly one space required after comma
        for index,day in enumerate(dailyData[peakSWEday:]):
                 ^ (bad-whitespace)
C:130, 0: Trailing whitespace (trailing-whitespace)
C:131, 0: Wrong continued indentation (add 23 spaces).
                          lastValue or jDay < peakSWEday else np.nan for x in projection]
                          ^                      | (bad-continuation)
C:134, 0: Exactly one space required after comma
            for t in range(0,366-len(projTrace)):
                            ^ (bad-whitespace)
C:143, 0: Trailing whitespace (trailing-whitespace)
C:144, 0: Trailing whitespace (trailing-whitespace)
C:145, 0: Exactly one space required after comma
def getBasinSites(basinName,basinTable):
                           ^ (bad-whitespace)
C:152, 0: Trailing whitespace (trailing-whitespace)
C:169, 0: Wrong continued indentation (add 7 spaces).
                 np.nan for x in sms40]
                 ^      | (bad-continuation)
C:171, 0: Wrong continued indentation (add 7 spaces).
                 np.nan for x in sms20]
                 ^      | (bad-continuation)
C:173, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:175, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:177, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:178, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                ^ (bad-whitespace)
C:178, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                      ^ (bad-whitespace)
C:178, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                           ^ (bad-whitespace)
C:178, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                                ^ (bad-whitespace)
C:182, 0: Wrong continued indentation (add 7 spaces).
                 np.nan for x in sms20]
                 ^      | (bad-continuation)
C:184, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:186, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:187, 0: Exactly one space required after comma
            smsAll = list([sms20,sms8,sms2])
                                ^ (bad-whitespace)
C:187, 0: Exactly one space required after comma
            smsAll = list([sms20,sms8,sms2])
                                     ^ (bad-whitespace)
C:191, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:193, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:194, 0: Exactly one space required after comma
            smsAll = list([sms8,sms2])
                               ^ (bad-whitespace)
C:198, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:200, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:201, 0: Exactly one space required after comma
            smsAll = list([sms8,sms20])
                               ^ (bad-whitespace)
C:205, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:207, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:208, 0: Exactly one space required after comma
            smsAll = list([sms2,sms20])
                               ^ (bad-whitespace)
C:219, 0: Trailing whitespace (trailing-whitespace)
C:227, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:229, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:230, 0: Exactly one space required after comma
            smsAll = list([sms8,sms20])
                               ^ (bad-whitespace)
C:234, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:238, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:257, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:259, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:261, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:262, 0: Exactly one space required after comma
            smsAll = list([sms8,sms4,sms2])
                               ^ (bad-whitespace)
C:262, 0: Exactly one space required after comma
            smsAll = list([sms8,sms4,sms2])
                                    ^ (bad-whitespace)
C:266, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:268, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:269, 0: Exactly one space required after comma
            smsAll = list([sms8,sms2])
                               ^ (bad-whitespace)
C:273, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:275, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:276, 0: Exactly one space required after comma
            smsAll = list([sms4,sms2])
                               ^ (bad-whitespace)
C:280, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:282, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:283, 0: Exactly one space required after comma
            smsAll = list([sms8,sms4])
                               ^ (bad-whitespace)
C:287, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:291, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:295, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:302, 0: Exactly one space required after comma
def getSaturation(depth,triplet,default=40):
                       ^ (bad-whitespace)
C:302, 0: Exactly one space required after comma
def getSaturation(depth,triplet,default=40):
                               ^ (bad-whitespace)
C:305, 0: Exactly one space required after comma
    with open(os.path.join(static_dir,'soilsSat.csv'), 'r') as data_file:
                                     ^ (bad-whitespace)
C:316, 0: Trailing whitespace (trailing-whitespace)
C:326, 0: Trailing whitespace (trailing-whitespace)
C:330, 0: Exactly one space required after comma
    with open(os.path.join(static_dir,'basinDef.csv'), 'r') as data_file:
                                     ^ (bad-whitespace)
C:352, 0: Exactly one space required after comma
        geojson_path = (os.path.join(static_dir,'GIS/huc' + hucLength + r'.json'))
                                               ^ (bad-whitespace)
C:358, 0: Exactly one space required after comma
            geojson_path = (os.path.join(static_dir,'GIS/huc' + hucLength + r'.json'))
                                                   ^ (bad-whitespace)
C:362, 0: Wrong continued indentation (add 3 spaces).
                    d['properties'].get('HUC' + hucLength) == huc]
                    ^  | (bad-continuation)
C:367, 0: Exactly one space required after comma
    sDate = dt.strptime(data['beginDate'],"%Y-%m-%d %H:%M:%S")
                                         ^ (bad-whitespace)
C:368, 0: Trailing whitespace (trailing-whitespace)
C:372, 0: Exactly one space required after comma
    oct1 = dt(WY,10,1)
                ^ (bad-whitespace)
C:372, 0: Exactly one space required after comma
    oct1 = dt(WY,10,1)
                   ^ (bad-whitespace)
C:373, 0: Exactly one space required after comma
    diff = (oct1 - sDate).days + nonLeapDaysBetween(sDate,oct1)
                                                         ^ (bad-whitespace)
C:380, 0: Wrong hanging indentation (remove 4 spaces).
        'AK': 'AstatesLonglaska',
    |   ^ (bad-continuation)
C:381, 0: Wrong hanging indentation (remove 4 spaces).
        'AL': 'Alabama',
    |   ^ (bad-continuation)
C:382, 0: Wrong hanging indentation (remove 4 spaces).
        'AR': 'Arkansas',
    |   ^ (bad-continuation)
C:383, 0: Wrong hanging indentation (remove 4 spaces).
        'AS': 'American Samoa',
    |   ^ (bad-continuation)
C:384, 0: Wrong hanging indentation (remove 4 spaces).
        'AZ': 'Arizona',
    |   ^ (bad-continuation)
C:385, 0: Wrong hanging indentation (remove 4 spaces).
        'CA': 'Eastern Sierra',
    |   ^ (bad-continuation)
C:386, 0: Wrong hanging indentation (remove 4 spaces).
        'CO': 'Colorado',
    |   ^ (bad-continuation)
C:387, 0: Wrong hanging indentation (remove 4 spaces).
        'CT': 'Connecticut',
    |   ^ (bad-continuation)
C:388, 0: Wrong hanging indentation (remove 4 spaces).
        'DC': 'District of Columbia',
    |   ^ (bad-continuation)
C:389, 0: Wrong hanging indentation (remove 4 spaces).
        'DE': 'Delaware',
    |   ^ (bad-continuation)
C:390, 0: Wrong hanging indentation (remove 4 spaces).
        'FL': 'Florida',
    |   ^ (bad-continuation)
C:391, 0: Wrong hanging indentation (remove 4 spaces).
        'GA': 'Georgia',
    |   ^ (bad-continuation)
C:392, 0: Wrong hanging indentation (remove 4 spaces).
        'GU': 'Guam',
    |   ^ (bad-continuation)
C:393, 0: Wrong hanging indentation (remove 4 spaces).
        'HI': 'Hawaii',
    |   ^ (bad-continuation)
C:394, 0: Wrong hanging indentation (remove 4 spaces).
        'IA': 'Iowa',
    |   ^ (bad-continuation)
C:395, 0: Wrong hanging indentation (remove 4 spaces).
        'ID': 'Idaho',
    |   ^ (bad-continuation)
C:396, 0: Wrong hanging indentation (remove 4 spaces).
        'IL': 'Illinois',
    |   ^ (bad-continuation)
C:397, 0: Wrong hanging indentation (remove 4 spaces).
        'IN': 'Indiana',
    |   ^ (bad-continuation)
C:398, 0: Wrong hanging indentation (remove 4 spaces).
        'KS': 'Kansas',
    |   ^ (bad-continuation)
C:399, 0: Wrong hanging indentation (remove 4 spaces).
        'KY': 'Kentucky',
    |   ^ (bad-continuation)
C:400, 0: Wrong hanging indentation (remove 4 spaces).
        'LA': 'Louisiana',
    |   ^ (bad-continuation)
C:401, 0: Wrong hanging indentation (remove 4 spaces).
        'MA': 'Massachusetts',
    |   ^ (bad-continuation)
C:402, 0: Wrong hanging indentation (remove 4 spaces).
        'MD': 'Maryland',
    |   ^ (bad-continuation)
C:403, 0: Wrong hanging indentation (remove 4 spaces).
        'ME': 'Maine',
    |   ^ (bad-continuation)
C:404, 0: Wrong hanging indentation (remove 4 spaces).
        'MI': 'Michigan',
    |   ^ (bad-continuation)
C:405, 0: Wrong hanging indentation (remove 4 spaces).
        'MN': 'Minnesota',
    |   ^ (bad-continuation)
C:406, 0: Wrong hanging indentation (remove 4 spaces).
        'MO': 'Missouri',
    |   ^ (bad-continuation)
C:407, 0: Wrong hanging indentation (remove 4 spaces).
        'MP': 'Northern Mariana Islands',
    |   ^ (bad-continuation)
C:408, 0: Wrong hanging indentation (remove 4 spaces).
        'MS': 'Mississippi',
    |   ^ (bad-continuation)
C:409, 0: Wrong hanging indentation (remove 4 spaces).
        'MT': 'Montana',
    |   ^ (bad-continuation)
C:410, 0: Wrong hanging indentation (remove 4 spaces).
        'NA': 'National',
    |   ^ (bad-continuation)
C:411, 0: Wrong hanging indentation (remove 4 spaces).
        'NC': 'North Carolina',
    |   ^ (bad-continuation)
C:412, 0: Wrong hanging indentation (remove 4 spaces).
        'ND': 'North Dakota',
    |   ^ (bad-continuation)
C:413, 0: Wrong hanging indentation (remove 4 spaces).
        'NE': 'Nebraska',
    |   ^ (bad-continuation)
C:414, 0: Wrong hanging indentation (remove 4 spaces).
        'NH': 'New Hampshire',
    |   ^ (bad-continuation)
C:415, 0: Wrong hanging indentation (remove 4 spaces).
        'NJ': 'New Jersey',
    |   ^ (bad-continuation)
C:416, 0: Wrong hanging indentation (remove 4 spaces).
        'NM': 'New Mexico',
    |   ^ (bad-continuation)
C:417, 0: Wrong hanging indentation (remove 4 spaces).
        'NV': 'Nevada',
    |   ^ (bad-continuation)
C:418, 0: Wrong hanging indentation (remove 4 spaces).
        'NY': 'New York',
    |   ^ (bad-continuation)
C:419, 0: Wrong hanging indentation (remove 4 spaces).
        'OH': 'Ohio',
    |   ^ (bad-continuation)
C:420, 0: Wrong hanging indentation (remove 4 spaces).
        'OK': 'Oklahoma',
    |   ^ (bad-continuation)
C:421, 0: Wrong hanging indentation (remove 4 spaces).
        'OR': 'Oregon',
    |   ^ (bad-continuation)
C:422, 0: Wrong hanging indentation (remove 4 spaces).
        'PA': 'Pennsylvania',
    |   ^ (bad-continuation)
C:423, 0: Wrong hanging indentation (remove 4 spaces).
        'PR': 'Puerto Rico',
    |   ^ (bad-continuation)
C:424, 0: Wrong hanging indentation (remove 4 spaces).
        'RI': 'Rhode Island',
    |   ^ (bad-continuation)
C:425, 0: Wrong hanging indentation (remove 4 spaces).
        'SC': 'South Carolina',
    |   ^ (bad-continuation)
C:426, 0: Wrong hanging indentation (remove 4 spaces).
        'SD': 'South Dakota',
    |   ^ (bad-continuation)
C:427, 0: Wrong hanging indentation (remove 4 spaces).
        'TN': 'Tennessee',
    |   ^ (bad-continuation)
C:428, 0: Wrong hanging indentation (remove 4 spaces).
        'TX': 'Texas',
    |   ^ (bad-continuation)
C:429, 0: Wrong hanging indentation (remove 4 spaces).
        'UT': 'Utah',
    |   ^ (bad-continuation)
C:430, 0: Wrong hanging indentation (remove 4 spaces).
        'VA': 'Virginia',
    |   ^ (bad-continuation)
C:431, 0: Wrong hanging indentation (remove 4 spaces).
        'VI': 'Virgin Islands',
    |   ^ (bad-continuation)
C:432, 0: Wrong hanging indentation (remove 4 spaces).
        'VT': 'Vermont',
    |   ^ (bad-continuation)
C:433, 0: Wrong hanging indentation (remove 4 spaces).
        'WA': 'Washington',
    |   ^ (bad-continuation)
C:434, 0: Wrong hanging indentation (remove 4 spaces).
        'WI': 'Wisconsin',
    |   ^ (bad-continuation)
C:435, 0: Wrong hanging indentation (remove 4 spaces).
        'WV': 'West Virginia',
    |   ^ (bad-continuation)
C:436, 0: Wrong hanging indentation (remove 4 spaces).
        'WY': 'Wyoming'
    |   ^ (bad-continuation)
C:442, 0: Final newline missing (missing-final-newline)
C:  1, 0: Module name "awdbToolsJson" doesn't conform to snake_case naming style (invalid-name)
C: 17, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 18, 0: Constant name "static_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 20, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 21, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 22, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Constant name "dataUrl" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 28, 0: Function name "isActive" doesn't conform to snake_case naming style (invalid-name)
C: 28, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 28, 0: Missing function docstring (missing-docstring)
R: 28, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 32, 0: Function name "isAbove" doesn't conform to snake_case naming style (invalid-name)
C: 32, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 32, 0: Missing function docstring (missing-docstring)
R: 32, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 36, 0: Function name "isBelow" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 36, 0: Missing function docstring (missing-docstring)
R: 36, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 40, 0: Function name "isYearsOld" doesn't conform to snake_case naming style (invalid-name)
C: 40, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 40, 0: Missing function docstring (missing-docstring)
C: 41, 4: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
C: 42, 4: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
R: 40, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 46, 0: Argument name "d" doesn't conform to snake_case naming style (invalid-name)
C: 46, 0: Missing function docstring (missing-docstring)
C: 50, 0: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
C: 50, 0: Missing function docstring (missing-docstring)
C: 53, 0: Function name "fillMissingData" doesn't conform to snake_case naming style (invalid-name)
C: 53, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 53, 0: Argument name "daysBack" doesn't conform to snake_case naming style (invalid-name)
C: 53, 0: Missing function docstring (missing-docstring)
C: 62, 8: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
C: 67, 0: Function name "nonLeapDaysBetween" doesn't conform to snake_case naming style (invalid-name)
C: 67, 0: Argument name "_sDateLeap" doesn't conform to snake_case naming style (invalid-name)
C: 67, 0: Argument name "_eDateLeap" doesn't conform to snake_case naming style (invalid-name)
C: 67, 0: Missing function docstring (missing-docstring)
C: 68, 4: Variable name "nonLeapDays" doesn't conform to snake_case naming style (invalid-name)
C: 70, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 72, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 74, 8: Variable name "eYear" doesn't conform to snake_case naming style (invalid-name)
C: 76, 8: Variable name "eYear" doesn't conform to snake_case naming style (invalid-name)
C: 77, 8: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
C: 78,30: More than one statement on a single line (multiple-statements)
C: 78,30: Variable name "nonLeapDays" doesn't conform to snake_case naming style (invalid-name)
C: 81, 0: Function name "padMissingData" doesn't conform to snake_case naming style (invalid-name)
C: 81, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 81, 0: Argument name "_sDate" doesn't conform to snake_case naming style (invalid-name)
C: 81, 0: Argument name "_eDate" doesn't conform to snake_case naming style (invalid-name)
C: 81, 0: Missing function docstring (missing-docstring)
C: 84, 4: Variable name "eDateChkSite" doesn't conform to snake_case naming style (invalid-name)
C: 85, 4: Variable name "eDateChkBasin" doesn't conform to snake_case naming style (invalid-name)
C: 87, 8: Variable name "eDiff" doesn't conform to snake_case naming style (invalid-name)
C: 90, 4: Variable name "sDateChkSite" doesn't conform to snake_case naming style (invalid-name)
C: 92, 4: Variable name "sDateChkBasin" doesn't conform to snake_case naming style (invalid-name)
C: 94, 8: Variable name "sDiff" doesn't conform to snake_case naming style (invalid-name)
C: 98, 8: Variable name "sDiff" doesn't conform to snake_case naming style (invalid-name)
C:103, 0: Function name "createPRECProjTrace" doesn't conform to snake_case naming style (invalid-name)
C:103, 0: Argument name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:103, 0: Argument name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C:103, 0: Argument name "nanList" doesn't conform to snake_case naming style (invalid-name)
C:103, 0: Missing function docstring (missing-docstring)
C:104, 4: Variable name "dailyData" doesn't conform to snake_case naming style (invalid-name)
C:111,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C:113,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C:116, 0: Function name "createSWEProjTrace" doesn't conform to snake_case naming style (invalid-name)
C:116, 0: Argument name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:116, 0: Argument name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C:116, 0: Argument name "nanList" doesn't conform to snake_case naming style (invalid-name)
C:116, 0: Missing function docstring (missing-docstring)
C:117, 4: Variable name "dailyData" doesn't conform to snake_case naming style (invalid-name)
C:122, 8: Variable name "peakSWEday" doesn't conform to snake_case naming style (invalid-name)
C:123, 8: Variable name "meltOut" doesn't conform to snake_case naming style (invalid-name)
C:126,16: Variable name "meltOut" doesn't conform to snake_case naming style (invalid-name)
C:130,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C:133,12: Variable name "meltList" doesn't conform to snake_case naming style (invalid-name)
C:134,16: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
C:135,16: Variable name "meltRate" doesn't conform to snake_case naming style (invalid-name)
C:142,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C:145, 0: Function name "getBasinSites" doesn't conform to snake_case naming style (invalid-name)
C:145, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C:145, 0: Argument name "basinTable" doesn't conform to snake_case naming style (invalid-name)
C:145, 0: Missing function docstring (missing-docstring)
C:146, 4: Variable name "siteListStr" doesn't conform to snake_case naming style (invalid-name)
C:147, 4: Variable name "siteList" doesn't conform to snake_case naming style (invalid-name)
C:149, 8: Variable name "siteList" doesn't conform to snake_case naming style (invalid-name)
R:145, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C:153, 0: Function name "calcSMSAvg" doesn't conform to snake_case naming style (invalid-name)
C:153, 0: Argument name "dataSMS" doesn't conform to snake_case naming style (invalid-name)
C:153, 0: Missing function docstring (missing-docstring)
C:154, 4: Variable name "smsAllAvg" doesn't conform to snake_case naming style (invalid-name)
C:155, 4: Variable name "allSites" doesn't conform to snake_case naming style (invalid-name)
C:156, 8: Variable name "smsSite" doesn't conform to snake_case naming style (invalid-name)
C:162,25: More than one statement on a single line (multiple-statements)
C:163,25: More than one statement on a single line (multiple-statements)
C:164,24: More than one statement on a single line (multiple-statements)
C:165,24: More than one statement on a single line (multiple-statements)
C:166,24: More than one statement on a single line (multiple-statements)
C:178,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:179,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:187,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:188,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:194,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:195,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:201,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:202,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:208,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:209,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:211,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:215, 0: Function name "integrateSMS" doesn't conform to snake_case naming style (invalid-name)
C:215, 0: Argument name "dataSMS" doesn't conform to snake_case naming style (invalid-name)
C:215, 0: Missing function docstring (missing-docstring)
C:216, 4: Variable name "smsAllAvg" doesn't conform to snake_case naming style (invalid-name)
C:217, 4: Variable name "allSites" doesn't conform to snake_case naming style (invalid-name)
C:220, 8: Variable name "smsSite" doesn't conform to snake_case naming style (invalid-name)
C:223,25: More than one statement on a single line (multiple-statements)
C:224,24: More than one statement on a single line (multiple-statements)
C:230,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:231,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:235,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:239,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:241,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:245, 0: Function name "calcSTOAvg" doesn't conform to snake_case naming style (invalid-name)
C:245, 0: Argument name "dataSMS" doesn't conform to snake_case naming style (invalid-name)
C:245, 0: Missing function docstring (missing-docstring)
C:246, 4: Variable name "smsAllAvg" doesn't conform to snake_case naming style (invalid-name)
C:247, 4: Variable name "allSites" doesn't conform to snake_case naming style (invalid-name)
C:248, 8: Variable name "smsSite" doesn't conform to snake_case naming style (invalid-name)
C:252,24: More than one statement on a single line (multiple-statements)
C:253,24: More than one statement on a single line (multiple-statements)
C:254,24: More than one statement on a single line (multiple-statements)
C:262,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:263,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:269,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:270,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:276,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:277,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:283,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:284,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:288,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:292,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:296,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:298,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:302, 0: Function name "getSaturation" doesn't conform to snake_case naming style (invalid-name)
C:302, 0: Missing function docstring (missing-docstring)
R:302, 0: Too many local variables (17/15) (too-many-locals)
C:304, 4: Variable name "satTable" doesn't conform to snake_case naming style (invalid-name)
C:312,16: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
C:314,12: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
C:317, 4: Variable name "siteTrip" doesn't conform to snake_case naming style (invalid-name)
R:322, 4: Unnecessary "else" after "return" (no-else-return)
C:327, 0: Function name "getBasinTable" doesn't conform to snake_case naming style (invalid-name)
C:327, 0: Missing function docstring (missing-docstring)
C:329, 4: Variable name "basinTable" doesn't conform to snake_case naming style (invalid-name)
C:339,16: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
C:341,12: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
C:346, 0: Function name "getGeoData" doesn't conform to snake_case naming style (invalid-name)
C:346, 0: Argument name "hucList" doesn't conform to snake_case naming style (invalid-name)
C:346, 0: Missing function docstring (missing-docstring)
C:347, 4: Variable name "geoData" doesn't conform to snake_case naming style (invalid-name)
C:348, 4: Variable name "equalLength" doesn't conform to snake_case naming style (invalid-name)
C:350, 8: Variable name "equalLength" doesn't conform to snake_case naming style (invalid-name)
C:351, 8: Variable name "hucLength" doesn't conform to snake_case naming style (invalid-name)
C:353,35: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
C:354,12: Variable name "geoDataJson" doesn't conform to snake_case naming style (invalid-name)
C:357,12: Variable name "hucLength" doesn't conform to snake_case naming style (invalid-name)
C:359,39: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
C:360,16: Variable name "geoDataJson" doesn't conform to snake_case naming style (invalid-name)
C:361, 8: Variable name "geoDataTemp" doesn't conform to snake_case naming style (invalid-name)
C:366, 0: Function name "trimToOct1" doesn't conform to snake_case naming style (invalid-name)
C:366, 0: Missing function docstring (missing-docstring)
C:367, 4: Variable name "sDate" doesn't conform to snake_case naming style (invalid-name)
C:370, 4: Variable name "WY" doesn't conform to snake_case naming style (invalid-name)
C:371,24: More than one statement on a single line (multiple-statements)
C:371,24: Variable name "WY" doesn't conform to snake_case naming style (invalid-name)
C:379, 0: Constant name "statesLong" doesn't conform to UPPER_CASE naming style (invalid-name)
W:439, 4: Reimport 'os' (imported line 15) (reimported)
C:441, 4: Constant name "dirpath" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 10, 0: standard import "import calendar as cal" should be placed before "import pandas as pd" (wrong-import-order)
C: 12, 0: standard import "import csv" should be placed before "import pandas as pd" (wrong-import-order)
C: 13, 0: standard import "import warnings" should be placed before "import pandas as pd" (wrong-import-order)
C: 14, 0: standard import "import json" should be placed before "import pandas as pd" (wrong-import-order)
C: 15, 0: standard import "import os" should be placed before "import pandas as pd" (wrong-import-order)
************* Module onHold
C:  7, 0: Trailing newlines (trailing-newlines)
C:  1, 0: Module name "onHold" doesn't conform to snake_case naming style (invalid-name)
************* Module onHold.lib.__init__
C:  7, 0: Trailing newlines (trailing-newlines)
************* Module onHold.lib.awdbToolsJson
C: 27, 0: Exactly one space required after comma
def isAbove(x,elev):
             ^ (bad-whitespace)
C: 30, 0: Exactly one space required after comma
def isBelow(x,elev):
             ^ (bad-whitespace)
C: 33, 0: Exactly one space required after comma
def isYearsOld(x,yrs):
                ^ (bad-whitespace)
C: 42, 0: Exactly one space required after comma
    return "%d%s" % (n,"tsnrhtdd"[(math.floor(n//10)%10!=1)*(n%10<4)*n%10::4])
                      ^ (bad-whitespace)
C: 42, 0: Exactly one space required around comparison
    return "%d%s" % (n,"tsnrhtdd"[(math.floor(n//10)%10!=1)*(n%10<4)*n%10::4])
                                                       ^^ (bad-whitespace)
C: 42, 0: Exactly one space required around comparison
    return "%d%s" % (n,"tsnrhtdd"[(math.floor(n//10)%10!=1)*(n%10<4)*n%10::4])
                                                                 ^ (bad-whitespace)
C: 43, 0: Exactly one space required after comma
def fillMissingData(x,daysBack):
                     ^ (bad-whitespace)
C: 53, 0: Trailing whitespace (trailing-whitespace)
C: 54, 0: Wrong continued indentation (add 7 spaces).
         pd.DataFrame(y).interpolate().values.ravel().tolist())
         ^      | (bad-continuation)
C: 56, 0: Exactly one space required after comma
def nonLeapDaysBetween(_sDateLeap,_eDateLeap):
                                 ^ (bad-whitespace)
C: 57, 0: Trailing whitespace (trailing-whitespace)
C: 66, 0: Exactly one space required after comma
    for t in range(sYear,eYear+1):
                        ^ (bad-whitespace)
C: 67, 0: Trailing whitespace (trailing-whitespace)
W: 67, 0: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
C: 69, 0: Exactly one space required after comma
def padMissingData(x,_sDate,_eDate):
                    ^ (bad-whitespace)
C: 69, 0: Exactly one space required after comma
def padMissingData(x,_sDate,_eDate):
                           ^ (bad-whitespace)
C: 70, 0: Trailing whitespace (trailing-whitespace)
C: 71, 0: Exactly one space required after comma
    eDateChkSite = dt.strptime(x['endDate'],"%Y-%m-%d %H:%M:%S").date()
                                           ^ (bad-whitespace)
C: 72, 0: Exactly one space required after comma
    eDateChkBasin = dt.strptime(_eDate,"%Y-%m-%d").date()
                                      ^ (bad-whitespace)
C: 74, 0: Trailing whitespace (trailing-whitespace)
C: 78, 0: Wrong hanging indentation (remove 4 spaces).
            x['beginDate'],"%Y-%m-%d %H:%M:%S").date()
        |   ^ (bad-continuation)
C: 78, 0: Exactly one space required after comma
            x['beginDate'],"%Y-%m-%d %H:%M:%S").date()
                          ^ (bad-whitespace)
C: 79, 0: Exactly one space required after assignment
    sDateChkBasin =dt.strptime(_sDate,"%Y-%m-%d").date()
                  ^ (bad-whitespace)
C: 79, 0: Exactly one space required after comma
    sDateChkBasin =dt.strptime(_sDate,"%Y-%m-%d").date()
                                     ^ (bad-whitespace)
C: 81, 0: Trailing whitespace (trailing-whitespace)
C: 84, 0: Trailing whitespace (trailing-whitespace)
C: 85, 0: Trailing whitespace (trailing-whitespace)
C: 86, 0: Exactly one space required after comma
                 nonLeapDaysBetween(sDateChkSite,sDateChkBasin))
                                                ^ (bad-whitespace)
C: 89, 0: Exactly one space required after comma
def createPRECProjTrace(i,jDay,lastValue,nanList):
                         ^ (bad-whitespace)
C: 89, 0: Exactly one space required after comma
def createPRECProjTrace(i,jDay,lastValue,nanList):
                              ^ (bad-whitespace)
C: 89, 0: Exactly one space required after comma
def createPRECProjTrace(i,jDay,lastValue,nanList):
                                        ^ (bad-whitespace)
W: 92, 0: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
C:101, 0: Exactly one space required after comma
def createSWEProjTrace(i,jDay,lastValue,nanList):
                        ^ (bad-whitespace)
C:101, 0: Exactly one space required after comma
def createSWEProjTrace(i,jDay,lastValue,nanList):
                             ^ (bad-whitespace)
C:101, 0: Exactly one space required after comma
def createSWEProjTrace(i,jDay,lastValue,nanList):
                                       ^ (bad-whitespace)
W:104, 0: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
C:109, 0: Exactly one space required after comma
        for index,day in enumerate(dailyData[peakSWEday:]):
                 ^ (bad-whitespace)
C:115, 0: Trailing whitespace (trailing-whitespace)
C:116, 0: Wrong continued indentation (add 23 spaces).
                          lastValue or jDay < peakSWEday else np.nan for x in projection]
                          ^                      | (bad-continuation)
C:119, 0: Exactly one space required after comma
            for t in range(0,366-len(projTrace)):
                            ^ (bad-whitespace)
C:128, 0: Trailing whitespace (trailing-whitespace)
C:129, 0: Exactly one space required after comma
def getBasinSites(basinName,basinTable):
                           ^ (bad-whitespace)
C:152, 0: Wrong continued indentation (add 7 spaces).
                 np.nan for x in sms40]
                 ^      | (bad-continuation)
C:154, 0: Wrong continued indentation (add 7 spaces).
                 np.nan for x in sms20]
                 ^      | (bad-continuation)
C:156, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:158, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:160, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:161, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                ^ (bad-whitespace)
C:161, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                      ^ (bad-whitespace)
C:161, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                           ^ (bad-whitespace)
C:161, 0: Exactly one space required after comma
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
                                                ^ (bad-whitespace)
C:165, 0: Wrong continued indentation (add 7 spaces).
                 np.nan for x in sms20]
                 ^      | (bad-continuation)
C:167, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:169, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:170, 0: Exactly one space required after comma
            smsAll = list([sms20,sms8,sms2])
                                ^ (bad-whitespace)
C:170, 0: Exactly one space required after comma
            smsAll = list([sms20,sms8,sms2])
                                     ^ (bad-whitespace)
C:174, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:176, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:177, 0: Exactly one space required after comma
            smsAll = list([sms8,sms2])
                               ^ (bad-whitespace)
C:181, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:183, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:184, 0: Exactly one space required after comma
            smsAll = list([sms8,sms20])
                               ^ (bad-whitespace)
C:188, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:190, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:191, 0: Exactly one space required after comma
            smsAll = list([sms2,sms20])
                               ^ (bad-whitespace)
C:201, 0: Trailing whitespace (trailing-whitespace)
C:209, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:211, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:212, 0: Exactly one space required after comma
            smsAll = list([sms8,sms20])
                               ^ (bad-whitespace)
C:216, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:220, 0: Wrong continued indentation (add 8 spaces).
                np.nan for x in sms20]
                ^       | (bad-continuation)
C:238, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:240, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:242, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:243, 0: Exactly one space required after comma
            smsAll = list([sms8,sms4,sms2])
                               ^ (bad-whitespace)
C:243, 0: Exactly one space required after comma
            smsAll = list([sms8,sms4,sms2])
                                    ^ (bad-whitespace)
C:247, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:249, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:250, 0: Exactly one space required after comma
            smsAll = list([sms8,sms2])
                               ^ (bad-whitespace)
C:254, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:256, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:257, 0: Exactly one space required after comma
            smsAll = list([sms4,sms2])
                               ^ (bad-whitespace)
C:261, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:263, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:264, 0: Exactly one space required after comma
            smsAll = list([sms8,sms4])
                               ^ (bad-whitespace)
C:268, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms2]
                ^      | (bad-continuation)
C:272, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms4]
                ^      | (bad-continuation)
C:276, 0: Wrong continued indentation (add 7 spaces).
                np.nan for x in sms8]
                ^      | (bad-continuation)
C:282, 0: Exactly one space required after comma
def getSaturation(depth,triplet,default=40):
                       ^ (bad-whitespace)
C:282, 0: Exactly one space required after comma
def getSaturation(depth,triplet,default=40):
                               ^ (bad-whitespace)
C:285, 0: Exactly one space required after comma
    with open(os.path.join(static_dir,'soilsSat.csv'), 'r') as data_file:
                                     ^ (bad-whitespace)
C:296, 0: Trailing whitespace (trailing-whitespace)
C:309, 0: Exactly one space required after comma
    with open(os.path.join(static_dir,'basinDef.csv'), 'r') as data_file:
                                     ^ (bad-whitespace)
C:330, 0: Exactly one space required after comma
        geojson_path = (os.path.join(static_dir,'GIS/huc' + hucLength + r'.json'))
                                               ^ (bad-whitespace)
C:336, 0: Exactly one space required after comma
            geojson_path = (os.path.join(static_dir,'GIS/huc' + hucLength + r'.json'))
                                                   ^ (bad-whitespace)
C:340, 0: Wrong continued indentation (add 3 spaces).
                    d['properties'].get('HUC' + hucLength) == huc]
                    ^  | (bad-continuation)
C:344, 0: Wrong hanging indentation (remove 4 spaces).
        'AK': 'AstatesLonglaska',
    |   ^ (bad-continuation)
C:345, 0: Wrong hanging indentation (remove 4 spaces).
        'AL': 'Alabama',
    |   ^ (bad-continuation)
C:346, 0: Wrong hanging indentation (remove 4 spaces).
        'AR': 'Arkansas',
    |   ^ (bad-continuation)
C:347, 0: Wrong hanging indentation (remove 4 spaces).
        'AS': 'American Samoa',
    |   ^ (bad-continuation)
C:348, 0: Wrong hanging indentation (remove 4 spaces).
        'AZ': 'Arizona',
    |   ^ (bad-continuation)
C:349, 0: Wrong hanging indentation (remove 4 spaces).
        'CA': 'Eastern Sierra',
    |   ^ (bad-continuation)
C:350, 0: Wrong hanging indentation (remove 4 spaces).
        'CO': 'Colorado',
    |   ^ (bad-continuation)
C:351, 0: Wrong hanging indentation (remove 4 spaces).
        'CT': 'Connecticut',
    |   ^ (bad-continuation)
C:352, 0: Wrong hanging indentation (remove 4 spaces).
        'DC': 'District of Columbia',
    |   ^ (bad-continuation)
C:353, 0: Wrong hanging indentation (remove 4 spaces).
        'DE': 'Delaware',
    |   ^ (bad-continuation)
C:354, 0: Wrong hanging indentation (remove 4 spaces).
        'FL': 'Florida',
    |   ^ (bad-continuation)
C:355, 0: Wrong hanging indentation (remove 4 spaces).
        'GA': 'Georgia',
    |   ^ (bad-continuation)
C:356, 0: Wrong hanging indentation (remove 4 spaces).
        'GU': 'Guam',
    |   ^ (bad-continuation)
C:357, 0: Wrong hanging indentation (remove 4 spaces).
        'HI': 'Hawaii',
    |   ^ (bad-continuation)
C:358, 0: Wrong hanging indentation (remove 4 spaces).
        'IA': 'Iowa',
    |   ^ (bad-continuation)
C:359, 0: Wrong hanging indentation (remove 4 spaces).
        'ID': 'Idaho',
    |   ^ (bad-continuation)
C:360, 0: Wrong hanging indentation (remove 4 spaces).
        'IL': 'Illinois',
    |   ^ (bad-continuation)
C:361, 0: Wrong hanging indentation (remove 4 spaces).
        'IN': 'Indiana',
    |   ^ (bad-continuation)
C:362, 0: Wrong hanging indentation (remove 4 spaces).
        'KS': 'Kansas',
    |   ^ (bad-continuation)
C:363, 0: Wrong hanging indentation (remove 4 spaces).
        'KY': 'Kentucky',
    |   ^ (bad-continuation)
C:364, 0: Wrong hanging indentation (remove 4 spaces).
        'LA': 'Louisiana',
    |   ^ (bad-continuation)
C:365, 0: Wrong hanging indentation (remove 4 spaces).
        'MA': 'Massachusetts',
    |   ^ (bad-continuation)
C:366, 0: Wrong hanging indentation (remove 4 spaces).
        'MD': 'Maryland',
    |   ^ (bad-continuation)
C:367, 0: Wrong hanging indentation (remove 4 spaces).
        'ME': 'Maine',
    |   ^ (bad-continuation)
C:368, 0: Wrong hanging indentation (remove 4 spaces).
        'MI': 'Michigan',
    |   ^ (bad-continuation)
C:369, 0: Wrong hanging indentation (remove 4 spaces).
        'MN': 'Minnesota',
    |   ^ (bad-continuation)
C:370, 0: Wrong hanging indentation (remove 4 spaces).
        'MO': 'Missouri',
    |   ^ (bad-continuation)
C:371, 0: Wrong hanging indentation (remove 4 spaces).
        'MP': 'Northern Mariana Islands',
    |   ^ (bad-continuation)
C:372, 0: Wrong hanging indentation (remove 4 spaces).
        'MS': 'Mississippi',
    |   ^ (bad-continuation)
C:373, 0: Wrong hanging indentation (remove 4 spaces).
        'MT': 'Montana',
    |   ^ (bad-continuation)
C:374, 0: Wrong hanging indentation (remove 4 spaces).
        'NA': 'National',
    |   ^ (bad-continuation)
C:375, 0: Wrong hanging indentation (remove 4 spaces).
        'NC': 'North Carolina',
    |   ^ (bad-continuation)
C:376, 0: Wrong hanging indentation (remove 4 spaces).
        'ND': 'North Dakota',
    |   ^ (bad-continuation)
C:377, 0: Wrong hanging indentation (remove 4 spaces).
        'NE': 'Nebraska',
    |   ^ (bad-continuation)
C:378, 0: Wrong hanging indentation (remove 4 spaces).
        'NH': 'New Hampshire',
    |   ^ (bad-continuation)
C:379, 0: Wrong hanging indentation (remove 4 spaces).
        'NJ': 'New Jersey',
    |   ^ (bad-continuation)
C:380, 0: Wrong hanging indentation (remove 4 spaces).
        'NM': 'New Mexico',
    |   ^ (bad-continuation)
C:381, 0: Wrong hanging indentation (remove 4 spaces).
        'NV': 'Nevada',
    |   ^ (bad-continuation)
C:382, 0: Wrong hanging indentation (remove 4 spaces).
        'NY': 'New York',
    |   ^ (bad-continuation)
C:383, 0: Wrong hanging indentation (remove 4 spaces).
        'OH': 'Ohio',
    |   ^ (bad-continuation)
C:384, 0: Wrong hanging indentation (remove 4 spaces).
        'OK': 'Oklahoma',
    |   ^ (bad-continuation)
C:385, 0: Wrong hanging indentation (remove 4 spaces).
        'OR': 'Oregon',
    |   ^ (bad-continuation)
C:386, 0: Wrong hanging indentation (remove 4 spaces).
        'PA': 'Pennsylvania',
    |   ^ (bad-continuation)
C:387, 0: Wrong hanging indentation (remove 4 spaces).
        'PR': 'Puerto Rico',
    |   ^ (bad-continuation)
C:388, 0: Wrong hanging indentation (remove 4 spaces).
        'RI': 'Rhode Island',
    |   ^ (bad-continuation)
C:389, 0: Wrong hanging indentation (remove 4 spaces).
        'SC': 'South Carolina',
    |   ^ (bad-continuation)
C:390, 0: Wrong hanging indentation (remove 4 spaces).
        'SD': 'South Dakota',
    |   ^ (bad-continuation)
C:391, 0: Wrong hanging indentation (remove 4 spaces).
        'TN': 'Tennessee',
    |   ^ (bad-continuation)
C:392, 0: Wrong hanging indentation (remove 4 spaces).
        'TX': 'Texas',
    |   ^ (bad-continuation)
C:393, 0: Wrong hanging indentation (remove 4 spaces).
        'UT': 'Utah',
    |   ^ (bad-continuation)
C:394, 0: Wrong hanging indentation (remove 4 spaces).
        'VA': 'Virginia',
    |   ^ (bad-continuation)
C:395, 0: Wrong hanging indentation (remove 4 spaces).
        'VI': 'Virgin Islands',
    |   ^ (bad-continuation)
C:396, 0: Wrong hanging indentation (remove 4 spaces).
        'VT': 'Vermont',
    |   ^ (bad-continuation)
C:397, 0: Wrong hanging indentation (remove 4 spaces).
        'WA': 'Washington',
    |   ^ (bad-continuation)
C:398, 0: Wrong hanging indentation (remove 4 spaces).
        'WI': 'Wisconsin',
    |   ^ (bad-continuation)
C:399, 0: Wrong hanging indentation (remove 4 spaces).
        'WV': 'West Virginia',
    |   ^ (bad-continuation)
C:400, 0: Wrong hanging indentation (remove 4 spaces).
        'WY': 'Wyoming'
    |   ^ (bad-continuation)
C:406, 0: Final newline missing (missing-final-newline)
C:  1, 0: Module name "awdbToolsJson" doesn't conform to snake_case naming style (invalid-name)
C: 17, 0: Constant name "this_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 18, 0: Constant name "static_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 20, 0: Class name "dt" doesn't conform to PascalCase naming style (invalid-name)
C: 21, 0: Class name "date" doesn't conform to PascalCase naming style (invalid-name)
C: 22, 0: Constant name "today" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 24, 0: Function name "isActive" doesn't conform to snake_case naming style (invalid-name)
C: 24, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 24, 0: Missing function docstring (missing-docstring)
R: 24, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 27, 0: Function name "isAbove" doesn't conform to snake_case naming style (invalid-name)
C: 27, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 27, 0: Missing function docstring (missing-docstring)
R: 27, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 30, 0: Function name "isBelow" doesn't conform to snake_case naming style (invalid-name)
C: 30, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 30, 0: Missing function docstring (missing-docstring)
R: 30, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 33, 0: Function name "isYearsOld" doesn't conform to snake_case naming style (invalid-name)
C: 33, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 33, 0: Missing function docstring (missing-docstring)
C: 34, 4: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
C: 35, 4: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
R: 33, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C: 38, 0: Argument name "d" doesn't conform to snake_case naming style (invalid-name)
C: 38, 0: Missing function docstring (missing-docstring)
C: 41, 0: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
C: 41, 0: Missing function docstring (missing-docstring)
C: 43, 0: Function name "fillMissingData" doesn't conform to snake_case naming style (invalid-name)
C: 43, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 43, 0: Argument name "daysBack" doesn't conform to snake_case naming style (invalid-name)
C: 43, 0: Missing function docstring (missing-docstring)
C: 52, 8: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
C: 56, 0: Function name "nonLeapDaysBetween" doesn't conform to snake_case naming style (invalid-name)
C: 56, 0: Argument name "_sDateLeap" doesn't conform to snake_case naming style (invalid-name)
C: 56, 0: Argument name "_eDateLeap" doesn't conform to snake_case naming style (invalid-name)
C: 56, 0: Missing function docstring (missing-docstring)
C: 57, 4: Variable name "nonLeapDays" doesn't conform to snake_case naming style (invalid-name)
C: 59, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 61, 8: Variable name "sYear" doesn't conform to snake_case naming style (invalid-name)
C: 63, 8: Variable name "eYear" doesn't conform to snake_case naming style (invalid-name)
C: 65, 8: Variable name "eYear" doesn't conform to snake_case naming style (invalid-name)
C: 66, 8: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
C: 67,34: More than one statement on a single line (multiple-statements)
C: 67,34: Variable name "nonLeapDays" doesn't conform to snake_case naming style (invalid-name)
C: 69, 0: Function name "padMissingData" doesn't conform to snake_case naming style (invalid-name)
C: 69, 0: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
C: 69, 0: Argument name "_sDate" doesn't conform to snake_case naming style (invalid-name)
C: 69, 0: Argument name "_eDate" doesn't conform to snake_case naming style (invalid-name)
C: 69, 0: Missing function docstring (missing-docstring)
C: 71, 4: Variable name "eDateChkSite" doesn't conform to snake_case naming style (invalid-name)
C: 72, 4: Variable name "eDateChkBasin" doesn't conform to snake_case naming style (invalid-name)
C: 74, 8: Variable name "eDiff" doesn't conform to snake_case naming style (invalid-name)
C: 77, 4: Variable name "sDateChkSite" doesn't conform to snake_case naming style (invalid-name)
C: 79, 4: Variable name "sDateChkBasin" doesn't conform to snake_case naming style (invalid-name)
C: 81, 8: Variable name "sDiff" doesn't conform to snake_case naming style (invalid-name)
C: 85, 8: Variable name "sDiff" doesn't conform to snake_case naming style (invalid-name)
C: 89, 0: Function name "createPRECProjTrace" doesn't conform to snake_case naming style (invalid-name)
C: 89, 0: Argument name "jDay" doesn't conform to snake_case naming style (invalid-name)
C: 89, 0: Argument name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C: 89, 0: Argument name "nanList" doesn't conform to snake_case naming style (invalid-name)
C: 89, 0: Missing function docstring (missing-docstring)
C: 90, 4: Variable name "dailyData" doesn't conform to snake_case naming style (invalid-name)
C: 97,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C: 99,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C:101, 0: Function name "createSWEProjTrace" doesn't conform to snake_case naming style (invalid-name)
C:101, 0: Argument name "jDay" doesn't conform to snake_case naming style (invalid-name)
C:101, 0: Argument name "lastValue" doesn't conform to snake_case naming style (invalid-name)
C:101, 0: Argument name "nanList" doesn't conform to snake_case naming style (invalid-name)
C:101, 0: Missing function docstring (missing-docstring)
C:102, 4: Variable name "dailyData" doesn't conform to snake_case naming style (invalid-name)
C:107, 8: Variable name "peakSWEday" doesn't conform to snake_case naming style (invalid-name)
C:108, 8: Variable name "meltOut" doesn't conform to snake_case naming style (invalid-name)
C:111,16: Variable name "meltOut" doesn't conform to snake_case naming style (invalid-name)
C:115,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C:118,12: Variable name "meltList" doesn't conform to snake_case naming style (invalid-name)
C:119,16: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
C:120,16: Variable name "meltRate" doesn't conform to snake_case naming style (invalid-name)
C:127,12: Variable name "projTrace" doesn't conform to snake_case naming style (invalid-name)
C:129, 0: Function name "getBasinSites" doesn't conform to snake_case naming style (invalid-name)
C:129, 0: Argument name "basinName" doesn't conform to snake_case naming style (invalid-name)
C:129, 0: Argument name "basinTable" doesn't conform to snake_case naming style (invalid-name)
C:129, 0: Missing function docstring (missing-docstring)
C:130, 4: Variable name "siteListStr" doesn't conform to snake_case naming style (invalid-name)
C:131, 4: Variable name "siteList" doesn't conform to snake_case naming style (invalid-name)
C:133, 8: Variable name "siteList" doesn't conform to snake_case naming style (invalid-name)
R:129, 0: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
C:136, 0: Function name "calcSMSAvg" doesn't conform to snake_case naming style (invalid-name)
C:136, 0: Argument name "dataSMS" doesn't conform to snake_case naming style (invalid-name)
C:136, 0: Missing function docstring (missing-docstring)
C:137, 4: Variable name "smsAllAvg" doesn't conform to snake_case naming style (invalid-name)
C:138, 4: Variable name "allSites" doesn't conform to snake_case naming style (invalid-name)
C:139, 8: Variable name "smsSite" doesn't conform to snake_case naming style (invalid-name)
C:145,25: More than one statement on a single line (multiple-statements)
C:146,25: More than one statement on a single line (multiple-statements)
C:147,24: More than one statement on a single line (multiple-statements)
C:148,24: More than one statement on a single line (multiple-statements)
C:149,24: More than one statement on a single line (multiple-statements)
C:161,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:162,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:170,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:171,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:177,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:178,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:184,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:185,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:191,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:192,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:194,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:197, 0: Function name "integrateSMS" doesn't conform to snake_case naming style (invalid-name)
C:197, 0: Argument name "dataSMS" doesn't conform to snake_case naming style (invalid-name)
C:197, 0: Missing function docstring (missing-docstring)
C:198, 4: Variable name "smsAllAvg" doesn't conform to snake_case naming style (invalid-name)
C:199, 4: Variable name "allSites" doesn't conform to snake_case naming style (invalid-name)
C:202, 8: Variable name "smsSite" doesn't conform to snake_case naming style (invalid-name)
C:205,25: More than one statement on a single line (multiple-statements)
C:206,24: More than one statement on a single line (multiple-statements)
C:212,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:213,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:217,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:221,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:223,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:226, 0: Function name "calcSTOAvg" doesn't conform to snake_case naming style (invalid-name)
C:226, 0: Argument name "dataSMS" doesn't conform to snake_case naming style (invalid-name)
C:226, 0: Missing function docstring (missing-docstring)
C:227, 4: Variable name "smsAllAvg" doesn't conform to snake_case naming style (invalid-name)
C:228, 4: Variable name "allSites" doesn't conform to snake_case naming style (invalid-name)
C:229, 8: Variable name "smsSite" doesn't conform to snake_case naming style (invalid-name)
C:233,24: More than one statement on a single line (multiple-statements)
C:234,24: More than one statement on a single line (multiple-statements)
C:235,24: More than one statement on a single line (multiple-statements)
C:243,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:244,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:250,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:251,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:257,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:258,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:264,12: Variable name "smsAll" doesn't conform to snake_case naming style (invalid-name)
C:265,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:269,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:273,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:277,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:279,12: Variable name "smsAvg" doesn't conform to snake_case naming style (invalid-name)
C:282, 0: Function name "getSaturation" doesn't conform to snake_case naming style (invalid-name)
C:282, 0: Missing function docstring (missing-docstring)
R:282, 0: Too many local variables (17/15) (too-many-locals)
C:284, 4: Variable name "satTable" doesn't conform to snake_case naming style (invalid-name)
C:292,16: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
C:294,12: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
C:297, 4: Variable name "siteTrip" doesn't conform to snake_case naming style (invalid-name)
R:302, 4: Unnecessary "else" after "return" (no-else-return)
C:306, 0: Function name "getBasinTable" doesn't conform to snake_case naming style (invalid-name)
C:306, 0: Missing function docstring (missing-docstring)
C:308, 4: Variable name "basinTable" doesn't conform to snake_case naming style (invalid-name)
C:318,16: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
C:320,12: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
C:324, 0: Function name "getGeoData" doesn't conform to snake_case naming style (invalid-name)
C:324, 0: Argument name "hucList" doesn't conform to snake_case naming style (invalid-name)
C:324, 0: Missing function docstring (missing-docstring)
C:325, 4: Variable name "geoData" doesn't conform to snake_case naming style (invalid-name)
C:326, 4: Variable name "equalLength" doesn't conform to snake_case naming style (invalid-name)
C:328, 8: Variable name "equalLength" doesn't conform to snake_case naming style (invalid-name)
C:329, 8: Variable name "hucLength" doesn't conform to snake_case naming style (invalid-name)
C:331,35: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
C:332,12: Variable name "geoDataJson" doesn't conform to snake_case naming style (invalid-name)
C:335,12: Variable name "hucLength" doesn't conform to snake_case naming style (invalid-name)
C:337,39: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
C:338,16: Variable name "geoDataJson" doesn't conform to snake_case naming style (invalid-name)
C:339, 8: Variable name "geoDataTemp" doesn't conform to snake_case naming style (invalid-name)
C:343, 0: Constant name "statesLong" doesn't conform to UPPER_CASE naming style (invalid-name)
W:403, 4: Reimport 'os' (imported line 15) (reimported)
C:405, 4: Constant name "dirpath" doesn't conform to UPPER_CASE naming style (invalid-name)
C: 10, 0: standard import "import calendar as cal" should be placed before "import pandas as pd" (wrong-import-order)
C: 12, 0: standard import "import csv" should be placed before "import pandas as pd" (wrong-import-order)
C: 13, 0: standard import "import warnings" should be placed before "import pandas as pd" (wrong-import-order)
C: 14, 0: standard import "import json" should be placed before "import pandas as pd" (wrong-import-order)
C: 15, 0: standard import "import os" should be placed before "import pandas as pd" (wrong-import-order)
R:  1, 0: Similar lines in 2 files
==BasinProjection_SWE:132
==SiteProjection_SWE:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[get_last_non_zero_index(
                                          maxData[0:305]) + future_date_pad]]))
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))

    jDay = len(PORplotData[-1])-1
    lastValue = PORplotData[-1][-1]
    nanList = [np.nan]*jDay
    projData = [createSWEProjTrace(a,jDay,lastValue,nanList) for
                a in allButCurrWY]
    statsProj = list(map(list,zip(*projData)))
    cleanStatsProj = list(statsProj)
    if cleanStatsProj:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minProj = [np.nanmin(a) for a in cleanStatsProj]
            maxProj = [np.nanmax(a) for a in cleanStatsProj]
            medianProj = [np.nanpercentile(a,50) for a in cleanStatsProj]
            lowestProj = [np.nanpercentile(a,10) for a in cleanStatsProj]
            highestProj = [np.nanpercentile(a,90) for a in cleanStatsProj]
            lowProj = [np.nanpercentile(a,30) for a in cleanStatsProj]
            highProj = [np.nanpercentile(a,70) for a in cleanStatsProj]

    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(
                                x=date_series,
                                y=projData[index],
                                name=str(sYear + index + 1),
                                visible='legendonly',connectgaps=True)])
    if medianProj:
        if minProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                 y=minProj,
                                 name=r'Min Proj',
                                 visible=True,connectgaps=True,
                                 line=dict(color='rgba(237,0,0,0.4)'))])
        if lowestProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=lowestProj,
                                name=r'10% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(237,0,1,0.4)'))])
        if lowProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=lowProj,
                                name=r'30% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if medianProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=medianProj,
                                name=r'50% Proj',connectgaps=True,
                                visible=True,
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if highProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=highProj,
                                name=r'70% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(115,237,115,0.4)'))])
        if highestProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=highestProj,
                                connectgaps=True,
                                name=r'90% Proj',visible=True,
                                line=dict(color='rgba(1,237,237,0.4)'))])
        if maxProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=maxProj,
                                name=r'Max Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(0,0,237,0.4)'))])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')]) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:133
==SiteProjection_PREC:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))

    jDay = len(PORplotData[-1])-1
    lastValue = PORplotData[-1][-1]
    nanList = [np.nan]*jDay
    projData = [createPRECProjTrace(a,jDay,lastValue,nanList) for
                a in allButCurrWY]
    statsProj = list(map(list,zip(*projData)))
    cleanStatsProj = list(statsProj)
    if cleanStatsProj:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minProj = [np.nanmin(a) for a in cleanStatsProj]
            maxProj = [np.nanmax(a) for a in cleanStatsProj]
            medianProj = [np.nanpercentile(a,50) for a in cleanStatsProj]
            lowestProj = [np.nanpercentile(a,10) for a in cleanStatsProj]
            highestProj = [np.nanpercentile(a,90) for a in cleanStatsProj]
            lowProj = [np.nanpercentile(a,30) for a in cleanStatsProj]
            highProj = [np.nanpercentile(a,70) for a in cleanStatsProj]


    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(
                                x=date_series,
                                y=projData[index],
                                name=str(sYear + index + 1),
                                visible='legendonly',connectgaps=True)])
    if medianProj:
        if minProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                 y=minProj,
                                 name=r'Min Proj',
                                 visible=True,connectgaps=True,
                                 line=dict(color='rgba(237,0,0,0.4)'))])
        if lowestProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=lowestProj,
                                name=r'10% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(237,0,1,0.4)'))])
        if lowProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=lowProj,
                                name=r'30% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if medianProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=medianProj,
                                name=r'50% Proj',connectgaps=True,
                                visible=True,
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if highProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=highProj,
                                name=r'70% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(115,237,115,0.4)'))])
        if highestProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=highestProj,
                                connectgaps=True,
                                name=r'90% Proj',visible=True,
                                line=dict(color='rgba(1,237,237,0.4)'))])
        if maxProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=maxProj,
                                name=r'Max Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(0,0,237,0.4)'))])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SMS:139
==SitePOR_SMS:122
        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
            statsData[151] = statsData[150]
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", category=RuntimeWarning)
                minData = [np.nanmin(a) for a in statsData]
                maxData = [np.nanmax(a) for a in statsData]
                meanData = [np.nanmean(a) for a in statsData]
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                highestData = [np.nanpercentile(a,90) for a in statsData]
                lowData = [np.nanpercentile(a,30) for a in statsData]
                highData = [np.nanpercentile(a,70) for a in statsData]
            future_date_pad = 30
            if len(PORplotData[-1]) > 334:
                future_date_pad = 366 - len(PORplotData[-1]) - 1
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[len(PORplotData[-1])+
                                                   future_date_pad]]))
        else:
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[-1]]))

        if len(PORplotData) > 0:
            for index, i in enumerate(PORplotData):
                if index == len(PORplotData)-1:
                    trace.extend(
                            [go.Scatter(
                                    x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible=True,connectgaps=True,
                                    line=dict(color='rgb(0,0,0)'))])
                elif np.nansum(i) > 0:
                    trace.extend(
                            [go.Scatter(x=date_series,y=i,
                                        name=str(sYear + index + 1),
                                        visible='legendonly',
                                        connectgaps=True)])
        if meanData:
            if lowestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=minData
                                    ,legendgroup='centiles',name=r'Min',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='none',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=lowestData
                                    ,legendgroup='centiles',name=r'10%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if lowData:
                trace.extend(
                        [go.Scatter(x=date_series,y=lowData,
                                    legendgroup='centiles',name=r'30%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,237,0,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if highData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highData,
                                    legendgroup='centiles',
                                    name=r'Stats. Shading',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(115,237,115,0.15)',
                                    fill='tonexty',showlegend=True,
                                    hoverinfo='none',connectgaps=True)])
            if highestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highestData,
                                    legendgroup='centiles',
                                    name=r'90%',visible=True
                                    ,mode='line',line=dict(width=0),
                                    fillcolor='rgba(0,237,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=maxData
                                    ,legendgroup='centiles',name=r'Max',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(1,0,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])

        if minData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData,
                                name=r'Min',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(237,0,0,0.5)'))])

        if meanData:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if maxData:
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData,
                                name=r'Max',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(0,0,237,0.4)'))])

        annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")

        layout = go.Layout(
                images= [dict(
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                    xref="paper",
                    yref="paper",
                    x= 0,
                    y= 0.9,
                    xanchor="left", yanchor="bottom",
                    sizex= 0.4,
                    sizey= 0.1,
                    opacity= 0.5,
                    layer= "above"
                )],
                annotations=[dict(
                    font=dict(size=10),
                    text=annoText,
                    x=0,y=-0.41,
                    yref='paper',xref='paper',
                    align='left',
                    showarrow=False)],
            legend=dict(traceorder='reversed',tracegroupgap=1,
                        bordercolor='#E2E2E2',borderwidth=2),
            showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_SMS:156
==BasinPOR_STO:157
==SitePOR_SMS:139
                future_date_pad = 366 - len(PORplotData[-1]) - 1
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[len(PORplotData[-1])+
                                                   future_date_pad]]))
        else:
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[-1]]))

        if len(PORplotData) > 0:
            for index, i in enumerate(PORplotData):
                if index == len(PORplotData)-1:
                    trace.extend(
                            [go.Scatter(
                                    x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible=True,connectgaps=True,
                                    line=dict(color='rgb(0,0,0)'))])
                elif np.nansum(i) > 0:
                    trace.extend(
                            [go.Scatter(x=date_series,y=i,
                                        name=str(sYear + index + 1),
                                        visible='legendonly',
                                        connectgaps=True)])
        if meanData:
            if lowestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=minData
                                    ,legendgroup='centiles',name=r'Min',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='none',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=lowestData
                                    ,legendgroup='centiles',name=r'10%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if lowData:
                trace.extend(
                        [go.Scatter(x=date_series,y=lowData,
                                    legendgroup='centiles',name=r'30%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,237,0,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if highData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highData,
                                    legendgroup='centiles',
                                    name=r'Stats. Shading',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(115,237,115,0.15)',
                                    fill='tonexty',showlegend=True,
                                    hoverinfo='none',connectgaps=True)])
            if highestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highestData,
                                    legendgroup='centiles',
                                    name=r'90%',visible=True
                                    ,mode='line',line=dict(width=0),
                                    fillcolor='rgba(0,237,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=maxData
                                    ,legendgroup='centiles',name=r'Max',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(1,0,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])

        if minData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData,
                                name=r'Min',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(237,0,0,0.5)'))])

        if meanData:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if maxData:
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData,
                                name=r'Max',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(0,0,237,0.4)'))])

        annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")

        layout = go.Layout(
                images= [dict(
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                    xref="paper",
                    yref="paper",
                    x= 0,
                    y= 0.9,
                    xanchor="left", yanchor="bottom",
                    sizex= 0.4,
                    sizey= 0.1,
                    opacity= 0.5,
                    layer= "above"
                )],
                annotations=[dict(
                    font=dict(size=10),
                    text=annoText,
                    x=0,y=-0.41,
                    yref='paper',xref='paper',
                    align='left',
                    showarrow=False)],
            legend=dict(traceorder='reversed',tracegroupgap=1,
                        bordercolor='#E2E2E2',borderwidth=2),
            showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinProjection_PREC:173
==BasinProjection_SWE:175
==SiteProjection_PREC:146
==SiteProjection_SWE:149
    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(
                                x=date_series,
                                y=projData[index],
                                name=str(sYear + index + 1),
                                visible='legendonly',connectgaps=True)])
    if medianProj:
        if minProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                 y=minProj,
                                 name=r'Min Proj',
                                 visible=True,connectgaps=True,
                                 line=dict(color='rgba(237,0,0,0.4)'))])
        if lowestProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=lowestProj,
                                name=r'10% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(237,0,1,0.4)'))])
        if lowProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=lowProj,
                                name=r'30% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if medianProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=medianProj,
                                name=r'50% Proj',connectgaps=True,
                                visible=True,
                                line=dict(color='rgba(0,237,0,0.4)'))])
        if highProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=highProj,
                                name=r'70% Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(115,237,115,0.4)'))])
        if highestProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=highestProj,
                                connectgaps=True,
                                name=r'90% Proj',visible=True,
                                line=dict(color='rgba(1,237,237,0.4)'))])
        if maxProj:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=maxProj,
                                name=r'Max Proj',
                                visible=True,connectgaps=True,
                                line=dict(color='rgba(0,0,237,0.4)'))])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')]) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_SWE:127
==SitePOR_TAVG:117
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))

    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible='legendonly',
                                    connectgaps=True)])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])

    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])

    if len(sitePlotNormData) > 0:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=sitePlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if len(sitePlotNormData) > 0:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
    if maxData:
        trace.extend(
                [go.Scatter(x=date_series,y=maxData,
                            name=r'Max',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(0,0,237,0.4)'))])

    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official median calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>") (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_PREC:121
==SitePOR_SWE:131
==SitePOR_TAVG:121
    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible='legendonly',
                                    connectgaps=True)])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])

    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])

    if len(sitePlotNormData) > 0:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=sitePlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if len(sitePlotNormData) > 0:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
    if maxData:
        trace.extend(
                [go.Scatter(x=date_series,y=maxData,
                            name=r'Max',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(0,0,237,0.4)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_STO:137
==BasinPOR_TAVG:116
        PORplotData = list([basinPlotData[i:i+366]
                        for i in range(0,len(basinPlotData),366)])

        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
                statsData[151] = statsData[150]
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore", category=RuntimeWarning)
                    minData = [np.nanmin(a) for a in statsData]
                    maxData = [np.nanmax(a) for a in statsData]
                    meanData = [np.nanmean(a) for a in statsData]
                    lowestData = [np.nanpercentile(a,10) for a in statsData]
                    highestData = [np.nanpercentile(a,90) for a in statsData]
                    lowData = [np.nanpercentile(a,30) for a in statsData]
                    highData = [np.nanpercentile(a,70) for a in statsData]
                future_date_pad = 30
                if len(PORplotData[-1]) > 335:
                    future_date_pad = 366 - len(PORplotData[-1]) - 1
                sliderDates = list(chain([(date_series[0])] +
                                          [date_series[len(PORplotData[-1])+
                                                       future_date_pad]]))
        else:
                sliderDates = list(chain([(date_series[0])] +
                                          [date_series[-1]]))

        if len(PORplotData) > 0:
            for index, i in enumerate(PORplotData):
                if index == len(PORplotData)-1:
                    trace.extend(
                            [go.Scatter(
                                    x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible=True,connectgaps=True,
                                    line=dict(color='rgb(0,0,0)'))])
                elif np.nansum(i) > 0:
                    trace.extend(
                            [go.Scatter(x=date_series,y=i,
                                        name=str(sYear + index + 1),
                                        visible='legendonly',
                                        connectgaps=True)])
        if meanData:
            if lowestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=minData
                                    ,legendgroup='centiles',name=r'Min',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='none',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=lowestData
                                    ,legendgroup='centiles',name=r'10%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if lowData:
                trace.extend(
                        [go.Scatter(x=date_series,y=lowData,
                                    legendgroup='centiles',name=r'30%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,237,0,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if highData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highData,
                                    legendgroup='centiles',
                                    name=r'Stats. Shading',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(115,237,115,0.15)',
                                    fill='tonexty',showlegend=True,
                                    hoverinfo='none',connectgaps=True)])
            if highestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highestData,
                                    legendgroup='centiles',
                                    name=r'90%',visible=True
                                    ,mode='line',line=dict(width=0),
                                    fillcolor='rgba(0,237,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=maxData
                                    ,legendgroup='centiles',name=r'Max',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(1,0,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])

        if minData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData,
                                name=r'Min',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(237,0,0,0.5)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:134
==SitePOR_SWE:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[get_last_non_zero_index(
                                          maxData[0:305]) + future_date_pad]]))
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))

    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible='legendonly',
                                    connectgaps=True)])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])

    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_SWE:37
==SiteProjection_SWE:37
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    sitePlotData = []
    PORplotData = []
    sitePlotNormData = []
    validTrip = [site_triplet]

    sensor = r"WTEQ"
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day
    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        sitePlotNormData = np.array(normData[0]['values'], dtype=np.float)
    sitePlotNormData = sitePlotNormData.tolist()
    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})

    siteBeginDate = min(beginDateDict.values())

    sYear = siteBeginDate.year
    if siteBeginDate.year > sYear:
        if siteBeginDate.month < 10:
            sYear = siteBeginDate.year
        else:
            if siteBeginDate.month == 10 and siteBeginDate.day == 1:
                sYear = siteBeginDate.year
            else:
                sYear = siteBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = today.date().strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    sitePlotData = np.array(data[0]['values'], dtype=np.float)

    PORplotData = list([sitePlotData[i:i+366]
                    for i in range(0,len(sitePlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[get_last_non_zero_index(
                                          maxData[0:305]) + future_date_pad]]))
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_PREC:26
==SiteProjection_PREC:31
dt = datetime.datetime
date = datetime.date
today = dt.utcnow() - datetime.timedelta(hours=8)

def updtChart(site_triplet, siteName):
    print('Working on PREC POR Chart for ' + siteName)
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    sitePlotData = []
    PORplotData = []
    sitePlotNormData = []
    validTrip = [site_triplet]

    sensor = r"PREC"
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day
    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        sitePlotNormData = np.array(normData[0]['values'], dtype=np.float)
    sitePlotNormData = sitePlotNormData.tolist()
    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})

    siteBeginDate = min(beginDateDict.values())

    sYear = siteBeginDate.year
    if siteBeginDate.year > sYear:
        if siteBeginDate.month < 10:
            sYear = siteBeginDate.year
        else:
            if siteBeginDate.month == 10 and siteBeginDate.day == 1:
                sYear = siteBeginDate.year
            else:
                sYear = siteBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = today.date().strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    sitePlotData = np.array(data[0]['values'], dtype=np.float)

    PORplotData = list([sitePlotData[i:i+366]
                    for i in range(0,len(sitePlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
    else: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:155
==BasinPOR_SWE:159
    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible='legendonly',
                                    connectgaps=True)])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])

    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])

    if basinPlotNormData:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=basinPlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if basinPlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly', (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_SMS:156
==BasinPOR_TAVG:136
==SitePOR_SMS:139
                future_date_pad = 366 - len(PORplotData[-1]) - 1
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[len(PORplotData[-1])+
                                                   future_date_pad]]))
        else:
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[-1]]))

        if len(PORplotData) > 0:
            for index, i in enumerate(PORplotData):
                if index == len(PORplotData)-1:
                    trace.extend(
                            [go.Scatter(
                                    x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible=True,connectgaps=True,
                                    line=dict(color='rgb(0,0,0)'))])
                elif np.nansum(i) > 0:
                    trace.extend(
                            [go.Scatter(x=date_series,y=i,
                                        name=str(sYear + index + 1),
                                        visible='legendonly',
                                        connectgaps=True)])
        if meanData:
            if lowestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=minData
                                    ,legendgroup='centiles',name=r'Min',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='none',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=lowestData
                                    ,legendgroup='centiles',name=r'10%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,0,1,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if lowData:
                trace.extend(
                        [go.Scatter(x=date_series,y=lowData,
                                    legendgroup='centiles',name=r'30%',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(237,237,0,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
            if highData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highData,
                                    legendgroup='centiles',
                                    name=r'Stats. Shading',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(115,237,115,0.15)',
                                    fill='tonexty',showlegend=True,
                                    hoverinfo='none',connectgaps=True)])
            if highestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=highestData,
                                    legendgroup='centiles',
                                    name=r'90%',visible=True
                                    ,mode='line',line=dict(width=0),
                                    fillcolor='rgba(0,237,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])
                trace.extend(
                        [go.Scatter(x=date_series,y=maxData
                                    ,legendgroup='centiles',name=r'Max',
                                    visible=True,mode='line',
                                    line=dict(width=0),
                                    fillcolor='rgba(1,0,237,0.15)',
                                    fill='tonexty',showlegend=False,
                                    hoverinfo='none',connectgaps=True)])

        if minData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData,
                                name=r'Min',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(237,0,0,0.5)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:60
==BasinPOR_SWE:60
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        basinNormData = [np.array(x['values'], dtype=np.float) for x in
                         normData if x['values']]

    if basinNormData:
        basinPlotNormData = list(
                np.nanmean(np.array([i for i in basinNormData]), axis=0))

        validTrip[:] = [x for index, x in enumerate(validTrip) if
                 normData[index]['values']]

    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})

    basinBeginDate = min(beginDateDict.values())

    sYear = basinBeginDate.year
    if basinBeginDate.year > sYear:
        if basinBeginDate.month < 10:
            sYear = basinBeginDate.year
        else:
            if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                sYear = basinBeginDate.year
            else:
                sYear = basinBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = today.date().strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    plotData = [np.array(x['values'], dtype=np.float) for x in data]

    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        basinPlotData = list(np.nanmean(
                np.array([i for i in plotData]), axis=0))

    PORplotData = list([basinPlotData[i:i+366]
                    for i in range(0,len(basinPlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:155
==SitePOR_TAVG:117
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))

    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible='legendonly',
                                    connectgaps=True)])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])

    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_PREC:155
==BasinPOR_SWE:159
==SitePOR_PREC:121
==SitePOR_SWE:131
==SitePOR_TAVG:121
    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend(
                        [go.Scatter(x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible='legendonly',
                                    connectgaps=True)])
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])

    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:378
==onHold.lib.awdbToolsJson:342
statesLong = {
        'AK': 'AstatesLonglaska',
        'AL': 'Alabama',
        'AR': 'Arkansas',
        'AS': 'American Samoa',
        'AZ': 'Arizona',
        'CA': 'Eastern Sierra',
        'CO': 'Colorado',
        'CT': 'Connecticut',
        'DC': 'District of Columbia',
        'DE': 'Delaware',
        'FL': 'Florida',
        'GA': 'Georgia',
        'GU': 'Guam',
        'HI': 'Hawaii',
        'IA': 'Iowa',
        'ID': 'Idaho',
        'IL': 'Illinois',
        'IN': 'Indiana',
        'KS': 'Kansas',
        'KY': 'Kentucky',
        'LA': 'Louisiana',
        'MA': 'Massachusetts',
        'MD': 'Maryland',
        'ME': 'Maine',
        'MI': 'Michigan',
        'MN': 'Minnesota',
        'MO': 'Missouri',
        'MP': 'Northern Mariana Islands',
        'MS': 'Mississippi',
        'MT': 'Montana',
        'NA': 'National',
        'NC': 'North Carolina',
        'ND': 'North Dakota',
        'NE': 'Nebraska',
        'NH': 'New Hampshire',
        'NJ': 'New Jersey',
        'NM': 'New Mexico',
        'NV': 'Nevada',
        'NY': 'New York',
        'OH': 'Ohio',
        'OK': 'Oklahoma',
        'OR': 'Oregon',
        'PA': 'Pennsylvania',
        'PR': 'Puerto Rico',
        'RI': 'Rhode Island',
        'SC': 'South Carolina',
        'SD': 'South Dakota',
        'TN': 'Tennessee',
        'TX': 'Texas',
        'UT': 'Utah',
        'VA': 'Virginia',
        'VI': 'Virgin Islands',
        'VT': 'Vermont',
        'WA': 'Washington',
        'WI': 'Wisconsin',
        'WV': 'West Virginia',
        'WY': 'Wyoming'
}
if __name__ == '__main__':
    import os
    print('why are you running this?')
    dirpath = os.getcwd()
    print(os.path.basename(dirpath)) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_PREC:229
==SiteProjection_PREC:292
    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official mean calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = ''
    if len(sitePlotNormData) == 0:
        sitePlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this site'
        asterisk = '*'
    jDay = len(PORplotData[-1])-1
    if sitePlotNormData[jDay] == 0:
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = sitePlotNormData.index(max(sitePlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" +
                   r"% of Yearly Avg - " + perPeak + r"%<br>" +
                   r"Days " + tense +
                   r" End of WY - " + daysToPeak + r"<br>"
                   r"Percentile Rank- " + centile)

    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 4 files
==SitePOR_PREC:49
==SitePOR_SWE:54
==SiteProjection_PREC:54
==SiteProjection_SWE:54
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day
    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        sitePlotNormData = np.array(normData[0]['values'], dtype=np.float)
    sitePlotNormData = sitePlotNormData.tolist()
    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})

    siteBeginDate = min(beginDateDict.values())

    sYear = siteBeginDate.year
    if siteBeginDate.year > sYear:
        if siteBeginDate.month < 10:
            sYear = siteBeginDate.year
        else:
            if siteBeginDate.month == 10 and siteBeginDate.day == 1:
                sYear = siteBeginDate.year
            else:
                sYear = siteBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = today.date().strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    sitePlotData = np.array(data[0]['values'], dtype=np.float)

    PORplotData = list([sitePlotData[i:i+366]
                    for i in range(0,len(sitePlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:152
==onHold.lib.awdbToolsJson:135
def calcSMSAvg(dataSMS):
    smsAllAvg = {}
    allSites = list(dataSMS[-2].keys())
    for smsSite in allSites:
        sms40 = []
        sms20 = []
        sms8 = []
        sms4 = []
        sms2 = []
        if dataSMS[-40]: sms40 = list(dataSMS[-40][smsSite])
        if dataSMS[-20]: sms20 = list(dataSMS[-20][smsSite])
        if dataSMS[-8]: sms8 = list(dataSMS[-8][smsSite])
        if dataSMS[-4]: sms4 = list(dataSMS[-4][smsSite])
        if dataSMS[-2]: sms2 = list(dataSMS[-2][smsSite])
        if sms2 and sms4 and sms8 and sms20 and sms40:
            sms40[:] = [np.asarray(x)*(15/50) if not math.isnan(x) else
                 np.nan for x in sms40]
            sms20[:] = [np.asarray(x)*(15/50) if not math.isnan(x) else
                 np.nan for x in sms20]
            sms8[:] = [np.asarray(x)*(10/50) if not math.isnan(x) else
                np.nan for x in sms8]
            sms4[:] = [np.asarray(x)*(5/50) if not math.isnan(x) else
                np.nan for x in sms4]
            sms2[:] = [np.asarray(x)*(5/50) if not math.isnan(x) else
                np.nan for x in sms2]
            smsAll = list([sms40,sms20,sms8,sms4,sms2])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms2 and sms8 and sms20:
            sms20[:] = [np.asarray(x)*(12/26) if not math.isnan(x) else
                 np.nan for x in sms20]
            sms8[:] = [np.asarray(x)*(9/26) if not math.isnan(x) else
                np.nan for x in sms8]
            sms2[:] = [np.asarray(x)*(5/26) if not math.isnan(x) else
                np.nan for x in sms2]
            smsAll = list([sms20,sms8,sms2])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms2 and sms8:
            sms8[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms8]
            sms2[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms2]
            smsAll = list([sms8,sms2])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms20 and sms8:
            sms8[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms8]
            sms20[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms20]
            smsAll = list([sms8,sms20])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms20 and sms2:
            sms2[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms2]
            sms20[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms20]
            smsAll = list([sms2,sms20])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        else:
            smsAvg = []
        smsAllAvg.update({str(smsSite) : list(smsAvg)})
    return smsAllAvg (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_SWE:67
==SitePOR_TAVG:57
==SiteProjection_SWE:67
    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})

    siteBeginDate = min(beginDateDict.values())

    sYear = siteBeginDate.year
    if siteBeginDate.year > sYear:
        if siteBeginDate.month < 10:
            sYear = siteBeginDate.year
        else:
            if siteBeginDate.month == 10 and siteBeginDate.day == 1:
                sYear = siteBeginDate.year
            else:
                sYear = siteBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = today.date().strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    sitePlotData = np.array(data[0]['values'], dtype=np.float)

    PORplotData = list([sitePlotData[i:i+366]
                    for i in range(0,len(sitePlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] + (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:60
==BasinProjection_SWE:60
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        basinNormData = [np.array(x['values'], dtype=np.float) for x in
                         normData if x['values']]

    if basinNormData:
        basinPlotNormData = list(
                np.nanmean(np.array([i for i in basinNormData]), axis=0))

        validTrip[:] = [x for index, x in enumerate(validTrip) if
                 normData[index]['values']]

    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})
    basinBeginDate = min(beginDateDict.values())

    sYear = basinBeginDate.year
    if basinBeginDate.year > sYear:
        if basinBeginDate.month < 10:
            sYear = basinBeginDate.year
        else:
            if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                sYear = basinBeginDate.year
            else:
                sYear = basinBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = (today.date() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp)) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_TAVG:76
==BasinProjection_PREC:90
        beginDateDict = {}
        for siteMeta in meta:
            beginDateDict.update(
                    {str(siteMeta['stationTriplet']) :
                        dt.strptime(str(siteMeta['beginDate']),
                                    "%Y-%m-%d %H:%M:%S")})
        basinBeginDate = min(beginDateDict.values())

        sYear = basinBeginDate.year
        if basinBeginDate.year > sYear:
            if basinBeginDate.month < 10:
                sYear = basinBeginDate.year
            else:
                if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                    sYear = basinBeginDate.year
                else:
                    sYear = basinBeginDate.year + 1

        sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
        eDate = (today.date() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")

        data = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            data.append(trimToOct1(jTemp))

        for dataSite in data:
            if dataSite:
                padMissingData(dataSite,sDate,eDate)

        plotData = [np.array(x['values'], dtype=np.float) for x in data]

        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            basinPlotData = list(np.nanmean(
                    np.array([i for i in plotData]), axis=0))

        PORplotData = list([basinPlotData[i:i+366]
                        for i in range(0,len(basinPlotData),366)])

        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
                statsData[151] = statsData[150]
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore", category=RuntimeWarning)
                    minData = [np.nanmin(a) for a in statsData]
                    maxData = [np.nanmax(a) for a in statsData]
                    meanData = [np.nanmean(a) for a in statsData]
                    lowestData = [np.nanpercentile(a,10) for a in statsData]
                    highestData = [np.nanpercentile(a,90) for a in statsData]
                    lowData = [np.nanpercentile(a,30) for a in statsData]
                    highData = [np.nanpercentile(a,70) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:277
==BasinProjection_SWE:325
    if basinPlotNormData[jDay] == 0:
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = basinPlotNormData.index(max(basinPlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" +
                   r"% Normal Peak - " + perPeak + r"%<br>" +
                   r"Days " + tense +
                   r" Normal Peak - " + daysToPeak + r"<br>"
                   r"Percentile Rank- " + centile)

    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:39
==BasinProjection_SWE:39
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    plotData = []
    basinPlotData = []
    PORplotData = []
    basinNormData = []
    basinPlotNormData = []
    validTrip = []

    networks = [r'SNTL',r'SCAN',r'SNTLT']
    sensor = r"WTEQ"

    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        basinNormData = [np.array(x['values'], dtype=np.float) for x in
                         normData if x['values']]

    if basinNormData:
        basinPlotNormData = list(
                np.nanmean(np.array([i for i in basinNormData]), axis=0))

        validTrip[:] = [x for index, x in enumerate(validTrip) if
                 normData[index]['values']]

    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")}) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:270
==BasinProjection_PREC:325
    if basinPlotNormData[jDay] == 0:
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = basinPlotNormData.index(max(basinPlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" +
                   r"% of Yearly Avg - " + perPeak + r"%<br>" +
                   r"Days " + tense +
                   r" End of WY - " + daysToPeak + r"<br>"
                   r"Percentile Rank- " + centile)

    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:39
==BasinProjection_PREC:39
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    plotData = []
    basinPlotData = []
    PORplotData = []
    basinNormData = []
    basinPlotNormData = []
    validTrip = []

    networks = [r'SNTL',r'SCAN',r'SNTLT']
    sensor = r"PREC"

    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        basinNormData = [np.array(x['values'], dtype=np.float) for x in
                         normData if x['values']]

    if basinNormData:
        basinPlotNormData = list(
                np.nanmean(np.array([i for i in basinNormData]), axis=0))

        validTrip[:] = [x for index, x in enumerate(validTrip) if
                 normData[index]['values']]

    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")}) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:244
==onHold.lib.awdbToolsJson:225
def calcSTOAvg(dataSMS):
    smsAllAvg = {}
    allSites = list(dataSMS[-2].keys())
    for smsSite in allSites:
        sms8 = []
        sms4 = []
        sms2 = []
        if dataSMS[-8]: sms8 = list(dataSMS[-8][smsSite])
        if dataSMS[-4]: sms4 = list(dataSMS[-4][smsSite])
        if dataSMS[-2]: sms2 = list(dataSMS[-2][smsSite])
        if sms2 and sms4 and sms8:
            sms8[:] = [np.asarray(x)*(1/3) if not math.isnan(x) else
                np.nan for x in sms8]
            sms4[:] = [np.asarray(x)*(1/3) if not math.isnan(x) else
                np.nan for x in sms4]
            sms2[:] = [np.asarray(x)*(1/3) if not math.isnan(x) else
                np.nan for x in sms2]
            smsAll = list([sms8,sms4,sms2])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms2 and sms8:
            sms8[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms8]
            sms2[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms2]
            smsAll = list([sms8,sms2])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms2 and sms4:
            sms4[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms4]
            sms2[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms2]
            smsAll = list([sms4,sms2])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms4 and sms8:
            sms8[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms8]
            sms4[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms4]
            smsAll = list([sms8,sms4])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms2:
            sms2[:] = [np.asarray(x) if not math.isnan(x) else
                np.nan for x in sms2]
            smsAvg = list(sms2)
        elif sms4:
            sms4[:] = [np.asarray(x) if not math.isnan(x) else
                np.nan for x in sms4]
            smsAvg = list(sms4)
        elif sms8:
            sms8[:] = [np.asarray(x) if not math.isnan(x) else
                np.nan for x in sms8]
            smsAvg = list(sms8)
        else:
            smsAvg = []
        smsAllAvg.update({str(smsSite) : list(smsAvg)})
    return smsAllAvg (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_SWE:247
==SiteProjection_SWE:301
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = sitePlotNormData.index(max(sitePlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" +
                   r"% Normal Peak - " + perPeak + r"%<br>" +
                   r"Days " + tense +
                   r" Normal Peak - " + daysToPeak + r"<br>"
                   r"Percentile Rank- " + centile)

    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:335
==BasinProjection_SWE:383
        height=622, width=700, autosize=False,
        yaxis=dict(title=r'Snow Water Equivalent (in.)', hoverformat=".1f",
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        )
    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    sensor = 'WTEQ'

    for state in states:
        delimiter = ','
        basinTable = {}
        basinDefDir = path.join(master_dir, r'static')
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable:

            bt = time.time() (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:170
==BasinPOR_SWE:174
==BasinProjection_PREC:239
==SitePOR_PREC:136
==SitePOR_SWE:146
==SitePOR_TAVG:136
==SiteProjection_PREC:212
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
 (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:170
==BasinPOR_SWE:174
==BasinProjection_SWE:241
==SitePOR_PREC:136
==SitePOR_SWE:146
==SitePOR_TAVG:136
==SiteProjection_SWE:215
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='none',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=lowestData
                                ,legendgroup='centiles',name=r'10%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,0,1,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if lowData:
            trace.extend(
                    [go.Scatter(x=date_series,y=lowData,
                                legendgroup='centiles',name=r'30%',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(237,237,0,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(115,237,115,0.15)',
                                fill='tonexty',showlegend=True,
                                hoverinfo='none')])
        if highestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highestData,
                                legendgroup='centiles',connectgaps=True,
                                name=r'90%',visible=True
                                ,mode='line',line=dict(width=0),
                                fillcolor='rgba(0,237,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')])
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData
                                ,legendgroup='centiles',name=r'Max',
                                visible=True,mode='line',
                                line=dict(width=0),connectgaps=True,
                                fillcolor='rgba(1,0,237,0.15)',
                                fill='tonexty',showlegend=False,
                                hoverinfo='none')]) (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_PREC:62
==SitePOR_TAVG:57
==SiteProjection_PREC:67
    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})

    siteBeginDate = min(beginDateDict.values())

    sYear = siteBeginDate.year
    if siteBeginDate.year > sYear:
        if siteBeginDate.month < 10:
            sYear = siteBeginDate.year
        else:
            if siteBeginDate.month == 10 and siteBeginDate.day == 1:
                sYear = siteBeginDate.year
            else:
                sYear = siteBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = today.date().strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    sitePlotData = np.array(data[0]['values'], dtype=np.float)

    PORplotData = list([sitePlotData[i:i+366]
                    for i in range(0,len(sitePlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_PREC:294
==SiteProjection_PREC:357
        height=622, width=700, autosize=False,
        yaxis=dict(title=r'Precipitation (in.)',hoverformat='.1f',
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        )
    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    networks = ['SNTL','SCAN','SNTLT']
    for state in states:
        sensor = r"PREC"
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
        with request.urlopen(url) as data:
            meta = json.loads(data.read().decode())

        meta[:] = [x for x in meta if
            x['stationTriplet'].split(':')[1] in state and
            x['stationTriplet'].split(':')[2] in networks]

        for site in meta:

            bt = time.time()
            site_triplet = site['stationTriplet']
            siteName = site['name'] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_SWE:304
==SiteProjection_SWE:358
        height=622, width=700, autosize=False,
        yaxis=dict(title=r'Snow Water Equivalent (in.)',hoverformat='.1f',
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        )
    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    networks = ['SNTL','SCAN','SNTLT']
    for state in states:
        sensor = r"WTEQ"
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
        with request.urlopen(url) as data:
            meta = json.loads(data.read().decode())

        meta[:] = [x for x in meta if
            x['stationTriplet'].split(':')[1] in state and
            x['stationTriplet'].split(':')[2] in networks]

        for site in meta: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SMS:88
==SitePOR_SMS:74
        sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
        eDate = (today.date() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")

        dataDict = {}
        sensorDepths = [-8,-20]#[-2,-4,-8,-20,-40]     #
        for sensorDepth in sensorDepths:
            data = []
            for triplet in validTrip:
                url = '/'.join([dataUrl,'DAILY', sensor,
                                triplet.replace(':','_') + '.json'])
                with request.urlopen(url) as d:
                    jTemp = json.loads(d.read().decode())
                data.append(trimToOct1(jTemp))
            depthData = {}
            for dataSite in data:
                siteData = []
                if hasattr(dataSite,r'values'):
                    if dataSite['values']:
                        sat = getSaturation(
                                sensorDepth,
                                str(dataSite['stationTriplet']))
#                                sat = np.nanmax([float(c) for c in dataSite.values if c != None])
                        padMissingData(dataSite,sDate,eDate)
                        siteData = np.array(dataSite['values'], dtype=np.float)
                        siteData[:] = [100 if 100*(c/float(sat)) > 100 else
                                100*(c/float(sat)) for c in siteData]
                    depthData.update(
                            {str(dataSite['stationTriplet']) :
                                list(siteData)})

            dataDict.update({sensorDepth : dict(depthData)})
            depthData.clear()

        plotData = {}
#        plotData = calcSMSAvg(dataDict)
        plotData = integrateSMS(dataDict)
#            numDays = max(len(l) for l in plotData.values())

        for siteID, smsValues in plotData.items():
            plotData.update(
                    {siteID : fillMissingData(plotData[siteID],30)})
        smsPlotData = list(plotData.values())
 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_SWE:292
==BasinProjection_SWE:340
==SitePOR_SWE:261
==SiteProjection_SWE:315
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" +
                   r"% Normal Peak - " + perPeak + r"%<br>" +
                   r"Days " + tense +
                   r" Normal Peak - " + daysToPeak + r"<br>"
                   r"Percentile Rank- " + centile)

    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:285
==BasinProjection_PREC:340
==SitePOR_PREC:251
==SiteProjection_PREC:314
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" +
                   r"% of Yearly Avg - " + perPeak + r"%<br>" +
                   r"Days " + tense +
                   r" End of WY - " + daysToPeak + r"<br>"
                   r"Percentile Rank- " + centile)

    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:112
==BasinProjection_PREC:111
    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    plotData = [np.array(x['values'], dtype=np.float) for x in data]

    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        basinPlotData = list(np.nanmean(
                np.array([i for i in plotData]), axis=0))

    PORplotData = list([basinPlotData[i:i+366]
                    for i in range(0,len(basinPlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
    else: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:120
==BasinProjection_SWE:118
    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    plotData = [np.array(x['values'], dtype=np.float) for x in data]

    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        basinPlotData = list(np.nanmean(
                np.array([i for i in plotData]), axis=0))

    PORplotData = list([basinPlotData[i:i+366]
                    for i in range(0,len(basinPlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[get_last_non_zero_index(
                                          maxData[0:305]) + future_date_pad]]))
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:417
==BasinProjection_SWE:417
    for state in states:
        delimiter = ','
        basinTable = {}
        basinDefDir = path.join(master_dir, r'static')
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable:

            bt = time.time()
            dirPath = path.join(master_dir, 'basinCharts','Proj', sensor, state)
            plotName = path.join(dirPath, basinName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                basinSites = getBasinSites(basinName,basinTable)
                fig = go.Figure(updtChart(basinName,basinSites))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     No sites with that sensor in that basin, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds')
 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:363
==BasinPOR_STO:315
==BasinPOR_SWE:369
==BasinPOR_TAVG:312
    for state in states:
        delimiter = ','
        basinTable = {}
        basinDefDir = path.join(master_dir, r'static')
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable:

            bt = time.time()
            dirPath = path.join(master_dir, 'basinCharts','POR', sensor, state)
            plotName = path.join(dirPath, basinName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                basinSites = getBasinSites(basinName,basinTable)
                fig = go.Figure(updtChart(basinName,basinSites))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     No sites with that sensor in that basin, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds')
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:112
==BasinPOR_TAVG:97
    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    plotData = [np.array(x['values'], dtype=np.float) for x in data]

    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        basinPlotData = list(np.nanmean(
                np.array([i for i in plotData]), axis=0))

    PORplotData = list([basinPlotData[i:i+366]
                    for i in range(0,len(basinPlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:60
==BasinProjection_PREC:60
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        basinNormData = [np.array(x['values'], dtype=np.float) for x in
                         normData if x['values']]

    if basinNormData:
        basinPlotNormData = list(
                np.nanmean(np.array([i for i in basinNormData]), axis=0))

        validTrip[:] = [x for index, x in enumerate(validTrip) if
                 normData[index]['values']]

    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")}) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:60
==BasinProjection_SWE:60
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)

        basinNormData = [np.array(x['values'], dtype=np.float) for x in
                         normData if x['values']]

    if basinNormData:
        basinPlotNormData = list(
                np.nanmean(np.array([i for i in basinNormData]), axis=0))

        validTrip[:] = [x for index, x in enumerate(validTrip) if
                 normData[index]['values']]

    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")}) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SMS:58
==BasinPOR_STO:58
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        beginDateDict = {}
        for siteMeta in meta:
            beginDateDict.update(
                    {str(siteMeta['stationTriplet']) :
                        dt.strptime(str(siteMeta['beginDate']),
                                    "%Y-%m-%d %H:%M:%S")})
        basinBeginDate = min(beginDateDict.values())

        sYear = basinBeginDate.year
        if basinBeginDate.year > sYear:
            if basinBeginDate.month < 10:
                sYear = basinBeginDate.year
            else:
                if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                    sYear = basinBeginDate.year
                else:
                    sYear = basinBeginDate.year + 1

        sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
        eDate = (today.date() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")

        dataDict = {} (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_SMS:58
==BasinPOR_STO:58
==BasinPOR_TAVG:64
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        beginDateDict = {}
        for siteMeta in meta:
            beginDateDict.update(
                    {str(siteMeta['stationTriplet']) :
                        dt.strptime(str(siteMeta['beginDate']),
                                    "%Y-%m-%d %H:%M:%S")})
        basinBeginDate = min(beginDateDict.values())

        sYear = basinBeginDate.year
        if basinBeginDate.year > sYear:
            if basinBeginDate.month < 10:
                sYear = basinBeginDate.year
            else:
                if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                    sYear = basinBeginDate.year
                else:
                    sYear = basinBeginDate.year + 1

        sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
        eDate = (today.date() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")
 (duplicate-code)
R:  1, 0: Similar lines in 6 files
==SitePOR_PREC:296
==SitePOR_SMS:265
==SitePOR_SWE:306
==SitePOR_TAVG:296
==SiteProjection_PREC:359
==SiteProjection_SWE:360
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        )
    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    networks = ['SNTL','SCAN','SNTLT']
    for state in states: (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_SWE:112
==BasinPOR_TAVG:97
==BasinProjection_PREC:111
    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    plotData = [np.array(x['values'], dtype=np.float) for x in data]

    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        basinPlotData = list(np.nanmean(
                np.array([i for i in plotData]), axis=0))

    PORplotData = list([basinPlotData[i:i+366]
                    for i in range(0,len(basinPlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_PREC:295
==BasinPOR_SWE:302
==BasinProjection_PREC:350
==BasinProjection_SWE:350
==SitePOR_PREC:261
==SitePOR_SWE:271
==SiteProjection_PREC:324
==SiteProjection_SWE:325
                   r"Percentile Rank- " + centile)

    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 10 files
==BasinPOR_SMS:282
==BasinPOR_SWE:337
==BasinProjection_PREC:385
==BasinProjection_SWE:385
==SitePOR_PREC:296
==SitePOR_SMS:265
==SitePOR_SWE:306
==SitePOR_TAVG:296
==SiteProjection_PREC:359
==SiteProjection_SWE:360
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        )
    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY'] (duplicate-code)
R:  1, 0: Similar lines in 9 files
==BasinPOR_PREC:297
==BasinPOR_SWE:304
==BasinProjection_PREC:352
==BasinProjection_SWE:352
==SitePOR_PREC:263
==SitePOR_SWE:273
==SitePOR_TAVG:263
==SiteProjection_PREC:326
==SiteProjection_SWE:327
    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left',
                showarrow=False),
                dict(font=dict(size=10),
                text=annoData,
                x=0,y=0.9,
                yref='paper',xref='paper',
                align='left',
                xanchor="left", yanchor="top",
                showarrow=False)],
        legend=dict(traceorder='reversed',tracegroupgap=1,
                    bordercolor='#E2E2E2',borderwidth=2),
        showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:331
==BasinPOR_TAVG:280
            xaxis=dict(
                range=sliderDates,
                tickformat="%b %e",
                rangeselector=dict(
                    buttons=list([
                            dict(count=9,
                                 label='Jan',
                                 step='month',
                                 stepmode='todate'),
                            dict(count=6,
                                 label='Apr',
                                 step='month',
                                 stepmode='todate'),
                            dict(count=3,
                                 label='July',
                                 step='month',
                                 stepmode='todate'),
                            dict(label='WY', step='all')
                        ])
                ),
                rangeslider=dict(thickness=0.1),
                type='date'
            )
            )

        return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY'] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:214
==onHold.lib.awdbToolsJson:196
def integrateSMS(dataSMS):
    smsAllAvg = {}
    allSites = list(dataSMS[-8].keys())
#    allSites20 = list(dataSMS[-20].keys())
#    allSites = allSites8 + list(set(allSites20) - set(allSites8))
    for smsSite in allSites:
        sms20 = []
        sms8 = []
        if dataSMS[-20]: sms20 = list(dataSMS[-20][smsSite])
        if dataSMS[-8]: sms8 = list(dataSMS[-8][smsSite])
        if sms20 and sms8:
            sms8[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms8]
            sms20[:] = [np.asarray(x)*(1/2) if not math.isnan(x) else
                np.nan for x in sms20]
            smsAll = list([sms8,sms20])
            smsAvg = [sum(x) for x in zip(*smsAll)]
        elif sms8:
            sms8[:] = [np.asarray(x) if not math.isnan(x) else
                np.nan for x in sms8]
            smsAvg = list(sms8)
        elif sms20:
            sms20[:] = [np.asarray(x) if not math.isnan(x) else
                np.nan for x in sms20]
            smsAvg = list(sms20)
        else:
            smsAvg = []
        smsAllAvg.update({str(smsSite) : list(smsAvg)})
    return smsAllAvg (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_PREC:329
==SitePOR_SWE:339
==SitePOR_TAVG:329
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
        with request.urlopen(url) as data:
            meta = json.loads(data.read().decode())

        meta[:] = [x for x in meta if
            x['stationTriplet'].split(':')[1] in state and
            x['stationTriplet'].split(':')[2] in networks]

        for site in meta:

            bt = time.time()
            site_triplet = site['stationTriplet']
            siteName = site['name']
            dirPath = path.join(master_dir, 'siteCharts','POR', sensor, state)
            plotName = path.join(dirPath, siteName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                fig = go.Figure(updtChart(site_triplet,siteName))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     Something went wrong, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds')
 (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_SMS:156
==BasinPOR_STO:157
==BasinPOR_TAVG:136
==SitePOR_SMS:139
==SitePOR_TAVG:113
                future_date_pad = 366 - len(PORplotData[-1]) - 1
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[len(PORplotData[-1])+
                                                   future_date_pad]]))
        else:
            sliderDates = list(chain([(date_series[0])] +
                                      [date_series[-1]]))

        if len(PORplotData) > 0:
            for index, i in enumerate(PORplotData):
                if index == len(PORplotData)-1:
                    trace.extend(
                            [go.Scatter(
                                    x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible=True,connectgaps=True,
                                    line=dict(color='rgb(0,0,0)'))])
                elif np.nansum(i) > 0:
                    trace.extend(
                            [go.Scatter(x=date_series,y=i,
                                        name=str(sYear + index + 1),
                                        visible='legendonly',
                                        connectgaps=True)])
        if meanData:
            if lowestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=minData
                                    ,legendgroup='centiles',name=r'Min',
                                    visible=True,mode='line', (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SMS:126
==BasinPOR_STO:127
        for siteID, smsValues in plotData.items():
            plotData.update(
                    {siteID : fillMissingData(plotData[siteID],30)})
        smsPlotData = list(plotData.values())

        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            basinPlotData = list(np.nanmean(
                    np.array([i for i in smsPlotData if i]), axis=0))

        PORplotData = list([basinPlotData[i:i+366]
                        for i in range(0,len(basinPlotData),366)])

        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
            statsData[151] = statsData[150]
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", category=RuntimeWarning)
                minData = [np.nanmin(a) for a in statsData]
                maxData = [np.nanmax(a) for a in statsData]
                meanData = [np.nanmean(a) for a in statsData]
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                highestData = [np.nanpercentile(a,90) for a in statsData]
                lowData = [np.nanpercentile(a,30) for a in statsData]
                highData = [np.nanpercentile(a,70) for a in statsData]
            future_date_pad = 30 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:115
==onHold.lib.awdbToolsJson:100
def createSWEProjTrace(i,jDay,lastValue,nanList):
    dailyData = list(i)
    if jDay < 151 and np.isnan(dailyData[151]):
            dailyData[151] = dailyData[150]
    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        peakSWEday = np.array(dailyData).argmax()
        meltOut = 0
        for index,day in enumerate(dailyData[peakSWEday:]):
            if day < 0.1:
                meltOut = index + peakSWEday
                break
        if meltOut > jDay:
            projection = list(np.nancumsum(np.diff(dailyData[jDay:meltOut])))
            projTrace = nanList + [lastValue] + [lastValue + x if abs(x) <
                          lastValue or jDay < peakSWEday else np.nan for x in projection]
            projTrace[:] = [x if x >= 0 else np.nan for x in projTrace]
            meltList = [projTrace[-1]]
            for t in range(0,366-len(projTrace)):
                meltRate = 0.00008*(len(projTrace) + t)**2 - 0.0159*(len(projTrace) + t) + 0.7903
                if meltRate < meltList[-1]:
                    meltList.extend([meltList[-1] - meltRate])
                else:
                    meltList.extend([0])
            projTrace.extend(meltList)
        else:
            projTrace = [np.nan]*366
    return projTrace (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_PREC:230
==SiteProjection_PREC:293
==SiteProjection_SWE:294
    asterisk = ''
    if len(sitePlotNormData) == 0:
        sitePlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this site'
        asterisk = '*'
    jDay = len(PORplotData[-1])-1
    if sitePlotNormData[jDay] == 0:
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = sitePlotNormData.index(max(sitePlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" + (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_TAVG:76
==BasinProjection_SWE:90
        beginDateDict = {}
        for siteMeta in meta:
            beginDateDict.update(
                    {str(siteMeta['stationTriplet']) :
                        dt.strptime(str(siteMeta['beginDate']),
                                    "%Y-%m-%d %H:%M:%S")})
        basinBeginDate = min(beginDateDict.values())

        sYear = basinBeginDate.year
        if basinBeginDate.year > sYear:
            if basinBeginDate.month < 10:
                sYear = basinBeginDate.year
            else:
                if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                    sYear = basinBeginDate.year
                else:
                    sYear = basinBeginDate.year + 1

        sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
        eDate = (today.date() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")

        data = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            data.append(trimToOct1(jTemp)) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:356
==BasinProjection_PREC:410
    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    sensor = 'PREC'

    for state in states:
        delimiter = ','
        basinTable = {}
        basinDefDir = path.join(master_dir, r'static')
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable:

            bt = time.time() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:330
==BasinPOR_STO:283
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        )

    return {'data': trace,
            'layout': layout} (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:320
==BasinProjection_SWE:320
    asterisk = ''
    if not basinPlotNormData:
        basinPlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this basin'
        asterisk = '*'
    if basinPlotNormData[jDay] == 0:
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = basinPlotNormData.index(max(basinPlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" + (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_STO:284
==BasinPOR_TAVG:280
            xaxis=dict(
                range=sliderDates,
                tickformat="%b %e",
                rangeselector=dict(
                    buttons=list([
                            dict(count=9,
                                 label='Jan',
                                 step='month',
                                 stepmode='todate'),
                            dict(count=6,
                                 label='Apr',
                                 step='month',
                                 stepmode='todate'),
                            dict(count=3,
                                 label='July',
                                 step='month',
                                 stepmode='todate'),
                            dict(label='WY', step='all')
                        ])
                ),
                rangeslider=dict(thickness=0.1),
                type='date'
            )
            )

    return {'data': trace,
            'layout': layout} (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:328
==BasinProjection_PREC:383
        height=622, width=700, autosize=False,
        yaxis=dict(title=r'Precipitation (in.)', hoverformat=".1f",
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        ) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_SWE:132
==SitePOR_SWE:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[get_last_non_zero_index(
                                          maxData[0:305]) + future_date_pad]]))
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:134
==SiteProjection_SWE:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[get_last_non_zero_index(
                                          maxData[0:305]) + future_date_pad]]))
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
 (duplicate-code)
R:  1, 0: Similar lines in 6 files
==BasinPOR_SMS:160
==BasinPOR_STO:161
==BasinPOR_SWE:155
==BasinPOR_TAVG:140
==SitePOR_SMS:143
==SitePOR_SWE:127
        else:
                sliderDates = list(chain([(date_series[0])] +
                                          [date_series[-1]]))

        if len(PORplotData) > 0:
            for index, i in enumerate(PORplotData):
                if index == len(PORplotData)-1:
                    trace.extend(
                            [go.Scatter(
                                    x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible=True,connectgaps=True,
                                    line=dict(color='rgb(0,0,0)'))])
                elif np.nansum(i) > 0:
                    trace.extend(
                            [go.Scatter(x=date_series,y=i,
                                        name=str(sYear + index + 1),
                                        visible='legendonly',
                                        connectgaps=True)])
        if meanData:
            if lowestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=minData
                                    ,legendgroup='centiles',name=r'Min',
                                    visible=True,mode='line', (duplicate-code)
R:  1, 0: Similar lines in 12 files
==BasinPOR_PREC:330
==BasinPOR_SMS:282
==BasinPOR_STO:283
==BasinPOR_SWE:337
==BasinProjection_PREC:385
==BasinProjection_SWE:385
==SitePOR_PREC:296
==SitePOR_SMS:265
==SitePOR_SWE:306
==SitePOR_TAVG:296
==SiteProjection_PREC:359
==SiteProjection_SWE:360
                   tickformat="0f"),
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        ) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:301
==onHold.lib.awdbToolsJson:281
def getSaturation(depth,triplet,default=40):
    delimiter = ','
    satTable = {}
    with open(os.path.join(static_dir,'soilsSat.csv'), 'r') as data_file:
        data = csv.reader(data_file, delimiter=delimiter)
        headers = next(data)[1:]
        for row in data:
            temp_dict = {}
            name = row[0]
            values = []
            for x in row[1:]:
                values.append(x)
            for i in range(len(values)):
                temp_dict[headers[i]] = values[i]
            satTable[name] = temp_dict
    siteTrip = triplet.split(':')
    site = satTable.get(siteTrip[0])
    sat = None
    if site:
        sat = site.get(str(depth))
    if sat:
        return sat
    else:
        return default (duplicate-code)
R:  1, 0: Similar lines in 11 files
==BasinPOR_SMS:283
==BasinPOR_SWE:338
==BasinPOR_TAVG:280
==BasinProjection_PREC:386
==BasinProjection_SWE:386
==SitePOR_PREC:297
==SitePOR_SMS:266
==SitePOR_SWE:307
==SitePOR_TAVG:297
==SiteProjection_PREC:360
==SiteProjection_SWE:361
        xaxis=dict(
            range=sliderDates,
            tickformat="%b %e",
            rangeselector=dict(
                buttons=list([
                    dict(count=9,
                         label='Jan',
                         step='month',
                         stepmode='todate'),
                    dict(count=6,
                         label='Apr',
                         step='month',
                         stepmode='todate'),
                    dict(count=3,
                         label='July',
                         step='month',
                         stepmode='todate'),
                    dict(label='WY', step='all')
                ])
            ),
            rangeslider=dict(thickness=0.1),
            type='date'
        )
        ) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:120
==BasinPOR_TAVG:105
==BasinProjection_PREC:119
==BasinProjection_SWE:118
    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)

    plotData = [np.array(x['values'], dtype=np.float) for x in data]

    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        basinPlotData = list(np.nanmean(
                np.array([i for i in plotData]), axis=0))

    PORplotData = list([basinPlotData[i:i+366]
                    for i in range(0,len(basinPlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:232
==BasinProjection_PREC:294
    if basinPlotNormData:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=basinPlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if basinPlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:236
==BasinProjection_SWE:295
    if basinPlotNormData:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=basinPlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if basinPlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_SMS:256
==BasinPOR_STO:257
==BasinPOR_TAVG:253
==SitePOR_SMS:239
        layout = go.Layout(
                images= [dict(
                    source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                    xref="paper",
                    yref="paper",
                    x= 0,
                    y= 0.9,
                    xanchor="left", yanchor="bottom",
                    sizex= 0.4,
                    sizey= 0.1,
                    opacity= 0.5,
                    layer= "above"
                )],
                annotations=[dict(
                    font=dict(size=10),
                    text=annoText,
                    x=0,y=-0.41,
                    yref='paper',xref='paper',
                    align='left',
                    showarrow=False)],
            legend=dict(traceorder='reversed',tracegroupgap=1,
                        bordercolor='#E2E2E2',borderwidth=2),
            showlegend = True, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:242
==SitePOR_PREC:208
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
    if maxData:
        trace.extend(
                [go.Scatter(x=date_series,y=maxData,
                            name=r'Max',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(0,0,237,0.4)'))])

    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official mean calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = '' (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:270
==BasinPOR_SWE:277
==BasinProjection_PREC:325
==BasinProjection_SWE:325
    if basinPlotNormData[jDay] == 0:
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/basinPlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(basinPlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = basinPlotNormData.index(max(basinPlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" + (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_PREC:237
==SitePOR_SWE:247
==SiteProjection_PREC:300
        perNorm = r'N/A'
    else:
        perNorm = str('{0:g}'.format(100*round(
                PORplotData[-1][jDay]/sitePlotNormData[jDay],2)))
    perPeak = str('{0:g}'.format(100*round(
            PORplotData[-1][jDay]/max(sitePlotNormData),2)))
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'

    dayOfPeak = sitePlotNormData.index(max(sitePlotNormData))
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" + (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_STO:315
==BasinPOR_SWE:369
==BasinPOR_TAVG:312
==BasinProjection_PREC:417
    for state in states:
        delimiter = ','
        basinTable = {}
        basinDefDir = path.join(master_dir, r'static')
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable:

            bt = time.time() (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_SMS:70
==BasinPOR_STO:70
==BasinProjection_PREC:90
==BasinProjection_SWE:90
    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})
    basinBeginDate = min(beginDateDict.values())

    sYear = basinBeginDate.year
    if basinBeginDate.year > sYear:
        if basinBeginDate.month < 10:
            sYear = basinBeginDate.year
        else:
            if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                sYear = basinBeginDate.year
            else:
                sYear = basinBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = (today.date() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")
 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_PREC:242
==SitePOR_SWE:218
==SitePOR_TAVG:208
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
    if maxData:
        trace.extend(
                [go.Scatter(x=date_series,y=maxData,
                            name=r'Max',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(0,0,237,0.4)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:363
==BasinPOR_STO:315
==BasinPOR_TAVG:312
==BasinProjection_SWE:417
    for state in states:
        delimiter = ','
        basinTable = {}
        basinDefDir = path.join(master_dir, r'static')
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable:

            bt = time.time() (duplicate-code)
R:  1, 0: Similar lines in 6 files
==BasinPOR_PREC:155
==BasinPOR_SMS:164
==BasinPOR_STO:165
==BasinPOR_TAVG:144
==SitePOR_PREC:121
==SitePOR_SMS:147
        if len(PORplotData) > 0:
            for index, i in enumerate(PORplotData):
                if index == len(PORplotData)-1:
                    trace.extend(
                            [go.Scatter(
                                    x=date_series,y=i,
                                    name=str(sYear + index + 1),
                                    visible=True,connectgaps=True,
                                    line=dict(color='rgb(0,0,0)'))])
                elif np.nansum(i) > 0:
                    trace.extend(
                            [go.Scatter(x=date_series,y=i,
                                        name=str(sYear + index + 1),
                                        visible='legendonly',
                                        connectgaps=True)])
        if meanData:
            if lowestData:
                trace.extend(
                        [go.Scatter(x=date_series,y=minData
                                    ,legendgroup='centiles',name=r'Min',
                                    visible=True,mode='line', (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:134
==SitePOR_PREC:101
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        sliderDates = list(chain([(date_series[0])] +
                                      [date_series[-1]]))
    else:
        sliderDates = list(chain([(date_series[0])] + [date_series[-1]]))
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:345
==onHold.lib.awdbToolsJson:323
def getGeoData(hucList):
    geoData = {'type' : 'FeatureCollection', 'features' : []}
    equalLength = False
    if all(len(i) == len(hucList[0]) for i in hucList):
        equalLength = True
        hucLength = str(len(hucList[0]))
        geojson_path = (os.path.join(static_dir,'GIS/huc' + hucLength + r'.json'))
        with open(geojson_path) as f:
            geoDataJson = json.loads(f.read())
    for huc in hucList:
        if not equalLength:
            hucLength = str(len(huc))
            geojson_path = (os.path.join(static_dir,'GIS/huc' + hucLength + r'.json'))
            with open(geojson_path) as f:
                geoDataJson = json.loads(f.read())
        geoDataTemp = [d for d in geoDataJson['features'] if
                    d['properties'].get('HUC' + hucLength) == huc]
        geoData['features'].extend(geoDataTemp)
    return geoData (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SiteProjection_PREC:402
==SiteProjection_SWE:402
            bt = time.time()
            site_triplet = site['stationTriplet']
            siteName = site['name']
            dirPath = path.join(master_dir, 'siteCharts','Proj', sensor, state)
            plotName = path.join(dirPath, siteName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                fig = go.Figure(updtChart(site_triplet,siteName))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     Something went wrong, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds')
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SiteContour_SMS:245
==SitePOR_SMS:291
                'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    networks = ['SNTL','SCAN','SNTLT']
    for state in states:
        sensor = r"SMS"
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
        with request.urlopen(url) as data:
            meta = json.loads(data.read().decode())

        meta[:] = [x for x in meta if
            x['stationTriplet'].split(':')[1] in state and
            x['stationTriplet'].split(':')[2] in networks]

        for site in meta:

            bt = time.time()
            siteName = site['name'] (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_SWE:134
==BasinProjection_SWE:132
==SitePOR_TAVG:96
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanpercentile(a,50) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        future_date_pad = 14
        if len(PORplotData[-1]) > 351:
            future_date_pad = 366 - len(PORplotData[-1]) - 1
        sliderDates = list(chain([(date_series[0])] + (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SMS:136
==BasinPOR_TAVG:116
        PORplotData = list([basinPlotData[i:i+366]
                        for i in range(0,len(basinPlotData),366)])

        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
                statsData[151] = statsData[150]
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore", category=RuntimeWarning)
                    minData = [np.nanmin(a) for a in statsData]
                    maxData = [np.nanmax(a) for a in statsData]
                    meanData = [np.nanmean(a) for a in statsData]
                    lowestData = [np.nanpercentile(a,10) for a in statsData]
                    highestData = [np.nanpercentile(a,90) for a in statsData]
                    lowData = [np.nanpercentile(a,30) for a in statsData]
                    highData = [np.nanpercentile(a,70) for a in statsData]
                future_date_pad = 30 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:39
==BasinPOR_SWE:39
==BasinProjection_PREC:39
==BasinProjection_SWE:39
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    plotData = []
    basinPlotData = []
    PORplotData = []
    basinNormData = []
    basinPlotNormData = []
    validTrip = []

    networks = [r'SNTL',r'SCAN',r'SNTLT'] (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:363
==BasinPOR_SMS:314
==BasinPOR_STO:315
==BasinPOR_SWE:369
==BasinPOR_TAVG:312
==BasinProjection_PREC:417
==BasinProjection_SWE:417
    for state in states:
        delimiter = ','
        basinTable = {}
        basinDefDir = path.join(master_dir, r'static')
        basinDefFileName = path.join(basinDefDir,'basinDef_' + state + r'.csv')
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable: (duplicate-code)
R:  1, 0: Similar lines in 13 files
==BasinPOR_PREC:297
==BasinPOR_SMS:256
==BasinPOR_STO:257
==BasinPOR_SWE:304
==BasinPOR_TAVG:253
==BasinProjection_PREC:352
==BasinProjection_SWE:352
==SitePOR_PREC:263
==SitePOR_SMS:239
==SitePOR_SWE:273
==SitePOR_TAVG:263
==SiteProjection_PREC:326
==SiteProjection_SWE:327
    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText,
                x=0,y=-0.41,
                yref='paper',xref='paper',
                align='left', (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:326
==onHold.lib.awdbToolsJson:305
def getBasinTable():
    delimiter = ','
    basinTable = {}
    with open(os.path.join(static_dir,'basinDef.csv'), 'r') as data_file:
        data = csv.reader(data_file, delimiter=delimiter)
        headers = next(data)[1:]
        for row in data:
            temp_dict = {}
            name = row[0]
            while name in basinTable:
                name = name + '\u0080'
            values = []
            for x in row[1:]:
                values.append(x)
            for i in range(len(values)):
                temp_dict[headers[i]] = values[i]
            basinTable[name] = temp_dict
    return basinTable (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:83
==onHold.lib.awdbToolsJson:70
    eDateChkSite = dt.strptime(x['endDate'],"%Y-%m-%d %H:%M:%S").date()
    eDateChkBasin = dt.strptime(_eDate,"%Y-%m-%d").date()
    if eDateChkBasin > eDateChkSite:
        eDiff = ((eDateChkBasin - eDateChkSite).days +
                 nonLeapDaysBetween(eDateChkSite, eDateChkBasin))
        x['values'] = list(x['values'] + [np.nan]*eDiff)
    sDateChkSite = dt.strptime(
            x['beginDate'],"%Y-%m-%d %H:%M:%S").date()
    sDateChkBasin =dt.strptime(_sDate,"%Y-%m-%d").date()
    if sDateChkBasin < sDateChkSite:
        sDiff = ((sDateChkSite - sDateChkBasin).days +
                 nonLeapDaysBetween(sDateChkBasin, sDateChkSite))
        x['values'] = list([np.nan]*sDiff + x['values'])
    if sDateChkBasin > sDateChkSite:
        sDiff = ((sDateChkBasin - sDateChkSite).days +
                 nonLeapDaysBetween(sDateChkSite,sDateChkBasin))
        x['values'] = list(x['values'][sDiff:])
    return x (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_PREC:98
==SitePOR_SMS:119
==SiteProjection_PREC:103
        PORplotData = list([sitePlotData[i:i+366]
                        for i in range(0,len(sitePlotData),366)])

        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
            statsData[151] = statsData[150]
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", category=RuntimeWarning)
                minData = [np.nanmin(a) for a in statsData]
                maxData = [np.nanmax(a) for a in statsData]
                meanData = [np.nanmean(a) for a in statsData]
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                highestData = [np.nanpercentile(a,90) for a in statsData]
                lowData = [np.nanpercentile(a,30) for a in statsData]
                highData = [np.nanpercentile(a,70) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:133
==SitePOR_PREC:101
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        sliderDates = list(chain([(date_series[0])] +
                                      [date_series[-1]]))
    else: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:134
==SiteProjection_PREC:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData]
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))
    else: (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_PREC:383
==BasinPOR_SMS:333
==BasinPOR_STO:335
==BasinPOR_SWE:389
==BasinPOR_TAVG:332
            bt = time.time()
            dirPath = path.join(master_dir, 'basinCharts','POR', sensor, state)
            plotName = path.join(dirPath, basinName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                basinSites = getBasinSites(basinName,basinTable)
                fig = go.Figure(updtChart(basinName,basinSites))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     No sites with that sensor in that basin, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds')
 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:131
==BasinPOR_SMS:136
==BasinPOR_STO:137
==BasinProjection_PREC:130
    PORplotData = list([basinPlotData[i:i+366]
                    for i in range(0,len(basinPlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData]
            meanData = [np.nanmean(a) for a in statsData]
            lowestData = [np.nanpercentile(a,10) for a in statsData]
            highestData = [np.nanpercentile(a,90) for a in statsData]
            lowData = [np.nanpercentile(a,30) for a in statsData]
            highData = [np.nanpercentile(a,70) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:6
==onHold.lib.awdbToolsJson:6
import datetime
import math
import pandas as pd
import calendar as cal
import numpy as np
import csv
import warnings
import json
import os

this_dir = os.path.dirname(os.path.abspath(__file__))
static_dir = os.path.join(os.path.dirname(this_dir), r'static')

dt = datetime.datetime
date = datetime.date
today = dt.utcnow() - datetime.timedelta(hours=8)
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:304
==SiteProjection_PREC:277
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])

    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official mean calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = '' (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:251
==SitePOR_SWE:224
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
    if maxData:
        trace.extend(
                [go.Scatter(x=date_series,y=maxData,
                            name=r'Max',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(0,0,237,0.4)'))])

    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official median calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = '' (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SMS:39
==BasinPOR_STO:37
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    plotData = []
    basinPlotData = []
    PORplotData = []
    validTrip = []

    networks = [r'SNTL',r'SCAN',r'SNTLT'] (duplicate-code)
R:  1, 0: Similar lines in 5 files
==SitePOR_PREC:32
==SitePOR_SWE:37
==SitePOR_TAVG:35
==SiteProjection_PREC:37
==SiteProjection_SWE:37
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    sitePlotData = []
    PORplotData = []
    sitePlotNormData = []
    validTrip = [site_triplet]
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_SWE:305
==SiteProjection_SWE:279
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])

    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official median calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = '' (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:6
==BasinProjection_SWE:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from itertools import chain
import csv
import warnings
import time
import math
from scipy import stats (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:251
==SitePOR_TAVG:214
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
    if maxData:
        trace.extend(
                [go.Scatter(x=date_series,y=maxData,
                            name=r'Max',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(0,0,237,0.4)'))])

    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official median calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>") (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_STO:140
==BasinPOR_TAVG:119
==SitePOR_SMS:122
        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
            statsData[151] = statsData[150]
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", category=RuntimeWarning)
                minData = [np.nanmin(a) for a in statsData]
                maxData = [np.nanmax(a) for a in statsData]
                meanData = [np.nanmean(a) for a in statsData]
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                highestData = [np.nanpercentile(a,90) for a in statsData]
                lowData = [np.nanpercentile(a,30) for a in statsData]
                highData = [np.nanpercentile(a,70) for a in statsData]
            future_date_pad = 30 (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:385
==BasinPOR_SMS:335
==BasinPOR_STO:337
==BasinPOR_SWE:391
==BasinPOR_TAVG:334
==BasinProjection_PREC:439
==BasinProjection_SWE:439
            plotName = path.join(dirPath, basinName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                basinSites = getBasinSites(basinName,basinTable)
                fig = go.Figure(updtChart(basinName,basinSites))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     No sites with that sensor in that basin, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds')
 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_PREC:248
==BasinPOR_TAVG:236
==SitePOR_PREC:214
                                    line=dict(color='rgba(0,237,0,0.4)',
                                              dash='dash'))])
            else:
                trace.extend(
                        [go.Scatter(x=date_series,y=meanData,
                                    name=r'Normal (POR)',connectgaps=True,
                                    visible=True,hoverinfo='none',
                                    line=dict(color='rgba(0,237,0,0.4)'))])
        if maxData:
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData,
                                name=r'Max',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(0,0,237,0.4)'))])

        annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official mean calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>") (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:6
==BasinPOR_SWE:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from scipy import stats
from itertools import chain
import csv
import warnings
import math
import time (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_SWE:6
==SiteProjection_PREC:6
==SiteProjection_SWE:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from scipy import stats
from itertools import chain
import warnings
import math
import time (duplicate-code)
R:  1, 0: Similar lines in 5 files
==SitePOR_PREC:343
==SitePOR_SWE:353
==SitePOR_TAVG:343
==SiteProjection_PREC:406
==SiteProjection_SWE:406
            plotName = path.join(dirPath, siteName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                fig = go.Figure(updtChart(site_triplet,siteName))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     Something went wrong, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds')
 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==SitePOR_PREC:342
==SitePOR_SMS:311
==SitePOR_SWE:352
==SitePOR_TAVG:342
            dirPath = path.join(master_dir, 'siteCharts','POR', sensor, state)
            plotName = path.join(dirPath, siteName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                fig = go.Figure(updtChart(site_triplet,siteName))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     Something went wrong, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds') (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SMS:319
==basinMaps:182
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable:
            bt = time.time() (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_SMS:139
==BasinPOR_STO:140
==BasinPOR_TAVG:119
==SitePOR_PREC:101
==SiteProjection_PREC:106
        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
            statsData[151] = statsData[150]
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", category=RuntimeWarning)
                minData = [np.nanmin(a) for a in statsData]
                maxData = [np.nanmax(a) for a in statsData]
                meanData = [np.nanmean(a) for a in statsData]
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                highestData = [np.nanpercentile(a,90) for a in statsData]
                lowData = [np.nanpercentile(a,30) for a in statsData]
                highData = [np.nanpercentile(a,70) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_PREC:134
==BasinProjection_PREC:133
==SitePOR_SMS:122
        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
            statsData[151] = statsData[150]
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", category=RuntimeWarning)
                minData = [np.nanmin(a) for a in statsData]
                maxData = [np.nanmax(a) for a in statsData]
                meanData = [np.nanmean(a) for a in statsData]
                lowestData = [np.nanpercentile(a,10) for a in statsData]
                highestData = [np.nanpercentile(a,90) for a in statsData]
                lowData = [np.nanpercentile(a,30) for a in statsData]
                highData = [np.nanpercentile(a,70) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:109
==BasinPOR_SWE:109
==SitePOR_PREC:81
==SitePOR_SWE:86
==SitePOR_TAVG:76
==SiteProjection_PREC:86
==SiteProjection_SWE:86
    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d")
    eDate = today.date().strftime("%Y-%m-%d")

    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)
 (duplicate-code)
R:  1, 0: Similar lines in 6 files
==BasinPOR_PREC:248
==BasinPOR_SWE:251
==BasinPOR_TAVG:236
==SitePOR_PREC:214
==SitePOR_SWE:224
==SitePOR_TAVG:214
                                    line=dict(color='rgba(0,237,0,0.4)',
                                              dash='dash'))])
            else:
                trace.extend(
                        [go.Scatter(x=date_series,y=meanData,
                                    name=r'Normal (POR)',connectgaps=True,
                                    visible=True,hoverinfo='none',
                                    line=dict(color='rgba(0,237,0,0.4)'))])
        if maxData:
            trace.extend(
                    [go.Scatter(x=date_series,y=maxData,
                                name=r'Max',visible=True,
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(0,0,237,0.4)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_PREC:23
==BasinPOR_STO:21
==BasinPOR_SWE:23
==BasinProjection_PREC:23
==BasinProjection_SWE:23
py.init_notebook_mode(connected=True)

this_dir = path.dirname(path.abspath(__file__))
master_dir = path.dirname(this_dir)

#wsdl = r"https://wcc.sc.egov.usda.gov/awdbWebService/services?WSDL"
#transport = Transport(timeout=300,cache=InMemoryCache())
#awdb = Client(wsdl=wsdl,transport=transport,strict=False)

dt = datetime.datetime
date = datetime.date
today = dt.utcnow() - datetime.timedelta(hours=8)

def updtChart(basinName, basinSites):
    basin = basinName (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:34
==onHold.lib.awdbToolsJson:23
def isActive(x):
    if dt.strptime(x.endDate, "%Y-%m-%d %H:%M:%S").date() > today.date():
        return True
def isAbove(x,elev):
    if x.elevation >= elev:
        return True
def isBelow(x,elev):
    if x.elevation <= elev:
        return True
def isYearsOld(x,yrs):
    s = str(x.beginDate)
    c = dt.today().year - yrs
    if int(s[:4]) < c:
        return True (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:48
==lib.awdbToolsJson:66
def nonLeapDaysBetween(_sDateLeap,_eDateLeap):
    nonLeapDays = 0
    if _sDateLeap.month > 2:
        sYear = _sDateLeap.year + 1
    else:
        sYear = _sDateLeap.year
    if _eDateLeap.month < 3:
        eYear = _eDateLeap.year - 1
    else:
        eYear = _eDateLeap.year
    for t in range(sYear,eYear+1):
        if not cal.isleap(t): nonLeapDays += 1
    return nonLeapDays
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SiteProjection_PREC:267
==SiteProjection_SWE:269
    if sitePlotNormData:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=sitePlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if sitePlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly', (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_SMS:312
==SiteProjection_PREC:406
==SiteProjection_SWE:406
            plotName = path.join(dirPath, siteName + r'.html')
            makedirs(dirPath, exist_ok=True)
            try:
                fig = go.Figure(updtChart(site_triplet,siteName))
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     Something went wrong, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds') (duplicate-code)
R:  1, 0: Similar lines in 5 files
==SitePOR_SMS:20
==SitePOR_SWE:22
==SitePOR_TAVG:20
==SiteProjection_PREC:22
==SiteProjection_SWE:22
py.init_notebook_mode(connected=True)

this_dir = path.dirname(path.abspath(__file__))
master_dir = path.dirname(this_dir)

#wsdl = r"https://wcc.sc.egov.usda.gov/awdbWebService/services?WSDL"
#transport = Transport(timeout=300,cache=InMemoryCache())
#awdb = Client(wsdl=wsdl,transport=transport,strict=False)

dt = datetime.datetime
date = datetime.date
today = dt.utcnow() - datetime.timedelta(hours=8)

def updtChart(site_triplet, siteName): (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinProjection_PREC:304
==SitePOR_PREC:208
==SitePOR_SWE:218
==SitePOR_TAVG:208
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinProjection_PREC:158
==BasinProjection_SWE:161
==SiteProjection_PREC:131
==SiteProjection_SWE:135
                a in allButCurrWY]
    statsProj = list(map(list,zip(*projData)))
    cleanStatsProj = list(statsProj)
    if cleanStatsProj:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minProj = [np.nanmin(a) for a in cleanStatsProj]
            maxProj = [np.nanmax(a) for a in cleanStatsProj]
            medianProj = [np.nanpercentile(a,50) for a in cleanStatsProj]
            lowestProj = [np.nanpercentile(a,10) for a in cleanStatsProj]
            highestProj = [np.nanpercentile(a,90) for a in cleanStatsProj]
            lowProj = [np.nanpercentile(a,30) for a in cleanStatsProj]
            highProj = [np.nanpercentile(a,70) for a in cleanStatsProj]
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:236
==BasinProjection_PREC:294
    if basinPlotNormData:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=basinPlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if basinPlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly', (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_SMS:6
==BasinPOR_STO:6
==BasinPOR_TAVG:6
==BasinProjection_PREC:6
==BasinProjection_SWE:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from itertools import chain
import csv
import warnings
import time (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:368
==BasinPOR_STO:320
==BasinPOR_SWE:374
==BasinPOR_TAVG:317
==BasinProjection_PREC:422
==BasinProjection_SWE:422
==basinMaps:182
        with open(basinDefFileName, 'r') as data_file:
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i]
                basinTable[name] = temp_dict

        for basinName in basinTable: (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_PREC:242
==SitePOR_PREC:208
==SitePOR_SWE:218
==SitePOR_TAVG:208
==SiteProjection_PREC:277
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',
                                connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_PREC:232
==BasinProjection_PREC:294
==BasinProjection_SWE:295
    if basinPlotNormData:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=basinPlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if basinPlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly', (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:39
==BasinPOR_SMS:39
==BasinPOR_STO:37
==BasinPOR_SWE:39
==BasinPOR_TAVG:44
==BasinProjection_PREC:39
==BasinProjection_SWE:39
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    plotData = []
    basinPlotData = []
    PORplotData = [] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:52
==onHold.lib.awdbToolsJson:42
def fillMissingData(x,daysBack):
    daysBack = -1*daysBack
    if math.isnan(sum(x[daysBack:])) or not x:
        return x
    else:
        if len(x) < daysBack:
            daysBack = len(x)
        if math.isnan(x[-1]):
            x[-1] = [i for i in x if not math.isnan(i)][-1]
        y = x[daysBack:]
        x[:] = (x[:daysBack] +
         pd.DataFrame(y).interpolate().values.ravel().tolist())
        return x (duplicate-code)
R:  1, 0: Similar lines in 3 files
==data.dataFetch:48
==lib.awdbToolsJson:66
==onHold.lib.awdbToolsJson:55
def nonLeapDaysBetween(_sDateLeap,_eDateLeap):
    nonLeapDays = 0
    if _sDateLeap.month > 2:
        sYear = _sDateLeap.year + 1
    else:
        sYear = _sDateLeap.year
    if _eDateLeap.month < 3:
        eYear = _eDateLeap.year - 1
    else:
        eYear = _eDateLeap.year
    for t in range(sYear,eYear+1):
            if not cal.isleap(t): nonLeapDays += 1
    return nonLeapDays (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:381
==data.updateDataFetch:199
    chunks = [validTrip[x:x+50] for x in range(0, len(validTrip), 50)]

    bt = time.time()

    num_threads=4
    q = Queue(maxsize=0)
    for i in range(num_threads):
        t = Thread(target=getSiteSoilsData, args=(q,))
        t.daemon = True
        t.start()
    for sites in chunks:
        q.put([sites,heightDepth])
    q.join() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:322
==data.updateDataFetch:172
    chunks = [validTrip[x:x+50] for x in range(0, len(validTrip), 50)]

    bt = time.time()

    num_threads=4
    q = Queue(maxsize=0)
    for i in range(num_threads):
        t = Thread(target=getSiteHourlyData, args=(q,))
        t.daemon = True
        t.start()
    for sites in chunks:
        q.put(sites)
    q.join() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:296
==data.updateDataFetch:152
    chunks = [validTrip[x:x+50] for x in range(0, len(validTrip), 50)]

    bt = time.time()

    num_threads=4
    q = Queue(maxsize=0)
    for i in range(num_threads):
        t = Thread(target=getSiteData, args=(q,))
        t.daemon = True
        t.start()
    for sites in chunks:
        q.put(sites)
    q.join() (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_SWE:339
==SitePOR_TAVG:329
==SiteProjection_PREC:392
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
        with request.urlopen(url) as data:
            meta = json.loads(data.read().decode())

        meta[:] = [x for x in meta if
            x['stationTriplet'].split(':')[1] in state and
            x['stationTriplet'].split(':')[2] in networks]

        for site in meta:

            bt = time.time()
            site_triplet = site['stationTriplet']
            siteName = site['name'] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_SMS:6
==SitePOR_TAVG:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from itertools import chain
import warnings
import time (duplicate-code)
R:  1, 0: Similar lines in 4 files
==SitePOR_SMS:119
==SitePOR_SWE:103
==SitePOR_TAVG:93
==SiteProjection_SWE:103
    PORplotData = list([sitePlotData[i:i+366]
                    for i in range(0,len(sitePlotData),366)])

    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 6 files
==SitePOR_PREC:69
==SitePOR_SMS:62
==SitePOR_SWE:74
==SitePOR_TAVG:64
==SiteProjection_PREC:74
==SiteProjection_SWE:74
    siteBeginDate = min(beginDateDict.values())

    sYear = siteBeginDate.year
    if siteBeginDate.year > sYear:
        if siteBeginDate.month < 10:
            sYear = siteBeginDate.year
        else:
            if siteBeginDate.month == 10 and siteBeginDate.day == 1:
                sYear = siteBeginDate.year
            else:
                sYear = siteBeginDate.year + 1

    sDate = date(sYear, 10, 1).strftime("%Y-%m-%d") (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:246
==SiteProjection_SWE:279
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)',
                                visible='legendonly',
                                hoverinfo='none',connectgaps=True,
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_SMS:136
==BasinPOR_STO:137
==BasinPOR_SWE:131
==BasinProjection_SWE:129
        PORplotData = list([basinPlotData[i:i+366]
                        for i in range(0,len(basinPlotData),366)])

        allButCurrWY = list(PORplotData)
        del allButCurrWY[-1]
        statsData = list(map(list,zip(*allButCurrWY)))

        if len(statsData[0]) > 1:
            statsData[151] = statsData[150]
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", category=RuntimeWarning)
                minData = [np.nanmin(a) for a in statsData]
                maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 12 files
==BasinPOR_PREC:23
==BasinPOR_STO:21
==BasinPOR_SWE:23
==BasinPOR_TAVG:21
==BasinProjection_PREC:23
==BasinProjection_SWE:23
==SiteContour_SMS:19
==SitePOR_SMS:20
==SitePOR_SWE:22
==SitePOR_TAVG:20
==SiteProjection_PREC:22
==SiteProjection_SWE:22
py.init_notebook_mode(connected=True)

this_dir = path.dirname(path.abspath(__file__))
master_dir = path.dirname(this_dir)

#wsdl = r"https://wcc.sc.egov.usda.gov/awdbWebService/services?WSDL"
#transport = Transport(timeout=300,cache=InMemoryCache())
#awdb = Client(wsdl=wsdl,transport=transport,strict=False)

dt = datetime.datetime
date = datetime.date
today = dt.utcnow() - datetime.timedelta(hours=8)
 (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:97
==BasinPOR_SMS:76
==BasinPOR_STO:76
==BasinPOR_SWE:97
==BasinPOR_TAVG:82
==BasinProjection_PREC:96
==BasinProjection_SWE:96
        basinBeginDate = min(beginDateDict.values())

        sYear = basinBeginDate.year
        if basinBeginDate.year > sYear:
            if basinBeginDate.month < 10:
                sYear = basinBeginDate.year
            else:
                if basinBeginDate.month == 10 and basinBeginDate.day == 1:
                    sYear = basinBeginDate.year
                else:
                    sYear = basinBeginDate.year + 1

        sDate = date(sYear, 10, 1).strftime("%Y-%m-%d") (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:102
==onHold.lib.awdbToolsJson:88
def createPRECProjTrace(i,jDay,lastValue,nanList):
    dailyData = list(i)
    if jDay < 151 and np.isnan(dailyData[151]):
            dailyData[151] = dailyData[150]
    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        if dailyData:
            projection = list(np.nancumsum(np.diff(dailyData[jDay:])))
            projTrace = nanList + [lastValue] + [lastValue + x for x in projection]
        else:
            projTrace = [np.nan]*366
    return projTrace (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_TAVG:97
==BasinProjection_PREC:111
==SitePOR_PREC:84
==SitePOR_SWE:89
==SitePOR_TAVG:79
==SiteProjection_PREC:89
==SiteProjection_SWE:89
    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))

    for dataSite in data:
        if dataSite:
            padMissingData(dataSite,sDate,eDate)
 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_SMS:94
==BasinPOR_STO:96
==SitePOR_SMS:80
            data = []
            for triplet in validTrip:
                url = '/'.join([dataUrl,'DAILY', sensor,
                                triplet.replace(':','_') + '.json'])
                with request.urlopen(url) as d:
                    jTemp = json.loads(d.read().decode())
                data.append(trimToOct1(jTemp))
            depthData = {}
            for dataSite in data:
                siteData = []
                if hasattr(dataSite,r'values'):
                    if dataSite['values']: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:354
==basinMaps:168
        )

    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    sensor = 'PREC'

    for state in states:
        delimiter = ','
        basinTable = {} (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_PREC:6
==BasinPOR_SWE:6
==SitePOR_SWE:6
==SiteProjection_PREC:6
==SiteProjection_SWE:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from scipy import stats
from itertools import chain (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_PREC:39
==BasinPOR_SMS:39
==BasinPOR_STO:37
==BasinPOR_SWE:39
==BasinPOR_TAVG:44
==BasinProjection_PREC:39
==BasinProjection_SWE:39
==SitePOR_SMS:35
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = []
    plotData = [] (duplicate-code)
R:  1, 0: Similar lines in 9 files
==BasinPOR_PREC:251
==BasinPOR_SMS:242
==BasinPOR_STO:243
==BasinPOR_SWE:254
==BasinPOR_TAVG:239
==SitePOR_PREC:217
==SitePOR_SMS:225
==SitePOR_SWE:227
==SitePOR_TAVG:217
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
    if maxData:
        trace.extend(
                [go.Scatter(x=date_series,y=maxData,
                            name=r'Max',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(0,0,237,0.4)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:60
==BasinPOR_SMS:58
==BasinPOR_STO:58
==BasinPOR_SWE:60
==BasinPOR_TAVG:64
==BasinProjection_PREC:60
==BasinProjection_SWE:60
    url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
    with request.urlopen(url) as data:
        meta = json.loads(data.read().decode())

    meta[:] = [x for x in meta if str.split(x['stationTriplet'],":")[2] in
        networks and str.split(x['stationTriplet'],":")[0] in basinSites]

    validTrip = [x['stationTriplet'] for x in meta]
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip: (duplicate-code)
R:  1, 0: Similar lines in 6 files
==SiteContour_SMS:252
==SitePOR_PREC:329
==SitePOR_SMS:298
==SitePOR_SWE:339
==SitePOR_TAVG:329
==SiteProjection_PREC:392
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
        with request.urlopen(url) as data:
            meta = json.loads(data.read().decode())

        meta[:] = [x for x in meta if
            x['stationTriplet'].split(':')[1] in state and
            x['stationTriplet'].split(':')[2] in networks]

        for site in meta:

            bt = time.time() (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_SMS:6
==BasinPOR_STO:6
==BasinPOR_TAVG:6
==BasinProjection_PREC:6
==BasinProjection_SWE:6
==SiteContour_SMS:6
==SitePOR_SMS:6
==SitePOR_TAVG:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from itertools import chain (duplicate-code)
R:  1, 0: Similar lines in 13 files
==BasinPOR_PREC:39
==BasinPOR_SMS:39
==BasinPOR_STO:37
==BasinPOR_SWE:39
==BasinPOR_TAVG:44
==BasinProjection_PREC:39
==BasinProjection_SWE:39
==SitePOR_PREC:32
==SitePOR_SMS:35
==SitePOR_SWE:37
==SitePOR_TAVG:35
==SiteProjection_PREC:37
==SiteProjection_SWE:37
    statsData = []
    minData = []
    maxData = []
    meanData = []
    lowestData = []
    highestData = []
    lowData = []
    highData = []
    sliderDates = []
    meanData = []
    trace = [] (duplicate-code)
R:  1, 0: Similar lines in 13 files
==BasinPOR_PREC:155
==BasinPOR_SMS:164
==BasinPOR_STO:165
==BasinPOR_SWE:159
==BasinPOR_TAVG:144
==BasinProjection_PREC:173
==BasinProjection_SWE:175
==SitePOR_PREC:121
==SitePOR_SMS:147
==SitePOR_SWE:131
==SitePOR_TAVG:121
==SiteProjection_PREC:146
==SiteProjection_SWE:149
    if len(PORplotData) > 0:
        for index, i in enumerate(PORplotData):
            if index == len(PORplotData)-1:
                trace.extend(
                        [go.Scatter(
                                x=date_series,y=i,
                                name=str(sYear + index + 1),
                                visible=True,connectgaps=True,
                                line=dict(color='rgb(0,0,0)'))])
            elif np.nansum(i) > 0:
                trace.extend( (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_PREC:225
==BasinPOR_SWE:229
==BasinPOR_TAVG:214
    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])

    if basinPlotNormData:
        trace.extend(
                [go.Scatter(x=date_series,
                            y=basinPlotNormData, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:18
==data.updateDataFetch:19
this_dir = path.dirname(path.abspath(__file__))
master_dir = path.dirname(path.dirname(path.dirname(this_dir)))

wsdl = r"https://wcc.sc.egov.usda.gov/awdbWebService/services?WSDL"
transport = Transport(timeout=300,cache=InMemoryCache())
awdb = Client(wsdl=wsdl,transport=transport,strict=False)

dt = datetime.datetime
date = datetime.date
today = dt.utcnow() - datetime.timedelta(hours=8) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==SitePOR_PREC:9
==SitePOR_SWE:11
==SiteProjection_PREC:11
==SiteProjection_SWE:11
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from scipy import stats
from itertools import chain
import warnings
import math
import time (duplicate-code)
R:  1, 0: Similar lines in 7 files
==SiteContour_SMS:269
==SitePOR_PREC:347
==SitePOR_SMS:316
==SitePOR_SWE:357
==SitePOR_TAVG:347
==SiteProjection_PREC:410
==SiteProjection_SWE:410
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     Something went wrong, no chart created')
            print(f'     in {round(time.time()-bt,2)} seconds') (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinProjection_PREC:410
==basinMaps:170
    return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    sensor = 'PREC'

    for state in states:
        delimiter = ','
        basinTable = {} (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_SWE:134
==BasinProjection_SWE:132
==SitePOR_PREC:101
==SitePOR_SMS:122
==SiteProjection_PREC:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 10 files
==BasinPOR_PREC:369
==BasinPOR_SMS:320
==BasinPOR_STO:321
==BasinPOR_SWE:375
==BasinPOR_TAVG:318
==BasinProjection_PREC:423
==BasinProjection_SWE:423
==basinMaps:183
==lib.awdbToolsJson:305
==onHold.lib.awdbToolsJson:285
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0]
                values = []
                for x in row[1:]:
                    values.append(x)
                for i in range(len(values)):
                    temp_dict[headers[i]] = values[i] (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_PREC:390
==BasinPOR_SMS:340
==BasinPOR_STO:342
==BasinPOR_SWE:396
==BasinPOR_TAVG:339
==BasinProjection_PREC:444
==BasinProjection_SWE:444
==basinMaps:203
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except:
                print('     No sites with that sensor in that basin, no chart created')
                print(f'     in {round(time.time()-bt,2)} seconds') (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_PREC:134
==BasinPOR_SMS:139
==BasinPOR_STO:140
==BasinPOR_TAVG:119
==BasinProjection_PREC:133
==SitePOR_SWE:106
==SitePOR_TAVG:96
==SiteProjection_SWE:106
    allButCurrWY = list(PORplotData)
    del allButCurrWY[-1]
    statsData = list(map(list,zip(*allButCurrWY)))

    if len(statsData[0]) > 1:
        statsData[151] = statsData[150]
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=RuntimeWarning)
            minData = [np.nanmin(a) for a in statsData]
            maxData = [np.nanmax(a) for a in statsData] (duplicate-code)
R:  1, 0: Similar lines in 14 files
==BasinPOR_PREC:297
==BasinPOR_SMS:256
==BasinPOR_STO:257
==BasinPOR_SWE:304
==BasinPOR_TAVG:253
==BasinProjection_PREC:352
==BasinProjection_SWE:352
==SiteContour_SMS:175
==SitePOR_PREC:263
==SitePOR_SMS:239
==SitePOR_SWE:273
==SitePOR_TAVG:263
==SiteProjection_PREC:326
==SiteProjection_SWE:327
    layout = go.Layout(
            images= [dict(
                source= "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/US-NaturalResourcesConservationService-Logo.svg/2000px-US-NaturalResourcesConservationService-Logo.svg.png",
                xref="paper",
                yref="paper",
                x= 0,
                y= 0.9,
                xanchor="left", yanchor="bottom",
                sizex= 0.4,
                sizey= 0.1, (duplicate-code)
R:  1, 0: Similar lines in 13 files
==BasinPOR_PREC:6
==BasinPOR_SMS:6
==BasinPOR_STO:6
==BasinPOR_SWE:6
==BasinPOR_TAVG:6
==BasinProjection_PREC:6
==BasinProjection_SWE:6
==SiteContour_SMS:6
==SitePOR_SMS:6
==SitePOR_SWE:6
==SitePOR_TAVG:6
==SiteProjection_PREC:6
==SiteProjection_SWE:6
from os import path, makedirs
import urllib.request as request
#from zeep import Client
#from zeep.transports import Transport
#from zeep.cache import InMemoryCache
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:422
==data.updateDataFetch:227
        sensors = [r"BATT"]
        ordinals = [1]#,2]
        for ordinal in ordinals:
            for sensor in sensors:
                getHourlyData(sensor)

        with open(path.join(this_dir,'lastCall.txt'), 'w') as f:
            f.write(eDate)
    else: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==data.dataFetch:8
==data.updateDataFetch:8
from zeep import Client
from zeep.transports import Transport
from zeep.cache import InMemoryCache
from zeep import helpers
import datetime
from queue import Queue
from threading import Thread
import simplejson as json
import time (duplicate-code)
R:  1, 0: Similar lines in 6 files
==SiteContour_SMS:252
==SitePOR_PREC:329
==SitePOR_SMS:298
==SitePOR_TAVG:329
==SiteProjection_PREC:392
==SiteProjection_SWE:393
        url = '/'.join([dataUrl,'metadata', sensor, 'metadata.json'])
        with request.urlopen(url) as data:
            meta = json.loads(data.read().decode())

        meta[:] = [x for x in meta if
            x['stationTriplet'].split(':')[1] in state and
            x['stationTriplet'].split(':')[2] in networks]

        for site in meta: (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinProjection_PREC:310
==BasinProjection_SWE:310
==SiteProjection_PREC:283
==SiteProjection_SWE:284
                                line=dict(color='rgba(0,237,0,0.4)',
                                          dash='dash'))])
        else:
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_PREC:71
==BasinPOR_SWE:71
==BasinProjection_PREC:71
==BasinProjection_SWE:71
==SitePOR_PREC:51
==SitePOR_SWE:56
==SiteProjection_PREC:56
==SiteProjection_SWE:56
    if validTrip:
        normData = []
        for triplet in validTrip:
            url = '/'.join([dataUrl,'normals', 'DAILY', sensor,
                            triplet.replace(':','_') + '.json'])
            with request.urlopen(url) as d:
                jTemp = json.loads(d.read().decode())
            normData.append(jTemp)
 (duplicate-code)
R:  1, 0: Similar lines in 5 files
==SitePOR_PREC:199
==SitePOR_SWE:209
==SitePOR_TAVG:199
==SiteProjection_PREC:268
==SiteProjection_SWE:270
        trace.extend(
                [go.Scatter(x=date_series,
                            y=sitePlotNormData,
                            name=r"Normal ('81-'10)",connectgaps=True,
                            visible=True,hoverinfo='none',
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData: (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_SWE:251
==BasinPOR_TAVG:236
==BasinProjection_PREC:310
==SiteProjection_PREC:283
                                    line=dict(color='rgba(0,237,0,0.4)',
                                              dash='dash'))])
            else:
                trace.extend(
                        [go.Scatter(x=date_series,y=meanData,
                                    name=r'Normal (POR)',connectgaps=True,
                                    visible=True,hoverinfo='none',
                                    line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_SMS:114
==BasinPOR_STO:116
==SitePOR_SMS:100
                            depthData.update(
                                    {str(dataSite['stationTriplet']) :
                                        list(siteData)})

                    dataDict.update({sensorDepth : dict(depthData)})
                    depthData.clear()

        plotData = {} (duplicate-code)
R:  1, 0: Similar lines in 14 files
==BasinPOR_PREC:305
==BasinPOR_SMS:264
==BasinPOR_STO:265
==BasinPOR_SWE:312
==BasinPOR_TAVG:261
==BasinProjection_PREC:360
==BasinProjection_SWE:360
==SitePOR_PREC:271
==SitePOR_SMS:247
==SitePOR_SWE:281
==SitePOR_TAVG:271
==SiteProjection_PREC:334
==SiteProjection_SWE:335
==basinMaps:132
                sizex= 0.4,
                sizey= 0.1,
                opacity= 0.5,
                layer= "above"
            )],
            annotations=[dict(
                font=dict(size=10),
                text=annoText, (duplicate-code)
R:  1, 0: Similar lines in 15 files
==BasinPOR_PREC:390
==BasinPOR_SMS:340
==BasinPOR_STO:342
==BasinPOR_SWE:396
==BasinPOR_TAVG:339
==BasinProjection_PREC:444
==BasinProjection_SWE:444
==SiteContour_SMS:269
==SitePOR_PREC:347
==SitePOR_SMS:316
==SitePOR_SWE:357
==SitePOR_TAVG:347
==SiteProjection_PREC:410
==SiteProjection_SWE:410
==basinMaps:203
                py.plot(fig, filename=plotName, auto_open=False,
                        show_link=False, include_plotlyjs=False)
                bodyStr = r'<body style="background:url(https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/gears.gif) no-repeat 290px 250px;width:700px;height:622px;"><script src="https://www.wcc.nrcs.usda.gov/ftpref/states/ut/iCharts/misc/plotly.js"></script>'
                with open(plotName) as plotFile:
                    plotStr = plotFile.read().replace('<body>', bodyStr)
                with open(plotName, 'w') as newPlotFile:
                    newPlotFile.write(plotStr)
            except: (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_PREC:248
==BasinPOR_TAVG:236
==BasinProjection_SWE:310
==SitePOR_PREC:214
==SitePOR_SWE:224
==SitePOR_TAVG:214
==SiteProjection_PREC:283
==SiteProjection_SWE:284
                                    line=dict(color='rgba(0,237,0,0.4)',
                                              dash='dash'))])
            else:
                trace.extend(
                        [go.Scatter(x=date_series,y=meanData,
                                    name=r'Normal (POR)',connectgaps=True,
                                    visible=True,hoverinfo='none',
                                    line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==lib.awdbToolsJson:144
==onHold.lib.awdbToolsJson:128
def getBasinSites(basinName,basinTable):
    siteListStr = basinTable.get(basinName).get(r'BasinSites')
    siteList = []
    if siteListStr:
        siteList = siteListStr.split(r';')
    if siteList:
        return siteList (duplicate-code)
R:  1, 0: Similar lines in 3 files
==data.dataFetch:296
==data.updateDataFetch:172
==data.updateDataFetch:199
    chunks = [validTrip[x:x+50] for x in range(0, len(validTrip), 50)]

    bt = time.time()

    num_threads=4
    q = Queue(maxsize=0)
    for i in range(num_threads): (duplicate-code)
R:  1, 0: Similar lines in 6 files
==data.dataFetch:322
==data.dataFetch:348
==data.dataFetch:381
==data.updateDataFetch:152
==data.updateDataFetch:172
==data.updateDataFetch:199
    chunks = [validTrip[x:x+50] for x in range(0, len(validTrip), 50)]

    bt = time.time()

    num_threads=4
    q = Queue(maxsize=0)
    for i in range(num_threads): (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SitePOR_SWE:239
==SiteProjection_SWE:293
    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official median calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = ''
    if len(sitePlotNormData) == 0:
        sitePlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this site'
        asterisk = '*'
    jDay = len(PORplotData[-1])-1 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinProjection_PREC:150
==BasinProjection_SWE:153
==SiteProjection_PREC:123
==SiteProjection_SWE:127
    else:
        sliderDates = list(chain([(date_series[0])] +
                                  [date_series[-1]]))

    jDay = len(PORplotData[-1])-1
    lastValue = PORplotData[-1][-1]
    nanList = [np.nan]*jDay (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_TAVG:303
==basinMaps:168
            )

        return {'data': trace,
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY'] (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_TAVG:227
==BasinProjection_PREC:300
==BasinProjection_SWE:301
                            line=dict(color='rgba(0,237,0,0.4)'))])

    if meanData:
        if basinPlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)', (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_SWE:292
==BasinProjection_SWE:340
==SitePOR_PREC:251
==SiteProjection_PREC:314
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" + (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_SMS:66
==BasinPOR_STO:66
==BasinPOR_TAVG:72
==SitePOR_SMS:52
    date_series = [date(2015,10,1) + datetime.timedelta(days=x)
                        for x in range(0, 366)] #could use any year with a leap day

    if validTrip:
        beginDateDict = {}
        for siteMeta in meta:
            beginDateDict.update( (duplicate-code)
R:  1, 0: Similar lines in 4 files
==BasinPOR_PREC:285
==BasinProjection_PREC:340
==SitePOR_SWE:261
==SiteProjection_SWE:315
    if jDay > dayOfPeak:
        tense = r'Since'
    else:
        tense = r'Until'
    daysToPeak = str(abs(jDay-dayOfPeak))
    annoData = str(r"Current" + asterisk + ":<br>% of Normal - " +
                   perNorm + r"%<br>" + (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_PREC:277
==BasinPOR_SWE:284
==BasinProjection_PREC:332
==BasinProjection_SWE:332
==SitePOR_PREC:243
==SitePOR_SWE:253
==SiteProjection_PREC:306
==SiteProjection_SWE:307
    if not math.isnan(PORplotData[-1][jDay]):
        centile = ordinal(int(round(
                stats.percentileofscore(
                        statsData[jDay],PORplotData[-1][jDay]),0)))
    else:
        centile = 'N/A'
 (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_PREC:90
==BasinPOR_SWE:90
==SitePOR_PREC:62
==SitePOR_SWE:67
==SitePOR_TAVG:57
==SiteProjection_PREC:67
==SiteProjection_SWE:67
    beginDateDict = {}
    for siteMeta in meta:
        beginDateDict.update(
                {str(siteMeta['stationTriplet']) :
                    dt.strptime(str(siteMeta['beginDate']),
                                "%Y-%m-%d %H:%M:%S")})
 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_PREC:11
==BasinPOR_SWE:11
==SitePOR_PREC:9
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json
from scipy import stats
from itertools import chain (duplicate-code)
R:  1, 0: Similar lines in 9 files
==BasinPOR_PREC:225
==BasinPOR_SMS:234
==BasinPOR_STO:235
==BasinPOR_SWE:229
==BasinPOR_TAVG:214
==SitePOR_PREC:191
==SitePOR_SMS:217
==SitePOR_SWE:201
==SitePOR_TAVG:191
    if minData:
        trace.extend(
                [go.Scatter(x=date_series,y=minData,
                            name=r'Min',visible=True,
                            hoverinfo='none',connectgaps=True,
                            line=dict(color='rgba(237,0,0,0.5)'))])
 (duplicate-code)
R:  1, 0: Similar lines in 13 files
==BasinPOR_PREC:112
==BasinPOR_SMS:94
==BasinPOR_STO:96
==BasinPOR_SWE:112
==BasinPOR_TAVG:97
==BasinProjection_PREC:111
==BasinProjection_SWE:111
==SitePOR_PREC:84
==SitePOR_SMS:80
==SitePOR_SWE:89
==SitePOR_TAVG:79
==SiteProjection_PREC:89
==SiteProjection_SWE:89
    data = []
    for triplet in validTrip:
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp)) (duplicate-code)
R:  1, 0: Similar lines in 3 files
==SitePOR_PREC:230
==SitePOR_SWE:240
==SiteProjection_PREC:293
    asterisk = ''
    if len(sitePlotNormData) == 0:
        sitePlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this site'
        asterisk = '*'
    jDay = len(PORplotData[-1])-1 (duplicate-code)
R:  1, 0: Similar lines in 6 files
==SiteContour_SMS:245
==SitePOR_PREC:322
==SitePOR_SWE:332
==SitePOR_TAVG:322
==SiteProjection_PREC:385
==SiteProjection_SWE:386
            'layout': layout}

if __name__ == '__main__':
    states = [r"UT",r"NV_CA",'AK','AZ','CA','CO','ID','MT','NM','OR','WA','WY']
    networks = ['SNTL','SCAN','SNTLT']
    for state in states: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:266
==BasinProjection_SWE:319
    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official median calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = ''
    if not basinPlotNormData:
        basinPlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this basin'
        asterisk = '*' (duplicate-code)
R:  1, 0: Similar lines in 8 files
==BasinPOR_SMS:179
==BasinPOR_STO:180
==BasinPOR_TAVG:159
==BasinProjection_PREC:239
==BasinProjection_SWE:241
==SitePOR_SMS:162
==SiteProjection_PREC:212
==SiteProjection_SWE:215
    if meanData:
        if lowestData:
            trace.extend(
                    [go.Scatter(x=date_series,y=minData
                                ,legendgroup='centiles',name=r'Min',
                                visible=True,mode='line', (duplicate-code)
R:  1, 0: Similar lines in 10 files
==BasinPOR_PREC:114
==BasinPOR_SWE:114
==BasinPOR_TAVG:99
==BasinProjection_PREC:113
==SiteContour_SMS:92
==SitePOR_PREC:86
==SitePOR_SWE:91
==SitePOR_TAVG:81
==SiteProjection_PREC:91
==SiteProjection_SWE:91
        url = '/'.join([dataUrl,'DAILY', sensor,
                        triplet.replace(':','_') + '.json'])
        with request.urlopen(url) as d:
            jTemp = json.loads(d.read().decode())
        data.append(trimToOct1(jTemp))
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:263
==BasinProjection_PREC:319
    annoText = str(r"Statistical shading breaks at 10th, 30th, 50th, 70th, and 90th Percentiles<br>Normal ('81-'10) - Official mean calculated from 1981 thru 2010 data <br>Normal (POR) - Unofficial mean calculated from Period of Record data <br>For more information visit: <a href='https://www.wcc.nrcs.usda.gov/normals/30year_normals_data.htm'>30 year normals calcuation description</a>")
    asterisk = ''
    if not basinPlotNormData:
        basinPlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this basin'
        asterisk = '*' (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:264
==BasinPOR_SWE:267
    asterisk = ''
    if not basinPlotNormData:
        basinPlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this basin'
        asterisk = '*'
    jDay = len(PORplotData[-1])-1 (duplicate-code)
R:  1, 0: Similar lines in 13 files
==BasinPOR_PREC:197
==BasinPOR_SMS:206
==BasinPOR_STO:207
==BasinPOR_SWE:201
==BasinPOR_TAVG:186
==BasinProjection_PREC:266
==BasinProjection_SWE:268
==SitePOR_PREC:163
==SitePOR_SMS:189
==SitePOR_SWE:173
==SitePOR_TAVG:163
==SiteProjection_PREC:239
==SiteProjection_SWE:242
        if highData:
            trace.extend(
                    [go.Scatter(x=date_series,y=highData,
                                legendgroup='centiles',
                                name=r'Stats. Shading',
                                visible=True,mode='line', (duplicate-code)
R:  1, 0: Similar lines in 12 files
==BasinPOR_PREC:90
==BasinPOR_SMS:70
==BasinPOR_STO:70
==BasinPOR_SWE:90
==BasinPOR_TAVG:76
==BasinProjection_PREC:90
==BasinProjection_SWE:90
==SitePOR_PREC:62
==SitePOR_SWE:67
==SitePOR_TAVG:57
==SiteProjection_PREC:67
==SiteProjection_SWE:67
        beginDateDict = {}
        for siteMeta in meta:
            beginDateDict.update(
                    {str(siteMeta['stationTriplet']) :
                        dt.strptime(str(siteMeta['beginDate']),
                                    "%Y-%m-%d %H:%M:%S")}) (duplicate-code)
R:  1, 0: Similar lines in 6 files
==BasinPOR_PREC:32
==BasinPOR_SMS:32
==BasinPOR_STO:30
==BasinPOR_SWE:32
==BasinProjection_PREC:32
==BasinProjection_SWE:32
dt = datetime.datetime
date = datetime.date
today = dt.utcnow() - datetime.timedelta(hours=8)

def updtChart(basinName, basinSites):
    basin = basinName (duplicate-code)
R:  1, 0: Similar lines in 3 files
==data.dataFetch:43
==lib.awdbToolsJson:39
==onHold.lib.awdbToolsJson:32
def isYearsOld(x,yrs):
    s = str(x.beginDate)
    c = dt.today().year - yrs
    if int(s[:4]) < c:
        return True (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_SWE:267
==BasinProjection_PREC:320
    asterisk = ''
    if not basinPlotNormData:
        basinPlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this basin'
        asterisk = '*' (duplicate-code)
R:  1, 0: Similar lines in 9 files
==BasinPOR_SMS:11
==BasinPOR_STO:11
==BasinPOR_TAVG:11
==BasinProjection_PREC:11
==BasinProjection_SWE:11
==SiteContour_SMS:11
==SitePOR_PREC:9
==SitePOR_SMS:11
==SitePOR_TAVG:11
import datetime
import plotly.graph_objs as go
import plotly.offline as py
import numpy as np
import simplejson as json (duplicate-code)
R:  1, 0: Similar lines in 5 files
==BasinPOR_SMS:96
==BasinPOR_STO:98
==BasinProjection_SWE:113
==SiteContour_SMS:92
==SitePOR_SMS:82
                        url = '/'.join([dataUrl,'DAILY', sensor,
                                        triplet.replace(':','_') + '.json'])
                        with request.urlopen(url) as d:
                            jTemp = json.loads(d.read().decode())
                        data.append(trimToOct1(jTemp)) (duplicate-code)
R:  1, 0: Similar lines in 7 files
==BasinPOR_SMS:242
==BasinPOR_STO:243
==BasinProjection_PREC:313
==BasinProjection_SWE:313
==SitePOR_SMS:225
==SiteProjection_PREC:286
==SiteProjection_SWE:287
            trace.extend(
                    [go.Scatter(x=date_series,y=meanData,
                                name=r'Normal (POR)',connectgaps=True,
                                visible=True,hoverinfo='none',
                                line=dict(color='rgba(0,237,0,0.4)'))]) (duplicate-code)
R:  1, 0: Similar lines in 10 files
==BasinPOR_PREC:369
==BasinPOR_SMS:320
==BasinPOR_STO:321
==BasinPOR_SWE:375
==BasinPOR_TAVG:318
==BasinProjection_PREC:423
==BasinProjection_SWE:423
==basinMaps:183
==lib.awdbToolsJson:330
==onHold.lib.awdbToolsJson:309
            data = csv.reader(data_file, delimiter=delimiter)
            headers = next(data)[1:]
            for row in data:
                temp_dict = {}
                name = row[0] (duplicate-code)
R:  1, 0: Similar lines in 15 files
==BasinPOR_PREC:308
==BasinPOR_SMS:267
==BasinPOR_STO:268
==BasinPOR_SWE:315
==BasinPOR_TAVG:264
==BasinProjection_PREC:363
==BasinProjection_SWE:363
==SiteContour_SMS:186
==SitePOR_PREC:274
==SitePOR_SMS:250
==SitePOR_SWE:284
==SitePOR_TAVG:274
==SiteProjection_PREC:337
==SiteProjection_SWE:338
==basinMaps:135
                    layer= "above"
                )],
                annotations=[dict(
                    font=dict(size=10),
                    text=annoText, (duplicate-code)
R:  1, 0: Similar lines in 2 files
==BasinPOR_PREC:264
==BasinProjection_SWE:320
    asterisk = ''
    if not basinPlotNormData:
        basinPlotNormData = meanData
        annoText = annoText + '<br>*POR data used to calculate Normals since no published 30-year normals available for this basin'
        asterisk = '*' (duplicate-code)
R:  1, 0: Similar lines in 3 files
==BasinPOR_PREC:240
==BasinPOR_SWE:244
==BasinPOR_TAVG:229
    if meanData:
        if basinPlotNormData:
            trace.extend(
                    [go.Scatter(x=date_series,
                                y=meanData,name=r'Normal (POR)', (duplicate-code)
R:  1, 0: Similar lines in 13 files
==BasinPOR_PREC:188
==BasinPOR_SMS:197
==BasinPOR_STO:198
==BasinPOR_SWE:192
==BasinPOR_TAVG:177
==BasinProjection_PREC:257
==BasinProjection_SWE:259
==SitePOR_PREC:154
==SitePOR_SMS:180
==SitePOR_SWE:164
==SitePOR_TAVG:154
==SiteProjection_PREC:230
==SiteProjection_SWE:233
            if lowData:
                trace.extend(
                        [go.Scatter(x=date_series,y=lowData,
                                    legendgroup='centiles',name=r'30%',
                                    visible=True,mode='line', (duplicate-code)

--------------------------------------------------------------------
Your code has been rated at -5.00/10 (previous run: -5.00/10, +0.00)

